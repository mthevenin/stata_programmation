[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programmation",
    "section": "",
    "text": "02 mai 2023: Sortie de la version 18\n\n\n\nEn attendant son installation, à noter:\n\nUn système de backup des .do: une autosave ????\nUn format .dtas, on pourrais enregistrer et ouvrir un ensemble de frames liées entre elles.\n\n\n\n\n\n\n\n\n\n07 mars 2023: nbstata. Stata sous Jupyter.\n\n\n\nDepuis plusieurs années, il est possible d’utiliser le note jupyter avec Stata, en particulier avec la libraire de K.Barron stata_kernel. Suite à l’intégration de Python avec la version 16 de Stata, la librairie officielle pystata a été proposée avec la version 17. Plus rapide (aucune latence ou presque), elle pêche néanmoins par l’obligation d’insérer le magic %%stata à chaque bloc de code et, il me semble, par l’absence de prise en charge de la couleur syntaxique.\nRécemment\nT.Huegerich a mis à disposition une nouvelle librairie nbstata, qui améliore nettement la librairie usine: pas de magic en entrée de chaque bloc de codes, couleurs syntaxique, exportation du programme en .do. Elle nécessite néanmoins la version 17 de Stata au minumum (la 18 sortant ce printemps).\nJe ne reviendrai pas sur la question de l’installation, assez souvent sportive avec Python. Penser néanmoins à installer miniconda, que je ne recommande pas par ailleurs pour utiliser Python sous Stata. J’utilise deux installations de Python: la classique pour une utilisation avec l’interface Stata, et conda lorsque j’utilise le notebook.\n \n\n\n\n\n\n\n\n\n27 février 2023\n\n\n\nLes frames, introduites avec la version 16, permettent entres autres de travailler simultanément sur plusieurs bases de données sans avoir à multiplier les opérations d’enregistrement/ouvrerture ou des preserve/restore. Elles introduisent, en plus, un système de liaison entre bases qui peuvent se substituer aux appariements classiques. Ces nouveautés permettent indirectement d’améliorement la durées d’éxécution des programmes, et de les simplifier. J’avais pris beaucoup de retard là-dessus.Le voilà partiellement comblé: lien\n\n\n\n\n\n\n\n\n07 octobre 2022\n\n\n\nUn premier petit topo sur le calcul des effets marginaux avec R, avec un package récent marginaleffects.\nLien\n\n\n\n\n\n\n\n\n30 septembre 2022\n\n\n\nUne présentation du package Statamarkdown de Doug Hemken. La durée d’exécution n’est pas optimale, mais ce package permet d’exécuter des programmes Stata dans RStudio tout en éditant un document (article, rapport, ouvrage).\nLien\n\n\n\n\n\n\n\n\n08 Septembre 2022\n\n\n\n\n\n\n collect La version 17 de Stata a introduit une suite nommée collect permettant de paramétrer, enregistrer, et utiliser des styles pour les tableaux. Dans le fichier d’aide, l’idée de remplacer les commandes utilisateurs existantes, en particulier la très populaire outreg2, est assez clairement annoncée. Après quelques heures d’apprentissage, je suis agréablement surpris pour ne pas dire bluffé.\nUne première courte présentation pour les régressions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n26 Août 2022\n\n\n\n\nUtilité d’avoir un fichier profile.do\nPrésentation du package gtools et de plusieurs commandes associées qui améliore de manière impréssionnante le temps d’exécution. Particulièrement utile pour des bases de données volumineuses\nLa mise à jour de la formation introductive ne présente pas d’intérêt particulier pour les chercheur.e.s mais je me dois tout de même de la reprendre. Il y a toujours des commandes externes peu connues qui s’avèrent très pratiques: senscode, tabm, fre… Tout le monde connait ????\nLes macros. Déjà une section importante traitée pour les graphiques. Dans un premier temps:\n\nDifférences avec les objets de type scalar\nTour d’horizon plus complet sur les fonctions associées aux macros\n\nPour la question Stata=&gt;R je vais surement partir sur des traductions expliquées de programmes. Dans un premier temps je vais mettre à jour avec R le travail effectué avec Cris sur Mafe en 2015 lien qui consistait à mettre en parallèle, pour une même mise en forme de données biographiques, des programmes en Stata, R et Sas.\n\n\n\n\n\n Support réalisé avec Rstudio - Quarto.\n Version Stata: 17-SE"
  },
  {
    "objectID": "formation/chapitre1.html",
    "href": "formation/chapitre1.html",
    "title": "Introduction",
    "section": "",
    "text": "L’entreprise Stata Corp Lp a été fondée par William Gould. Il est toujours à la tête de l’entreprise.\n\nPremière version (sous MS Dos) en janvier 1985.\n\nPremière version Windows en 1995 (Stata 4).\n\nLa version la plus récente est la 17 [printemps 2021].\nLe rythme de changement de version est de 2 ans. La version 18 devrait donc sortir au printemps 2023. Attention tout de même, il s’agit plutôt de grosses mises à jour, dont l’acquisition systématique s’avère généralement dispensable.\n\n\n\n\n\n\n\nVersion 17\n\n\n\nPrésentation\nA noter:\n\nAmélioration de la vitesse d’exécution (je confirme)\nSuite collect pour gérer et générer les outputs des commandes statistiques. Rapidement testé pour des régressions, et cela me semble plutôt prometteur rapide présentation"
  },
  {
    "objectID": "formation/chapitre1.html#les-ressources-externes",
    "href": "formation/chapitre1.html#les-ressources-externes",
    "title": "Introduction",
    "section": "3.1 Les ressources externes",
    "text": "3.1 Les ressources externes\n\nLes manuels édités par STATA. Certains sont disponibles au GED [http://www.stata.com/bookstore/books-on-stata]\n*Stata Journal, la revue trimestrielle éditée par Stata [http://www.stata-journal.com ]. Depuis 2015 accès total aux versions PDF (via portail GED maintenant). L’accès et le sommaire des 4 derniers numéro est disponible ici: Lien\nUne chaîne Youtube [http://www.youtube.com/user/statacorp/videos?view=0] qui propose des tutoriels via les manips par les boites de dialogue.\nUn forum particulièrement actif (https://www.statalist.org/)\nAuto-promo: le support que j’ai mis en place à l’été 2022 et qui héberge cette formation introductive Lien"
  },
  {
    "objectID": "formation/chapitre1.html#les-ressources-internes",
    "href": "formation/chapitre1.html#les-ressources-internes",
    "title": "Introduction",
    "section": "3.2 Les ressources internes",
    "text": "3.2 Les ressources internes\n\nLe manuel de Stata est directement intégré au logiciel. Pour y accéder à partir du menu : help =&gt; PDF documentation. Il est vraiement de très bonne qualité.\nPour une instruction, on peut obtenir son aide en tapant dans la fenêtre command de l’environnement principal help nom_commande.\n\nPour les commandes internes, un lien permet d’accéder à l’entrée du manuel officiel, plus riche.\n\nDans les fenêtre de dialogue, on peut accéder directement au fichier d’aide en cliquant sur le point d’interrogation.\n\n\n\n\n\nUtiliser l'aide interne\n\nhelp generate\n\n\nL’aide comprend généralement:\n\nLe nom de la commande\nLe lien vers l’entrée du manuel si commande officielle. Pour les commandes externes, un lien vers le sitee support peut-être proposé.\nLa description de la syntaxe\nLe détail des options\nDes exemples avec éventuellement une exécution directe (voir avec help tw)\nLes informations sauvegardées temporairement (jusqu’à l’exécution d’une autre commande) =&gt; stored results.\nL’instruction findit nom_command permet d’obtenir la liste de toutes les ressources disponibles d’une commande, internes ou externes. Exemple: findit fitstat\n\n\n\n\n\n\n\nWarning: compatibilité entre les versions\n\n\n\nDes problèmes de compatibilité entre les versions de Stata se sont posés. Cela affecte la lecture des bases entre les différentes versions du logiciel. C’est le cas entre la version 14 et les versions antérieures (dont la version 13 qui date de 2012).\nVersion 14 (idem 15,16): refonte total du système d’encodage vers le standard UTF8.\nLes versions inférieures ne peuvent pas ouvrir les bases au format actuel, qui doivent être enregistrées avec une commande particulière (saveold) sous Stata 14 à 17. Les accents ne sont pas lu après cette conversion, et ce qui nécessite d’exécuter un programme pour les convertir (au secours!!!!).\n A l’Ined, depuis le déploiement de la version 14 et le passage à la version 15 Linux, il n’y a plus de problème. Attention toutefois pour les collaborations avec l’extérieur."
  },
  {
    "objectID": "formation/chapitre2.html",
    "href": "formation/chapitre2.html",
    "title": "Environnement",
    "section": "",
    "text": "Commandes et fonction introduites\nEn italique, commandes externes"
  },
  {
    "objectID": "formation/chapitre2.html#soumettre-un-programme-ou-un-bloc-de-programme",
    "href": "formation/chapitre2.html#soumettre-un-programme-ou-un-bloc-de-programme",
    "title": "Environnement",
    "section": "5.1 Soumettre un programme ou un bloc de programme",
    "text": "5.1 Soumettre un programme ou un bloc de programme\n\nOn ne sélectionne aucune ligne: tout le programme est exécuté\nOn sélectionne une partie du programme: seul le bloc est exécuté\n\n\n\n\n\n\n\nexecute (do): les commandes et les résultats sont affichés dans l’output de l’interface principale\nexecute quietly (run): les commandes et les résultats ne sont pas affichés dans l’output de l’interface principale\n\n\n\n\n\n\n\ndo et run dans un programme\n\n\n\nOn peut exécuter un ou plusieurs programme enregistré dans un programme\n\ndo \"path/nom_prog.do\"  // avec affichage de l'output\nrun \"path/nom_prog.do\" // sans affichage de l'output"
  },
  {
    "objectID": "formation/chapitre2.html#delimiter",
    "href": "formation/chapitre2.html#delimiter",
    "title": "Environnement",
    "section": "5.2 delimiter",
    "text": "5.2 delimiter\nPar défaut une ligne = une instruction (#delimit cr).\nStata ne comprend pas la deuxième ligne de:\n\nkeep  X1 X2 \n      X3 X4\n\nOn peut contourner cela dans un programme pour écrire des instructions longue sur plusieurs lignes avec l’instruction #delimit ;\n\n#delimit ;\nkeep  X1 X2  \n      X3 X4;\n      \ntabulate X1;\n\nLe délimiteur s’appliquera tant qu’on ne repasse pas à #delimit cr\n\n#delimit ;\nkeep  X1 X2  \n      X3 X4;\n      \n#delimit cr      \ntabulate X1\n\nLe délimiteur ; est sourtout utilisé pour les graphiques qui peuvent âtre assez gourmants en options (je le conseille).\nLa solution la plus utilisée est /// à la fin d’une ligne, à l’exception de la dernière de la commande\n\nkeep  X1 X2 /// \n      X3    /// \n      X4\n\ntabulate X1"
  },
  {
    "objectID": "formation/chapitre2.html#les-commentaires",
    "href": "formation/chapitre2.html#les-commentaires",
    "title": "Environnement",
    "section": "5.3 Les commentaires",
    "text": "5.3 Les commentaires\nSi le commentaire est sur une seule ligne\n\n* Commentaire\n\nSi le commentaire est sur une ligne et suit une instruction\n\ninstruction  // Commentaire \n\nSi le commentaire est sur plusieurs lignes\n\n/* commentaire 1\n   commentaire 2 */\n\n\n\n\n\n\n\nPas d’autosave T_T\n\n\n\nIl n’y a pas d’autosave avec Stata contrairement à d’autres applications comme R. C’est très regrettable, car un plantage n’arrive pas toujours aux autres, et oublier de sauvegarder un programme n’est pas un évènement d’une extrême rareté.\nOn peut sauver les meubles en générant un log de session en tête de programme ou mieux en générant un log à chaque ouverture de session dans un fichier profile [marche à suivre].\n\nPour générer un log de session qui enregistrera en continu l’output de l’interface, et donc les lignes de commandes exécutée (sauf si exécution en mode run):\n\nfile =&gt; log =&gt; begin, puis choisir un emplacement pour l’enregistrement du fichier log.\nlog using \"path/nom_log.smcl\"\n\ncommande externe log2do2: à partir d’un fichier log, permet de conserver seulement les lignes de programmes en supprimant les éléments de l’output. Attention les lignes comportant des erreurs seront également conservée.\nssc install log2do2\n\n\n\n\n5.3.1 Interactions entre l’interface principale, les boîtes de dialogue et l’éditeur de programme\nDEMONSTRATION PENDANT LA FORMATION"
  },
  {
    "objectID": "profile.html#adoplus",
    "href": "profile.html#adoplus",
    "title": "Principe",
    "section": "2.1 adoplus",
    "text": "2.1 adoplus\n\nsysdir set PLUS \"D:/D/ado/plus\"\nsysdir set PERSONAL \"D:/D/ado/personal\""
  },
  {
    "objectID": "profile.html#répertoire-temporaire",
    "href": "profile.html#répertoire-temporaire",
    "title": "Principe",
    "section": "2.2 Répertoire temporaire",
    "text": "2.2 Répertoire temporaire\nWarning: multi utilisation d’un programme\n\ncd \"D:\\D\\stata_temp\\\"\n\n\nnoisily display as txt    \"------------------------------------\"\nnoisily display as result \"  Contenu du repertoire stata_temp  \"\nnoisily display as txt    \"------------------------------------\"\nnoisily dir \"D:/D/stata_temp/\"\n\nWarning pour ce qui suit: multi utilisateurs d’un programme\n\nglobal tmp \"D:/D/stata_temp/\""
  },
  {
    "objectID": "profile.html#log-automatique",
    "href": "profile.html#log-automatique",
    "title": "Principe",
    "section": "2.3 Log automatique",
    "text": "2.3 Log automatique\nLa plus utile de toutes les configurations décrites ici.\nAu préalable, je conseille de créer un répertoire d’enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de stat_temp appelé tout simplement log.\n[image]\n\ncapture log close statalog\nlocal cdt = \"`c(current_date)'\"\nlocal cdt: subinstr local cdt \" \" \"-\", all\nlocal cti = \"`c(current_time)'\"\nlocal cti: subinstr local cti \":\" \".\", all\nlocal statalogname \"statalog_`cdt'_`cti'.log\"\n\nlog using \"$user/log/`statalogname'\" , text name(statalog)"
  },
  {
    "objectID": "profile.html#commandes-de-type-set",
    "href": "profile.html#commandes-de-type-set",
    "title": "Principe",
    "section": "2.4 Commandes de type set",
    "text": "2.4 Commandes de type set\nRemarque: les commandes dédiées à Python\n\n\nIl n’est pas nécessaire d’ajouter l’option permanently comme le fichier profile est chargé à chaque ouverture de session.\nEnsemble des commandes de type set: help set\n\n\nExemple: nombre de décimales reportées dans l’output d’une régression avec set cformats (coef, se et bornes ci), set sformats (statistique du test) et set pformats (p-value) .\nSi on souhaite fixer le nombre de décimale pour l’ensemble des statistiques à 2\n\nset cformats %9.2f   // max longueur =9\nset sformats %9.2f   // max longueur =8\nset pformats %9.2f   // max longueur =5"
  },
  {
    "objectID": "profile.html#graphiques",
    "href": "profile.html#graphiques",
    "title": "Principe",
    "section": "2.5 Graphiques",
    "text": "2.5 Graphiques"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html",
    "href": "R/statamarkdown/statamarkdown_pdf.html",
    "title": "Statamarkdown [RStudio]",
    "section": "",
    "text": "Warning: le package 'Statamarkdown' a été compilé avec la version R 4.2.3\nRemarque: à l’exception de l’insertion d’un tableau au format Latex, le document est quasiment mot pour mot identique à celui en format html."
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#ressources",
    "href": "R/statamarkdown/statamarkdown_pdf.html#ressources",
    "title": "Statamarkdown [RStudio]",
    "section": "2.1 Ressources",
    "text": "2.1 Ressources\n\nDoug Hemken\nSite tutoriel\nDépôt github"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#installation",
    "href": "R/statamarkdown/statamarkdown_pdf.html#installation",
    "title": "Statamarkdown [RStudio]",
    "section": "2.2 Installation",
    "text": "2.2 Installation\nInstallation du package\n\nlibrary(devtools)\ninstall_github(\"hemken/Statamarkdown\")\n\nChargement de l’exécutable Stata\nLe code R qui suis est à utiliser systématiquement dans chaque document.\n```{r, echo=FALSE, message=FALSE}\nlibrary(Statamarkdown)\nstataexe &lt;- \"C:/Program Files/Stata17/StataSE-64.exe\"\nknitr::opts_chunk$set(engine.path=list(stata=stataexe))\n```"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#exemple",
    "href": "R/statamarkdown/statamarkdown_pdf.html#exemple",
    "title": "Statamarkdown [RStudio]",
    "section": "2.3 Exemple",
    "text": "2.3 Exemple\n\n2.3.1 Suite de commandes dans un bloc\n\n\n\n```{Stata}\n\nsysuse auto, clear\ndescribe\nsum price, d\n\n\n(1978 automobile data)\n\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n\n\n\n2.3.2 Suite de commandes dans plusieurs blocs\nSi on exécute la suite du programme dans un autre bloc:\n\n\n\n```{Stata}\n\nregress price mpg turn if foreign==1\n\n\n      Source |       SS           df       MS      Number of obs   =        22\n-------------+----------------------------------   F(2, 19)        =      8.51\n       Model |  68197168.3         2  34098584.2   Prob &gt; F        =    0.0023\n    Residual |  76166044.4        19  4008739.18   R-squared       =    0.4724\n-------------+----------------------------------   Adj R-squared   =    0.4169\n       Total |   144363213        21   6874438.7   Root MSE        =    2002.2\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -164.397     84.536    -1.94   0.067     -341.332      12.538\n        turn |    607.204    372.318     1.63   0.119     -172.067    1386.475\n       _cons |  -1.10e+04  14587.768    -0.76   0.458    -4.16e+04   19489.258\n------------------------------------------------------------------------------\n\n\nCela ne marche pas.\nOn doit ajouter collectcode=TRUE en entrée du premier bloc: {Stata, collectcode=TRUE }\n```{stata,  collectcode=TRUE }\nsysuse auto, clear\n```\n\n\n\n```{Stata, collectcode=TRUE }\n\nsysuse auto, clear\n\n\n(1978 automobile data)\n\n\nPuis\n\n\n\n```{Stata}\n\nregress price mpg turn if foreign==1\n\n\n      Source |       SS           df       MS      Number of obs   =        22\n-------------+----------------------------------   F(2, 19)        =      8.51\n       Model |  68197168.3         2  34098584.2   Prob &gt; F        =    0.0023\n    Residual |  76166044.4        19  4008739.18   R-squared       =    0.4724\n-------------+----------------------------------   Adj R-squared   =    0.4169\n       Total |   144363213        21   6874438.7   Root MSE        =    2002.2\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -164.397     84.536    -1.94   0.067     -341.332      12.538\n        turn |    607.204    372.318     1.63   0.119     -172.067    1386.475\n       _cons |  -1.10e+04  14587.768    -0.76   0.458    -4.16e+04   19489.258\n------------------------------------------------------------------------------"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#commandes-externes",
    "href": "R/statamarkdown/statamarkdown_pdf.html#commandes-externes",
    "title": "Statamarkdown [RStudio]",
    "section": "2.4 Commandes externes",
    "text": "2.4 Commandes externes\nSi vous avez modifié l’emplacement du répertoire adoplus et que l’appel à ce répertoire est dans un fichier profile.do (tutoriel), Statamarkdown ne sera pas capable d’exécuter les commande externes.\nLa solution est simple: il suffit de coller votre fichier profile.do, normalement dans votre répertoire user, dans le répertoire du document que vous êtes en train de rédiger."
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#inserer-un-graphique",
    "href": "R/statamarkdown/statamarkdown_pdf.html#inserer-un-graphique",
    "title": "Statamarkdown [RStudio]",
    "section": "2.5 Inserer un graphique",
    "text": "2.5 Inserer un graphique\nLe graphique exporter avec graph export. Il est conseillé de l’enregistrer dans le même répertoire que le document généré ou dans un sous répertoire. Pour l’insérer, il suffit d’utiliser l’intégration standard avec markdown: ![nom graph](nom_graph.png){option} s’il est dans le même répertoire ou ![nom graph](img/nom_graph.png){option} s’il se trouve dans un sous répertoire, par exemple img\n\n\n\n```{Stata, message=FALSE}\n\nlocal mopts mc(%80) mlc(black) mlw(*.2) jitter(4)\n\ntw scatter price mpg if !foreign, `mopts' /// \n|| scatter price mpg if  foreign, `mopts' /// \n|| , legend(order(1 \"Domestic\" 2 \"foreign\") region(color(%0)) pos(11)) /// \n     ylabel(, angle(0))  ///\n     title(\"Graphique avec Statamarkown\" \"dans un document Quarto\", pos(11))\n\nqui graph export ///\n    \"D:\\D\\Marc\\SMS\\STATA INED\\Programmation\\R\\statamarkdown\\g1.png\", replace \n\n\n\n\n\n\n\n\nDirectement dans le document\n\n![titre graph](g1.png){width=80%}{fig-align=\"left\"}"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_pdf.html#résultat-de-régression-avec-collect",
    "href": "R/statamarkdown/statamarkdown_pdf.html#résultat-de-régression-avec-collect",
    "title": "Statamarkdown [RStudio]",
    "section": "2.6 Résultat de régression avec collect",
    "text": "2.6 Résultat de régression avec collect\n\nSe reporter à la courte présention de collect (lien) introduite avec la version 17 de Stata. On prendra le premier exemple.\nPour ce document html on utilisera le package R htmltools pour insérer un tableau générer avec collect et exporter avec collect export en html. Pour la version pdf, le tableau sera de type Latex. On doit absolument ajouter l’option tableonly avec collect export.\n\n:::callout-important\nOn doit absolument ajouter l’option tableonly avec collect export.\n\n2.6.1 Programme Stata\n\n\n\n```{Stata, message=FALSE, warning=FALSE}\n\n\nqui use https://www.stata-press.com/data/r17/nhanes2l, clear\n\nqui collect clear\nqui collect use multimod, replace\n\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region i.sex\n\nqui collect label values cmdset 1 \"Modèle 1\" 2 \"Modèle 2\" \n\nqui collect export \"D:/D/Marc/SMS/STATA INED/Programmation/R/statamarkdown/ex1\", as(tex)  tableonly     replace\n\n\n\n\n\n\n\n2.6.2 Insertion du tableau avec \\input\nDirectement dans le corps de texte:\n\n\\input{ex1}"
  },
  {
    "objectID": "speedup/gtools/intro.html",
    "href": "speedup/gtools/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Version 1 avec gtools [Aout 2022]\n\nStata 17: grosse amélioration du temps d’exécution de certaines commandes, en particulier sort et collapse.\nDepuis de nombreuses années des packages ou commandes standalone amélioraientt le temps d’exécution, en particulier les packages ftools de Sergio Correa ou les commandes fastxtile/fastwpctile d’egenmisc.\nLe package gtools de Mauricio Caceres Bravo donne des résultats vraiment très intéressants lorsqu’on atteint un seuil d’un million d’observations pour les commandes suivantes: greshape, gquantiles, gegen, glevelof avec une variable caractère, et dans une moindre mesure gcollapse.\nAu delà des durées d’exécution, ces packages et commandes peuvent avoir quelques options propres, par exemple, l’option by() de gquantiles ou la possibilité d’enregistrer les valeurs en ordre décroissant avec glevelsof.\n\nBenchmarks\n\nVersion Stata 17 SE. Les benchmarks réalisés par Mauricio Caceres sont en version MP.\nConfiguration PC: i5-10210U CPU et 16GO de RAM.\nVolumétries: 10k, 100k, 1M, 10M.\nComparaisons avec R si fonctions équivalentes.\nProgramme Stata: programme\nTo do: faire les tests sur la version serveur-linux (toujours Stata 17 SE)\n\nSources:\n\nStata 17 faster: https://www.stata.com/new-in-stata/faster-stata-speed-improvements/\nftools: https://github.com/sergiocorreia/ftools\ngtools:\n\nhttps://gtools.readthedocs.io/en/latest/index.html\nhttps://github.com/mcaceresb/stata-gtools"
  },
  {
    "objectID": "formation/chapitre3.html",
    "href": "formation/chapitre3.html",
    "title": "Le langage Stata",
    "section": "",
    "text": "SECTION\nCOMMANDES ET EXPRESSIONS\n\n\n\n\nOpérateurs\n= == &lt; &lt;= &gt; &gt;= != & | + - * / ^\n\n\nValeurs manquantes\n. mdesc mvpatterns misschk\n\n\nSuppression de l’output, et affichage d’une expression\nquietly display\n\n\nSélection groupées\ndrop keep * -\n\n\nMacros et répétition\nlocal global foreach forvalue return list i regress"
  },
  {
    "objectID": "formation/chapitre3.html#sensibilité-à-la-casse",
    "href": "formation/chapitre3.html#sensibilité-à-la-casse",
    "title": "Le langage Stata",
    "section": "5.1 Sensibilité à la casse",
    "text": "5.1 Sensibilité à la casse\nComme R ou Python, Stata est intégralement sensible à la casse pour les instructions, seulement en minuscules. Par exemple TABULATE X renverra un message d’erreur."
  },
  {
    "objectID": "formation/chapitre3.html#troncature-des-instructions-et-des-options",
    "href": "formation/chapitre3.html#troncature-des-instructions-et-des-options",
    "title": "Le langage Stata",
    "section": "5.2 Troncature des instructions et des options",
    "text": "5.2 Troncature des instructions et des options\nDans le fichier d’aire d’une commande usine ou externe, le niveau de troncature est indiqué par un soulignement dans l’instruction: par exemple tabulate est souligné au niveau de ta : tabulate = tabulat = tabula = tabul = tabu = tab = ta. On utilise généralement tabulate ou tab.\nA manier avec une certaine précaution car le programme peut devenir rapidement incompréhensible, surtout s’il est partagé entre personnes dont la pratique diffère à ce niveau:\n\ntabulate var1 var2, nofreq row miss  \n\n* est équivalent à: \n\nta var1 var2, nof r m"
  },
  {
    "objectID": "formation/chapitre3.html#introduction-au-macros",
    "href": "formation/chapitre3.html#introduction-au-macros",
    "title": "Le langage Stata",
    "section": "8.1 Introduction au macros",
    "text": "8.1 Introduction au macros\nJuste une introduction…Vu la simplicité du langage Stata, il est conseiller de se mettre rapidement à la manipulation des expressions dites macro.\n\nUne macro, dans sa version la plus simple, est une expression qui est utilisée une ou plusieurs fois dans un programme. Elle sont de type temporaire (local) ou enregistré en dur (global).\nLes commandes, en particulier sur les opérations statistiques, enregistre un certains nombre d’objet de type macro qui peuvent être utilisés ultérieurement. On peut récupérer leur liste à la fin du fichier d’aide, et les visualiser les valeurs enregistrées après avoir exécuté une commande avec return list, ereturn list…\n\nUn autre type d’objet, appelé scalar ressemble à une macro mais n’en est pas. Il s’agit de pseudo variables. Ils ne seront pas traités.\nLe contenu d’une macro peut être affiché avec display ou macro list (mac list)\n\nprivilégier display pour afficher le contenu d’une macro de type valeur\nprivilégier mac list pour afficher le contenu d’une macro de type chaîne de caractère lorsque des doubles quotes (“) doivent rester apparentes. La gestion des” dans les macros peut s’avérer particulièrement retord.\n\nmacro local: mac list _macroname\n\nmacro global: mac list macroname\n\n\n\nMacro temporaire\nL’instruction local permet de définir des macros variables temporaire (disparaissent après l’exécution du programme):\n\nlocal nom_macro expression\n* ou\nlocal nom_macro = expression numérique\n\n* ou\n\nlocal nom_macro :  fonction macro // hors contenu de la formation\n\n\nlocal a = 2\n\ndi `a'\n\ndi 5^(`a')\n\n2\n\n25\n\n\n\nlocal var   mpg foreign\n\ndi \"`var`\"\nmac list _var\n\nsum `var'\nregress price `var`\n\n`var`\n\n_var:           mpg foreign\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n     foreign |         74    .2972973    .4601885          0          1\n\n` invalid name\nr(198);\n\nend of do-file\nr(198);\n\n\nOn en voit tout de suite l’utilité: si je veux changer la liste de variables pour les instructions sum (troncature de summarize) et pour regress, je le fais une fois (dans la définition de la macro) au lieu de deux.\nAvec Stata peut définir également des macros dites global qui sont sauvegardées et s’appliqueront à tous les programmes (on peut les supprimer). Leur utilisation est moins courante: global nom_macro expression, le nom de la macro dans l’expression s’écrira $nom_macro.\nIl est conseillé de les supprimer en fin de programme avec macro drop + noms des macros.\n\n\nglobal var mpg weight length turn\n\ndi \"$var\"\nmac list var\n\nsum $var\nreg price $var\n\nmacro drop var\n\nmpg weight length turn\n\nvar:            mpg weight length turn\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n      weight |         74    3019.459    777.1936       1760       4840\n      length |         74    187.9324    22.26634        142        233\n        turn |         74    39.64865    4.399354         31         51\n\n      Source |       SS           df       MS      Number of obs   =        74\n-------------+----------------------------------   F(4, 69)        =     12.13\n       Model |   262166817         4  65541704.3   Prob &gt; F        =    0.0000\n    Residual |   372898579        69  5404327.23   R-squared       =    0.4128\n-------------+----------------------------------   Adj R-squared   =    0.3788\n       Total |   635065396        73  8699525.97   Root MSE        =    2324.7\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.651     80.879    -1.17   0.246     -256.000      66.697\n      weight |      5.030      1.154     4.36   0.000        2.728       7.332\n      length |    -73.147     40.212    -1.82   0.073     -153.368       7.074\n        turn |   -323.861    126.882    -2.55   0.013     -576.983     -70.738\n       _cons |  19581.418   6005.223     3.26   0.002     7601.327   31561.509\n------------------------------------------------------------------------------\n\n\nLa liste des macro enregistrées en dur est donnée par l’instruction: macro dir\n\n\nmac dir\n\nGRSTYLE_SN0:    s2color\nGRSTYLE_SN:     _GRSTYLE_\nGRSTYLE_FN:     D:\\D\\ado\\personal/scheme-_GRSTYLE_.scheme\nRterm_options:  --vanilla\nRterm_path:     C:\\Program Files\\R\\R-4.1.2\\bin\\R.exe\ntmp:            D:\\D\\stata_temp\\\nuser:           C:\\Users\\thevenin_m\\\nF1:             help advice;\nF2:             describe;\nF7:             save\nF8:             use\nS_ADO:          BASE;SITE;.;PERSONAL;PLUS;OLDPLACE\nS_StataSE:      SE\nS_OS:           Windows\nS_OSDTL:        64-bit\nS_MACH:         PC (64-bit x86-64)\nS_level:        95\nS_MODE:         batch\nS_FN:           C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\nS_FNDATE:       13 Apr 2020 17:45"
  },
  {
    "objectID": "formation/chapitre3.html#objets-sauvegardés-lors-der-lexécution-dune-commande",
    "href": "formation/chapitre3.html#objets-sauvegardés-lors-der-lexécution-dune-commande",
    "title": "Le langage Stata",
    "section": "8.2 Objets sauvegardés lors der l’exécution d’une commande",
    "text": "8.2 Objets sauvegardés lors der l’exécution d’une commande\n\nCes objets de type macro ne sont conservés en mémoire qu’entre 2 commandes exécutés\nOn peut donc les manipuler qu’à ce moment là, en particulier les enregistrer sous forme de macro standard pour les utiliser ultérieurement.\n\n\nqui sum price\n\nreturn list\n\nlocal mprice = r(mean)\n\ndi `mprice'\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.974268788\n                 r(sd) =  2949.495884768919\n                r(min) =  3291\n                r(max) =  15906\n                r(sum) =  456229\n\n\n6165.2568\n\n\n\n\n\n\n\n\nNote\n\n\n\nUne application typique est la normalisation d’une pondération brute (somme des poids = nombre d’observation dans l’échantillon).\nSi wb est la pondération brute (somme des poids = population cible), et wn les poids que l’on souhaite normaliser:\n\nqui sum wb\ngen wn = wb/`r(mean)'\n\nTout changement de la variable wb modifiera automatiquement la normalisation.\nPour la commande **gen (ou generate) se reporter au chapitre 5."
  },
  {
    "objectID": "formation/chapitre3.html#répétition-avec-des-boucles",
    "href": "formation/chapitre3.html#répétition-avec-des-boucles",
    "title": "Le langage Stata",
    "section": "8.3 Répétition avec des boucles",
    "text": "8.3 Répétition avec des boucles\n\n`forvalues: valeurs occurencées, compteur\n\nfor num 1/n: commande est de plus en plus abandonnée (aide Stata supprimée). On lui préfère maintenant l’instruction forvalues pour effectuer des boucles sur des occurences numériques.\nSi l’on souhaite par exemple changer le nom des variables x1 à x9 en var1, var2,…., var9:\n\nforvalues i=1/9 {\n  \nrename x`i' var`i' \n  \n}\n\n\nforeach: termes d’une expression enregistrée sous la forme d’une macro\n\nPar l’exemple, et juste une petite introduction. On veut faire une régression linéaire entre la variable price et la variable foreign en ajoutant une seule autre variable dans cette liste: mpg, headroom, trunk.\nAu lieu d’exécuter:\n\nregress price foreign mpg      \nregress price foreign headroom \nregress price foreign trunk    \n\nOn génère une macro variable temporaire qui liste ces 3 variables , et on exécute une boucle avec l’instruction foreach.\n\n\nlocal var mpg headroom trunk\n\nforeach x of local var {\n\nregress price foreign `x', noheader\n}\n\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |   1767.292    700.158     2.52   0.014      371.217    3163.368\n         mpg |   -294.196     55.692    -5.28   0.000     -405.242    -183.149\n       _cons |  11905.415   1158.634    10.28   0.000     9595.164   14215.667\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |    577.812    787.566     0.73   0.466     -992.549    2148.174\n    headroom |    491.575    428.405     1.15   0.255     -362.641    1345.791\n       _cons |   4522.071   1412.097     3.20   0.002     1706.430    7337.711\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |   1190.155    760.805     1.56   0.122     -326.847    2707.157\n       trunk |    262.772     81.852     3.21   0.002       99.564     425.980\n       _cons |   2196.541   1267.857     1.73   0.088     -331.494    4724.576\n------------------------------------------------------------------------------\n\n\n….et on peut aller plus loin… Juste pour information car cela se complique (et pas qu’un peu), avec une technique de macro empilée, on ajoute les les variables une à une au modèle.\n\nlocal j mpg weight length turn headroom trunk\n\nforeach j2 of local j {\nlocal x `x' `j2'\n  \ndi  \"covariables introduites = `x'\"  // pour afficher ce qui est lu dans la macro\n  \nregress price `x' , noheader\n}\n  \n\n  4.   \ncovariables introduites = mpg\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -238.894     53.077    -4.50   0.000     -344.701    -133.088\n       _cons |  11253.061   1170.813     9.61   0.000     8919.088   13587.033\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -49.512     86.156    -0.57   0.567     -221.302     122.278\n      weight |      1.747      0.641     2.72   0.008        0.468       3.025\n       _cons |   1946.069   3597.050     0.54   0.590    -5226.245    9118.382\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -86.789     83.943    -1.03   0.305     -254.209      80.630\n      weight |      4.365      1.167     3.74   0.000        2.036       6.693\n      length |   -104.868     39.722    -2.64   0.010     -184.090     -25.646\n       _cons |  14542.434   5890.632     2.47   0.016     2793.940   26290.929\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.651     80.879    -1.17   0.246     -256.000      66.697\n      weight |      5.030      1.154     4.36   0.000        2.728       7.332\n      length |    -73.147     40.212    -1.82   0.073     -153.368       7.074\n        turn |   -323.861    126.882    -2.55   0.013     -576.983     -70.738\n       _cons |  19581.418   6005.223     3.26   0.002     7601.327   31561.509\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn headroom\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -96.145     80.259    -1.20   0.235     -256.300      64.010\n      weight |      5.015      1.145     4.38   0.000        2.730       7.300\n      length |    -60.922     40.791    -1.49   0.140     -142.319      20.476\n        turn |   -332.592    126.045    -2.64   0.010     -584.111     -81.073\n    headroom |   -538.252    373.149    -1.44   0.154    -1282.859     206.356\n       _cons |  19317.280   5961.554     3.24   0.002     7421.185   31213.375\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn headroom trunk\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.063     80.371    -1.17   0.246     -254.484      66.357\n      weight |      5.079      1.148     4.42   0.000        2.788       7.371\n      length |    -73.487     43.011    -1.71   0.092     -159.338      12.364\n        turn |   -327.070    126.311    -2.59   0.012     -579.188     -74.952\n    headroom |   -731.292    427.369    -1.71   0.092    -1584.324     121.740\n       trunk |     98.275    105.721     0.93   0.356     -112.745     309.295\n       _cons |  20447.251   6090.068     3.36   0.001     8291.424   32603.078\n------------------------------------------------------------------------------"
  },
  {
    "objectID": "formation/chapitre4.html",
    "href": "formation/chapitre4.html",
    "title": "Les bases de données",
    "section": "",
    "text": "SECTION\nCOMMANDES ET EXPRESSIONS\n\n\n\n\nAffectation d’un répertoire de travail\ncd\n\n\nOuverture et sauvegarde d’une base\nuse webuse [set] sysuse save saveold import export usesas savasas set obs insobs\n\n\nDécrire le contenu d’une base\ndescribe list codebook labelbook label list\n\n\nTri, doublon, position des variables\nsort gsort duplicates order\n\n\nDecription statistique des variables\nsummarize mean tabstat violinplot heatplot gjoint tabulate fre tabm catplot"
  },
  {
    "objectID": "formation/chapitre4.html#ouverture",
    "href": "formation/chapitre4.html#ouverture",
    "title": "Les bases de données",
    "section": "2.1 Ouverture",
    "text": "2.1 Ouverture\nCommande use\n Sans chargement d’un répertoire\n\n\n\nSyntaxe\n\nuse \"path/nom_base.dta\" [,clear]\n\n\nL’option clear permet d’effacer une base en cours d’utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser clear comme instruction avant d’ouvrir une base. on ne supprime pas la base du répertoire (commande erase), elle est juste écrasée dans la session.\nSyntaxe avec affectation d’un répertoire:\n\n\n\nSyntaxe\n\ncd \"path\"\nuse \"nom_base.dta\", clear \n\n\nou\n\n\n\nSyntaxe\n\ncd \"path\"\nclear\nuse \"nom_base.dta\" \n\n\nRemarque: pour les bases d’exemples préinstallées, on utilise la commande sysuse. Dans les fichiers d’aide, des exemples font également appels a des bases localisées sur des serveurs qui s’ouvrent avec la commande webuse.\n\n\n\nSyntaxe\n\nsysuse auto, clear\n\n\n\n\n\n\n\n\nNote\n\n\n\nOuverture d’une base stockée sur un git [github, gitlab …]\nDans un premier temps, comme pour cd il faut charger le répertoire où se trouve localisé la base, avec la commande webuse set. Par exemple sur mon dépôt git, une base d’exemple (logement.dta) pour une commande se trouve à cette adresse: https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint\nPour charger ce répertoire à distance:\n\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\n\nOn remarque que le chemin n’est pas identique au simple lien (spécificité des dépôt de type git).\nIl suffit ensuite de charger la base avec webuse\n\nwebuse logement.dta, clear\n\nOn revient au dépôt officiel de stata avec webuse set\nEn résumé avec un seul bloc d’instructions:\n\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\n\nwebuse \"logement.dta\", clear\n\nwebuse set\n\n&gt; ster/ressources/gjoint\"\n(prefix now \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/mast\n&gt; er/ressources/gjoint\")\n\n\n(prefix now \"https://www.stata-press.com/data/r17\")"
  },
  {
    "objectID": "formation/chapitre4.html#sauvegarde",
    "href": "formation/chapitre4.html#sauvegarde",
    "title": "Les bases de données",
    "section": "2.2 Sauvegarde",
    "text": "2.2 Sauvegarde\nCommandes save ou saveold\n\n\n\nSyntaxe\n\nsave \"path/nom_base.dta\" [, replace]     \n\n\nL’option replace permet d’écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l’utiliser dès la première sauvegarde (un message d’avertissement s’affiche).\n\n\n\nSyntaxe\n\nsysuse auto, clear  \n\nsave auto, replace\n\n\n(1978 automobile data)\n\nfile auto.dta saved\n\n\nsaveold permettra d’ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec save il ne sera plus possible d’ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l’encodage Utf8 avec la version 14).\n\n\n\nSyntaxe\n\n saveold \"path/nom_base.dta\", [replace] [version(#)] // # = numéro de la version de Stata: \n\n\nRemarque:\n\nEcrire l’extension .dta n’est pas obligatoire\nLes doubles quotes ne sont obligatoires que s’il y a un espace dans le chemin d’accès et/ou dans le nom de la base\n\n\n\n\nSyntaxe\n\nuse \"ma base\", clear \nuse ma_base,   clear"
  },
  {
    "objectID": "formation/chapitre4.html#autres-formats",
    "href": "formation/chapitre4.html#autres-formats",
    "title": "Les bases de données",
    "section": "2.3 Autres formats",
    "text": "2.3 Autres formats"
  },
  {
    "objectID": "formation/chapitre4.html#importationexportation",
    "href": "formation/chapitre4.html#importationexportation",
    "title": "Les bases de données",
    "section": "2.4 Importation/Exportation",
    "text": "2.4 Importation/Exportation\nExcel et fichiers textes (.txt, .csv)\n\n\nLe plus simple est passer par le menu: files + [Import ou Export] qui dispose d’une fenêtre de prévisualisation.\n\nPour excel les commandes sont import excel et export excel\nPour des fichiers textes type csv (R), les commandes sont import delimited et export delimited\n\n\n**Exemples\n\n* exportation csv\nexport delimited using \"D:\\D\\stata_temp\\export_csv.csv\", replace\n\n* exportation xls\nexport excel using \"D:\\D\\stata_temp\\export_excel.xls\", firstrow(variables) replace\n\n* importation cxv\nimport delimited \"D:\\D\\stata_temp\\export_csv.csv\",  clear\n\n\n* importation xls\nimport excel \"D:\\D\\stata_temp\\export_excel.xls\", sheet(\"Sheet1\") firstrow clear\n\nSAS\n\n\nDepuis la version 16 de Stata il est possible d’importer directement des formats sas7bdat. Pas d’exportation possible.\nPour les versions antérieure, la solution installée via sasxport n’est pas satisfaisante. Il est alors conseillé d’utiliser le package externe savasas\n\nSas =&gt; Stata [importation]: commande usesas\n\nStata =&gt; Sas [exportation] : commande savasas\nSi le chemin d’accès à l’exécutable de SAS Windows n’est pas reconnu, il faut récupérer et éditer le fichier sasexe.do (à partir de la ligne 169), dont l’accès est donné dans le fichier d’aide.\n\nPour l’exportation, on peut générer un catalogue de format,en dur, avec l’option format.\n\n\nSPSS\n\n\nDepuis la dernière version de Stata (16), il est possible d’importer directement des bases de ce format.\nPas de possibilité d’exportation directe."
  },
  {
    "objectID": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "href": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "title": "Les bases de données",
    "section": "2.5 Création d’une base de donnée, ajout d’observations",
    "text": "2.5 Création d’une base de donnée, ajout d’observations\nOn peut créer une base de donnée, “vide”, avec la commande set obs nbre_observations\n\nclear \nset obs 100\n\nA une base existante, on peut ajouter des observations (en valeurs manquante) avec la commande insobs nbre_observation. Par défaut ces observations s’ajouteront après la dernière ligne (option before/after(position) pour renseigner la position de la première observation ajoutée.\n\ninsobs 10  // ajout de 10 observations à la base"
  },
  {
    "objectID": "formation/chapitre4.html#commande-describe",
    "href": "formation/chapitre4.html#commande-describe",
    "title": "Les bases de données",
    "section": "3.1 Commande describe",
    "text": "3.1 Commande describe\nPermet, sous forme de tableau, d’avoir des renseignement sur une base de donnée: taille en mémoire, nombre d’observations, descriptif des variables (nom, format, labels). La commande est régulièrement tronquée jusqu’à des\nBase courante (ouverte)\n\n\n\nSyntaxe\n\ndescribe [varlist , short]\n\n\n\nsysuse auto.dta, clear\n\ndes \n\n(1978 automobile data)\n\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nBase stockée (non ouverte)\nOn peut également décrire le contenu d’une base en format .dta en mémoire et non ouverte avec l’argument using \"path/nombase\"\n\ndescribe using  \"https://www.stata-press.com/data/r17/census2.dta\"\n\nContains data                                 1980 Census data by state\n Observations:            50                  2 Dec 2020 09:21\n    Variables:            15                  \n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nstate           str13   %-13s                 State\nstate2          str2    %-2s                  Two-letter state abbreviation\nregion          byte    %-8.0g     cenreg     Census region\npop             long    %12.0gc               Population\npoplt5          long    %12.0gc               Pop, &lt; 5 year\npop5_17         long    %12.0gc               Pop, 5 to 17 years\npop18p          long    %12.0gc               Pop, 18 and older\npop65p          long    %12.0gc               Pop, 65 and older\npopurban        long    %12.0gc               Urban population\nmedage          float   %9.2f                 Median age\ndeath           long    %12.0gc               Number of deaths\nmarriage        long    %12.0gc               Number of marriages\ndivorce         long    %12.0gc               Number of divorces\ndrate           int     %9.0g                 Deathrate\nage             byte    %9.0g                 Age\n-------------------------------------------------------------------------------\nSorted by:"
  },
  {
    "objectID": "formation/chapitre4.html#autres-commandes",
    "href": "formation/chapitre4.html#autres-commandes",
    "title": "Les bases de données",
    "section": "3.2 Autres commandes",
    "text": "3.2 Autres commandes\n\nAffichage de la base dans l’output\n\nCommande list\n\n\n\nSyntaxe\n\n list [varlist] [expression]\n\n\n\nlist price mpg turn foreign in 1/10\n\n     |  price   mpg   turn    foreign |\n     |--------------------------------|\n  1. |  4,099    22     40   Domestic |\n  2. |  4,749    17     40   Domestic |\n  3. |  3,799    22     35   Domestic |\n  4. |  4,816    20     40   Domestic |\n  5. |  7,827    15     43   Domestic |\n     |--------------------------------|\n  6. |  5,788    18     43   Domestic |\n  7. |  4,453    26     34   Domestic |\n  8. |  5,189    20     42   Domestic |\n  9. | 10,372    16     43   Domestic |\n 10. |  4,082    19     42   Domestic |\n     +--------------------------------+\n\n\nSauf exceptions, comme la petite base d’exemple utilisée ici, penser à bien filtrer les informations souhaitées en termes de variables et d’observations.\n\nInformation sur les labels affectés aux variables\n\nCommande labelbook et label list\nlabelbook: affiche les informations sur les labels affectés aux modalités des variables.\n\n\n\nSyntaxe\n\nlabelbook [nom_label]\n\n\n\nlabelbook origin\n\nValue label origin \n-------------------------------------------------------------------------------\n\n      Values                                    Labels\n       Range:  [0,1]                     String length:  [7,8]\n           N:  2                 Unique at full length:  yes\n        Gaps:  no                  Unique at length 12:  yes\n  Missing .*:  0                           Null string:  no\n                               Leading/trailing blanks:  no\n                                    Numeric -&gt; numeric:  no\n  Definition\n           0   Domestic\n           1   Foreign\n\n   Variables:  foreign\n\n\nlabel list [nom_label] donne seulement l’affectation des labels aux valeurs.\n\nlabel list origin\n\norigin:\n           0 Domestic\n           1 Foreign"
  },
  {
    "objectID": "formation/chapitre4.html#tri-dune-base",
    "href": "formation/chapitre4.html#tri-dune-base",
    "title": "Les bases de données",
    "section": "4.1 Tri d’une base",
    "text": "4.1 Tri d’une base\nCommande sort\n\nsort varlist\n\nLa commande sort n’effectue que des tris croissants. Pour faire un tri décroissant, on peut utiliser la commande gsort. Tris croissants et décroissant peuvent se succéder dans une logique de cluster.\n\nsort varlist =&gt; tri croissant\ngsort + var1 =&gt; croissant var1\ngsort - var1 =&gt; décroissant var1\ngsort + var1 - var2 =&gt; croissant var1 et décroissant var2 dans chaque strate de var1\n\nLe tri d’une peut/doit être réalisé lorsqu’on veut répéter une instruction avec le préfixe bysort: bysort varlist: instruction. Il est imposé lorsqu’on souhaite apparier des bases [voir chapitre 6]\n\n\n\n\nSyntaxe\n\n\n* tri croissant sur la variable price\nsort price\n\n* tri décroissant sur la variable prix pour chaque niveau de la variable foreign\ngsort + foreign - price"
  },
  {
    "objectID": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "href": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "title": "Les bases de données",
    "section": "4.2 Repérage et suppression des doublons",
    "text": "4.2 Repérage et suppression des doublons\nRepérage et suppression des doublons\nCommande duplicates list/tag/drop [varlist]\nPermet de lister, repérer (avec gen(varname) ) ou supprimer des observations répliquées. Si la liste de variables n’est pas renseignée, elles toutes sont utilisées.\nSyntaxe\nduplicates list [varlist]\n\nduplicates tag [varlist], gen(var)\n\nduplicates drop [varlist]"
  },
  {
    "objectID": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "href": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "title": "Les bases de données",
    "section": "4.3 Modifier la place des variables dans la base",
    "text": "4.3 Modifier la place des variables dans la base\nCommande order\n\n\n\nSyntaxe\n\norder varlist, [first/last] [after/before(varname)]\n\n\n\norder foreign, first\norder rep78, after(foreign)\n\ndes\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nrep78           int     %8.0g                 Repair record 1978\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nCette opération est particulièrement pour organiser sa base de données après la création de nouvelles variables."
  },
  {
    "objectID": "formation/chapitre4.html#variables-quantitatives",
    "href": "formation/chapitre4.html#variables-quantitatives",
    "title": "Les bases de données",
    "section": "5.1 Variables quantitatives",
    "text": "5.1 Variables quantitatives\n\n5.1.1 Tableaux d’indicateurs\n\n\n\n\n\n\nNote\n\n\n\nLes commandes qui sont rapidement décrites afficheront des indicateurs communs, typiquement la moyenne. Elles se distinguent par la forme de leur output facilitant plus ou moins les comparaisons, les possibilités offertes en termes de pondération, et sur la récupération des résultats (macro).\n\n\nCommande summarize\nComme son l’indique, la commande summarize, avec l’option detail (d) donne un résumé complet de la distribution d’une variable quantitative: moyenne, variance, quantiles, symétrie, applatissement ..nom l’indique l.)\n\n\n\nSyntaxe\n\nsummarize varlist [, detail]\n\n\nSi on indique pas le nom d’au moins une variable, toutes les variables de la base seront sélectionnées.\nLa commande peut-être tronquée jusqu’à sum [Warning: il existe également une fonction sum pour générer des cumuls lors d’une création de variable - voir chapitre 5].\n\nsum price\n\nsum \n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n       price |         74    6165.257    2949.496       3291      15906\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n        make |          0\n       price |         74    6165.257    2949.496       3291      15906\n         mpg |         74     21.2973    5.785503         12         41\n       rep78 |         69    3.405797    .9899323          1          5\n    headroom |         74    2.993243    .8459948        1.5          5\n-------------+---------------------------------------------------------\n       trunk |         74    13.75676    4.277404          5         23\n      weight |         74    3019.459    777.1936       1760       4840\n      length |         74    187.9324    22.26634        142        233\n        turn |         74    39.64865    4.399354         31         51\ndisplacement |         74    197.2973    91.83722         79        425\n-------------+---------------------------------------------------------\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n     foreign |         74    .2972973    .4601885          0          1\n\n\n\nsum price length, d\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n                        Length (in.)\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%          142            142\n 5%          154            147\n10%          157            149       Obs                  74\n25%          170            154       Sum of wgt.          74\n\n50%        192.5                      Mean           187.9324\n                        Largest       Std. dev.      22.26634\n75%          204            221\n90%          218            222       Variance       495.7899\n95%          221            230       Skewness      -.0409746\n99%          233            233       Kurtosis        2.04156\n\n\n\nbysort foreign: sum price, d\n\n-&gt; foreign = Domestic\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3667           3299\n10%         3955           3667       Obs                  52\n25%         4184           3799       Sum of wgt.          52\n\n50%       4782.5                      Mean           6072.423\n                        Largest       Std. dev.      3097.104\n75%         6234          13466\n90%        11385          13594       Variance        9592055\n95%        13594          14500       Skewness       1.777939\n99%        15906          15906       Kurtosis       5.090316\n\n-------------------------------------------------------------------------------\n-&gt; foreign = Foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3748           3748\n 5%         3798           3798\n10%         3895           3895       Obs                  22\n25%         4499           3995       Sum of wgt.          22\n\n50%         5759                      Mean           6384.682\n                        Largest       Std. dev.      2621.915\n75%         7140           9690\n90%         9735           9735       Variance        6874439\n95%        11995          11995       Skewness       1.215236\n99%        12990          12990       Kurtosis       3.555178\n\n\n\nAvantage: récupération des résultats sous forme de macro rapide.\nInconvénients: pas de sélection des indicateurs avec l’option detail, output pas adapté aux comparaisons.\n\n\n\n\nreturn list: macros associées aux indicateurs\n\n\n*Extrait de l'aide de summarize\n\n/* help summarize\n\n    summarize stores the following in r():\n\n    Scalars   \n      r(N)           number of observations\n      r(mean)        mean\n      r(skewness)    skewness (detail only)\n      r(min)         minimum\n      r(max)         maximum\n      r(sum_w)       sum of the weights\n      r(p1)          1st percentile (detail only)\n      r(p5)          5th percentile (detail only)\n      r(p10)         10th percentile (detail only)\n      r(p25)         25th percentile (detail only)\n      r(p50)         50th percentile (detail only)\n      r(p75)         75th percentile (detail only)\n      r(p90)         90th percentile (detail only)\n      r(p95)         95th percentile (detail only)\n      r(p99)         99th percentile (detail only)\n      r(Var)         variance\n      r(kurtosis)    kurtosis (detail only)\n      r(sum)         sum of variable\n      r(sd)          standard deviation\n*/\n\n\n\nqui sum price, d\n\nreturn list\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.97426879\n                 r(sd) =  2949.495884768919\n           r(skewness) =  1.653433511704859\n           r(kurtosis) =  4.819187528464004\n                r(sum) =  456229\n                r(min) =  3291\n                r(max) =  15906\n                 r(p1) =  3291\n                 r(p5) =  3748\n                r(p10) =  3895\n                r(p25) =  4195\n                r(p50) =  5006.5\n                r(p75) =  6342\n                r(p90) =  11385\n                r(p95) =  13466\n                r(p99) =  15906\n\n\nmean\nN’affiche que la moyenne et ses statistiques associées. L’option over permet de comparer les valeurs moyennes des modalités d’une variable catégorielle (over(varname)) ou un croisement des modalités de plusieurs variables (over(varlist))\n\nmean price  \nmean price, over(foreign)\nmean price, over(foreign rep78)\n\nMean estimation                             Number of obs = 74\n\n--------------------------------------------------------------\n             |       Mean   Std. err.     [95% conf. interval]\n-------------+------------------------------------------------\n       price |   6165.257    342.872      5481.914    6848.600\n--------------------------------------------------------------\n\n\nMean estimation                                Number of obs = 74\n\n-----------------------------------------------------------------\n                |       Mean   Std. err.     [95% conf. interval]\n----------------+------------------------------------------------\nc.price@foreign |\n      Domestic  |   6072.423    429.491      5216.449    6928.398\n       Foreign  |   6384.682    558.994      5270.608    7498.756\n-----------------------------------------------------------------\n\n\nMean estimation                                      Number of obs = 69\n\n-----------------------------------------------------------------------\n                      |       Mean   Std. err.     [95% conf. interval]\n----------------------+------------------------------------------------\nc.price@foreign#rep78 |\n          Domestic#1  |   4564.500    369.500      3827.174    5301.826\n          Domestic#2  |   5967.625   1265.494      3442.372    8492.878\n          Domestic#3  |   6607.074    704.611      5201.044    8013.104\n          Domestic#4  |   5881.556    530.673      4822.614    6940.497\n          Domestic#5  |   4204.500    220.500      3764.499    4644.501\n           Foreign#1  |      0.000  (no observations)\n           Foreign#2  |      0.000  (no observations)\n           Foreign#3  |   4828.667    742.249      3347.532    6309.801\n           Foreign#4  |   6261.444    632.031      5000.247    7522.642\n           Foreign#5  |   6292.667    921.876      4453.091    8132.242\n-----------------------------------------------------------------------\n\n\n\nAvantage: output synthétique si la moyenne de plusieurs groupes comparées\nInconvénients: récupération des résultats via une matrice (on oublie)\n\ntabstat\nPermet de sélectionner les indicateurs avec l’option stat() (par défaut la moyenne). L’option by() permet de comparer le ou les indicateurs pour chaque niveau d’une variable catégorielle. Dans ce cas tabstat affiche également les résultats sur l’ensemble des observations (sinon ajouter l’option nototal).\n\ntabstat price  \ntabstat price mpg, by(foreign)\n\n    Variable |      Mean\n-------------+----------\n       price |  6165.257\n------------------------\n\n\nSummary statistics: Mean\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n Foreign |  6384.682  24.77273\n---------+--------------------\n   Total |  6165.257   21.2973\n------------------------------\n\n\n\n\n\nliste des indicateurs\n\n\n*Extrait de l'aide de summarize\n\n/* help tabstat\n\n        mean            mean\n        count           count of nonmissing observations\n        n               same as count\n        sum             sum\n        max             maximum\n        min             minimum\n        range           range = max - min\n        sd              standard deviation\n        variance        variance\n        cv              coefficient of variation (sd/mean)\n        semean          standard error of mean (sd/sqrt(n))\n        skewness        skewness\n        kurtosis        kurtosis\n        p1              1st percentile\n        p5              5th percentile\n        p10             10th percentile\n        p25             25th percentile\n        median          median (same as p50)\n        p50             50th percentile (same as median)\n        p75             75th percentile\n        p90             90th percentile\n        p95             95th percentile\n        p99             99th percentile\n        iqr             interquartile range = p75 - p25\n        q               equivalent to specifying p25 p50 p75\n*/\n\n\nSi on souhaite ajouter la médiane\n\ntabstat price mpg, by(foreign) stat(mean median)\n\nSummary statistics: Mean, p50\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n         |    4782.5        19\n---------+--------------------\n Foreign |  6384.682  24.77273\n         |      5759      24.5\n---------+--------------------\n   Total |  6165.257   21.2973\n         |    5006.5        20\n------------------------------\n\n\n\n\n5.1.2 Graphiques\n[MAJ EN COURS: bcp de nouveautés]\nJuste une rapide présentation de quelques visualisations permettant d’explorer des distributions.\nUne seule distribution: graph box/hbox , histogram, violinplot (externe)\nPlusieurs distributions: violinplot (externe) Deux distribution croisée: hexplot (externe), gjoint (externe)\nBoxplot\n\ngraph hbox mpg, \ngraph hbox mpg, over(foreign)   \n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\nHistogramme\n\nhistogram mpg, percent \nhistogram mpg, percent by(foreign)\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\n\nDans le langage de Stata, ce type de graphique est appelé oneway.\nL’altération de son aspect avec les options n’est pas très flexible, surtout au niveau des couleurs.\nPour les histogrammes, il y a une version twoway qui permet d’empilé plusieurs histogrammes dans un même graphique, mais généralement la visualisation n’est pas optimale. Préférer en ce cas là une approche par les densités (voir violinplot - comparaison III).\nConseil de sémiologie graphique: garder l’axe quantitatif/continu sur les abcisses .\n\nViolinplot (Ben Jann)\nToujours beaucoup d’options dans les commandes de magik B.Jann. Se reporter à son tutoriel sur github pour l’installation (nécessite l’installation de dépendances) Lien\n\nviolinplot mpg, fill\n\nviolinplot mpg, nobox over(foreign) left overlay nomedian  dscale(.) \n\nviolinplot mpg, fill over(foreign)\n\nviolinplot mpg, fill split(foreign) horizontal\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nComparaison I\n\n\n\n\n\n\n\nComparaison II\n\n\n\n\n\nComparaison III\n\n\n\n\nDeux variables quantitatives\n\nUne nuage de point pêche rapidement lorsque le nombre d’observations augmente, par exemple audelà de 200.\nSolutions:\n\nCourbes de niveaux\nHeatplot/hexplot: l’idée est de visualiser un histogramme “vu du dessuss”, la hauteurs des barres étant données par un différentiel de couleur issues d’une palette séquentielle (du clair au foncé par exemple).\n\n\n\n\n\nInstallation heatplot\n\nssc install heatplot, replace  \n\n\n\nIl peut-être intéressant d’ajouté les distributions marginales des deux variables. J’ai programmé une petite commande (encore en version très alpha): gjoint. Tout le mérite revient à B.Jann pour la commande hexplot (j’ai juste combiné hexplot avec des histogrammes).\n\n\n\n\nInstallation gjoint\n\nnet install gjoint, from(\"https://raw.githubusercontent.com/mthevenin/stata_graphiques/master/ressources/gjoint/\") replace\n\n\n\nhexplot price mpg, colors(flare)\ngjoint price mpg, palette(flare)\n\n\n\n\n\n\nhexplot\n\n\n\n\n\nhexplot"
  },
  {
    "objectID": "formation/chapitre4.html#variables-catégorielles",
    "href": "formation/chapitre4.html#variables-catégorielles",
    "title": "Les bases de données",
    "section": "5.2 Variables catégorielles",
    "text": "5.2 Variables catégorielles\nLa principale commande est tabulate (tab). On peut l’utiliser avec des variables de type string.\nSyntaxe (tableau croisé)\ntab var1 var2 [, mis nofreq row col sort ......]\n\nPar défaut, l’ordre d’affichage suis la valeur de la modalité si la variable est de type numérique et l’ordre alphabétique pour une variable de type caractère. On peut utiliser l’option sort pour afficher par ordre croissant des effectifs observés [ou utiliser la commande externe tabsort qui offre plus de possibilités]\nAutres commandes (externe): fre [B.Jann], tabm [NJ.Cox], tabsort [NJ.Cox]\n\n\nssc install fre\nssc install tabsort\nssc install tabm\n\n\ntab rep78, mis\ntab rep78, mis sort \ntab rep78 foreign, nolab mis\n\nfre rep78 \n\ntabsort rep78\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          1 |          2        2.70        2.70\n          2 |          8       10.81       13.51\n          3 |         30       40.54       54.05\n          4 |         18       24.32       78.38\n          5 |         11       14.86       93.24\n          . |          5        6.76      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          3 |         30       40.54       40.54\n          4 |         18       24.32       64.86\n          5 |         11       14.86       79.73\n          2 |          8       10.81       90.54\n          . |          5        6.76       97.30\n          1 |          2        2.70      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n    Repair |\n    record |      Car origin\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        27          3 |        30 \n         4 |         9          9 |        18 \n         5 |         2          9 |        11 \n         . |         4          1 |         5 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nrep78 -- Repair record 1978\n-----------------------------------------------------------\n              |      Freq.    Percent      Valid       Cum.\n--------------+--------------------------------------------\nValid   1     |          2       2.70       2.90       2.90\n        2     |          8      10.81      11.59      14.49\n        3     |         30      40.54      43.48      57.97\n        4     |         18      24.32      26.09      84.06\n        5     |         11      14.86      15.94     100.00\n        Total |         69      93.24     100.00           \nMissing .     |          5       6.76                      \nTotal         |         74     100.00                      \n-----------------------------------------------------------\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          3 |         30       43.48       43.48\n          4 |         18       26.09       69.57\n          5 |         11       15.94       85.51\n          2 |          8       11.59       97.10\n          1 |          2        2.90      100.00\n------------+-----------------------------------\n      Total |         69      100.00\n\n\nGraphiques\nNiveau graphique, les possibilités restent toujours assez limitées pour les variables discrètes (et on abandonne l’idée des horribles camemberts).\nOn privilégiera ici la commande de NJ.Cox, catplot\n\nssc install catplot\n\n\ncatplot rep78, percent \ncatplot rep78, percent over(foreign)\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison"
  },
  {
    "objectID": "formation/chapitre5.html",
    "href": "formation/chapitre5.html",
    "title": "Les variables",
    "section": "",
    "text": "Programme du chapitre\nCommandes et expressions introduites\nPour accéder aux infomations sur les variables d’une base:\nVariables manager\nFenêtre properties à droite de l’interface principale (mode dévérouillé)\nCommande describe\nsysuse auto, clear\n\ndescribe\n\n(1978 automobile data)\n\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign"
  },
  {
    "objectID": "formation/chapitre5.html#types",
    "href": "formation/chapitre5.html#types",
    "title": "Les variables",
    "section": "1.1 Types",
    "text": "1.1 Types\nStata gère tous les types de variables: numérique, caractère, date. Un type de variable est un type de stockage.\n\nTypes numériques: float, long, double, int et byte.\nTypes caractère: str# et strL (très grandes chaînes de caractères). # est la longueur de la chaîne de caractère, elle ne peut pas excéder 2046 pour le type str.\n\nPlus d’informations: help data types\nModification du type de variable\n\nOptimisation du poids en mémoire avec compress\nCommande recast\n\nOptimisation du poids de la base\n\ncompress \n\n  variable mpg was int now byte\n  variable rep78 was int now byte\n  variable trunk was int now byte\n  variable turn was int now byte\n  variable make was str18 now str17\n  (370 bytes saved)\n\n\nPassage de la variable make en str3\nEn réduisant le type, on va tronquer les chaînes de caractères qui ne garderont que les 3 premières lettres, à manupiler avec prudence donc. Pour cette opération, Stata impose une confirmation avec l’option force.\nVariable d’origine\n\ndes make \nlist make in 1/10\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\n\n     +---------------+\n     | make          |\n     |---------------|\n  1. | AMC Concord   |\n  2. | AMC Pacer     |\n  3. | AMC Spirit    |\n  4. | Buick Century |\n  5. | Buick Electra |\n     |---------------|\n  6. | Buick LeSabre |\n  7. | Buick Opel    |\n  8. | Buick Regal   |\n  9. | Buick Riviera |\n 10. | Buick Skylark |\n     +---------------+\n\n\nModification du type\n\nrecast str3 make, force\ndes make\nlist make in 1/10\n\nmake:  74 values changed\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str3    %-9s                  Make and model\n\n     +------+\n     | make |\n     |------|\n  1. | AMC  |\n  2. | AMC  |\n  3. | AMC  |\n  4. | Bui  |\n  5. | Bui  |\n     |------|\n  6. | Bui  |\n  7. | Bui  |\n  8. | Bui  |\n  9. | Bui  |\n 10. | Bui  |\n     +------+"
  },
  {
    "objectID": "formation/chapitre5.html#format",
    "href": "formation/chapitre5.html#format",
    "title": "Les variables",
    "section": "1.2 Format",
    "text": "1.2 Format\nIl s’agit du format d’affichage des valeurs des variables. Ils peuvent être modifiés sans que le type soit changé (décimales, alignement….).\nVariables numérique:\n- format g: général (définition un peu obsure pour moi) - format f: fixe - plusieurs format d’affichage pour les variables de type dates: %td (date avec jour-mois-année), %tm (mois), %tq (trimestre), %tw (semaine). Les dates et leur manipulation sont un domaines très riche, et feront l’objet d’une courte présentation en fin de chapite.\nOn peut changer le format d’affichage avec la commande format. Si le format est de type général (g), il est préférable de passer à un format de type fixe (f) On peut un même format à une liste de variables.\n\n\n\nSyntaxe\n\nformat %format varlist\n\n\nExemple: changement du nombre de décimales\nDans la base auto, la variable gear_ratio est de format fixe à 2 décimales (%6.2f). Pour supprimer, à l’affichage, les deux décimales: afficher les valeurs sans décimales.\n\nlist gear_ratio in 1/10\n\n     | gear_r~o |\n     |----------|\n  1. |     3.58 |\n  2. |     2.53 |\n  3. |     3.08 |\n  4. |     2.93 |\n  5. |     2.41 |\n     |----------|\n  6. |     2.73 |\n  7. |     2.87 |\n  8. |     2.93 |\n  9. |     2.93 |\n 10. |     3.08 |\n     +----------+\n\n\n\nformat %6.0f gear_ratio\nlist gear_ratio in 1/10\n\n     | gear_r~o |\n     |----------|\n  1. |        4 |\n  2. |        3 |\n  3. |        3 |\n  4. |        3 |\n  5. |        2 |\n     |----------|\n  6. |        3 |\n  7. |        3 |\n  8. |        3 |\n  9. |        3 |\n 10. |        3 |\n     +----------+\n\n\nExemple: aligner le nombre décimal reporté avec summarize sur le format de la variable\nAvec l’option format appliquée à la commande summarize on peut automatiquement réduire le nombre de décimales reportées dans l’output\n\nsum gear_ratio\nsum gear_ratio, d\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         2.19           2.19\n 5%         2.28           2.24\n10%         2.43           2.26       Obs                  74\n25%         2.73           2.28       Sum of wgt.          74\n\n50%        2.955                      Mean           3.014865\n                        Largest       Std. dev.      .4562871\n75%         3.37           3.78\n90%         3.72           3.78       Variance       .2081979\n95%         3.78           3.81       Skewness       .2191658\n99%         3.89           3.89       Kurtosis       2.101812\n\n\nAvec l’option format\n\nsum gear_ratio, format\nsum gear_ratio, d format\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74        3.01        0.46       2.19       3.89\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         2.19           2.19\n 5%         2.28           2.24\n10%         2.43           2.26       Obs                  74\n25%         2.73           2.28       Sum of wgt.          74\n\n50%         2.96                      Mean               3.01\n                        Largest       Std. dev.          0.46\n75%         3.37           3.78\n90%         3.72           3.78       Variance           0.21\n95%         3.78           3.81       Skewness           0.22\n99%         3.89           3.89       Kurtosis           2.10"
  },
  {
    "objectID": "formation/chapitre5.html#modification-du-type",
    "href": "formation/chapitre5.html#modification-du-type",
    "title": "Les variables",
    "section": "1.3 Modification du type",
    "text": "1.3 Modification du type\nIl est possible de basculer d’un type caractère à un type numérique et inversement\nDe numérique à caractère\n Si la variable numérique n’a pas de label affecté sur les modalités, ou qu’on ne veut pas conserver l’information données par les labels, on peut utiliser la commande tostring. On peut créer une nouvelle variable avec l’option gen() ou remplacer la variable numérique d’origine avec l’option replace. Une des deux options doit être nécessairement renseignée.\n\n\n\nSyntaxe\n\n  tostring [varlist], gen(nom_varlist)\n  tostring [varlist], replace\n\n\nExemple avec la variable foreign qui prend les valeur 0 et 1 avec les labels “domestic” (0) et “foreign” (1)\n\ntostring foreign, gen(foreign_str)\ndes foreign foreign_str\n\ntab foreign foreign_str\n\nforeign_str generated as str1\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str1    %9s                   Car origin\n\n           |      Car origin\nCar origin |         0          1 |     Total\n-----------+----------------------+----------\n  Domestic |        52          0 |        52 \n   Foreign |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nSi la variable numérique a des labels affectés aux modalités modalités et qu’on souhaite conserver cet information, on utilise la commande decode\n\n\n\nSyntaxe\n\n  decode variable, gen(nom_var)\n\n\nExemple avec la variable foreign\n\ndecode foreign, gen(foreign_str)\n\ndes foreign foreign_str\n\ntab foreign_str\n  \n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str8    %9s                   Car origin\n\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\nDe caractère à numérique\nSi la variable caractère est a une forme numerique (une suite de nombre comme des années, des âges…), on utilise la commande destring. Lorsqu’il y a des des valeurs manquantes à la variable, on doit uiliser l’option force.\n\n\n\nStata\n\n destring [varlist] , gen(nom_varlist) \n destring [varlist] , replace [force]\n\n\nExemple avec la variable rep78 qui est transformé dans un premier temps en variables caractère avec tostring puis de nouveau transformé en format numérique avec destring\n\ntostring rep78, replace\ndes rep78\n\ndestring rep78, replace\ndes rep78\n\nrep78 was int now str1\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           str1    %9s                   Repair record 1978\n\nrep78: all characters numeric; replaced as byte\n(5 missing values generated)\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           byte    %10.0g                Repair record 1978\n\n\nSi la variable caractère n’est pas de forme numérique et que l’on souhaite récupérer les labels sur les modalités, on peut utiliser la commande encode ou la commande externe sencode (net install st0043_2, force). La seconde permet de remplacer directement la variable d’origine, option particulièrement pratique.. Egalement, cette commande permet plus de souplesse sur le codage de la variable (help sencode pour plus de détail).\nAvec encode ou sencode sans l’option gsort, le numéro de la modalité suivra l’ordre alphabétique des chaînes de caractère de la variable: si la variable caractère à pour valeur (“Homme”, “Femme”), “femme” sera automatiquement codée 1 et “homme” 2.\n\n\n\nSyntaxe\n\nencode variable, gen(nom_variable)\n\n\n\n\n\nSyntaxe\n\n```{} \nsencode variable, gen(nom_variable) replace gsort()\n\n\nExemple avec la variable foreign_str (variable caractère créée précédemment à partir de la variable foreign)\n\nencode foreign_str, gen(foreign2)\n\ntab foreign2\ntab foreign2, nolab\n\nvariable foreign_str not found\nr(111);\n\nend of do-file\nr(111);\n\n\n\n\n\n\n\n\nType de variable pour les modèles\n\n\n\nLes variables de type caractères ne sont pas acceptées, Stata renvoie alors un message d’erreur avec no observation. Si c’est le cas, les commandes destring et encode vont s’avérer particulièrement utiles."
  },
  {
    "objectID": "formation/chapitre5.html#generate---replace",
    "href": "formation/chapitre5.html#generate---replace",
    "title": "Les variables",
    "section": "2.1 generate - replace",
    "text": "2.1 generate - replace\nLa création d’une nouvelle variable se fait avec la commande generate généralement tronquée jusqu’à gen.\n\n\n\nSyntaxe\n\ngen nom_variable=valeur/fonction [expression: if in inlist inrange...]\n\n\nPour remplacer la valeur d’une valeur variable existante on utilise la commande replace. Le nom n’est malheureusement pas tronquable.\n\n\n\nSyntaxe\n\nreplace nom_variable=valeur/fonction [expression: if in inlist inrange...]\n\n\n\nOn peut utiliser le préfixe bysort\nPour utiliser une fonction mathématique (log, exp, .) =&gt; help math_functions\nPour afficher la liste complète des fonctions (variables caractères, statistiques, pseudo nombre aléatoire, dates.): help function\n\nRappel: attention entre l’opérateur d’affectation (=) et l’expression conditionnelle (==).\n\nCréation d’une indicatrice (0,1)\n On peut rapidement générer des indicatrices (0,1) à partir d’une expression conditionnelle:\n\n\n\nSyntaxe\n\ngen x= expression_conditionnelle\n\n\nExemple avec la variable rep78. On génère la variable rep2 qui prend la valeur 1 si rep78&gt;3, 0 sinon. Comme il y a des valeurs manquantes dans la variable d’origine, on corrige l’information pour l’indicatrice dont les valeurs manquantes ont été automatiquement affectées à la valeur 0.\n\ngen rep2 = rep78&gt;3\nreplace rep2 = . if rep78==.\ntab rep78 rep2\n\n(5 real changes made, 5 to missing)\n\n    Repair |\n    record |         rep2\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        30          0 |        30 \n         4 |         0         18 |        18 \n         5 |         0         11 |        11 \n-----------+----------------------+----------\n     Total |        40         29 |        69 \n\n\n Remarque: Avec la commande tabulate on peut créer une série d’indicatrices à partir d’une variable catégorielle avec l’option gen(nom_variable)\n\n\n\nSyntaxe\n\ntab x, gen(nom_variable)\n\n\nExemple avec la variable foreign. Avec tabulate on va générer deux indicatrices: origine1 si foreign=0, et origine2 si foreign=1. Un label à la variable est automatiquement créé indiquant la valeur de la variable d’origine.\n\ntab foreign, gen(origine)\n\ndes origine1 origine2\n\ntab origine1 foreign\ntab origine2 foreign\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\norigine1        byte    %8.0g                 foreign==Domestic\norigine2        byte    %8.0g                 foreign==Foreign\n\n\nforeign==D |      Car origin\n   omestic |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |         0         22 |        22 \n         1 |        52          0 |        52 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nforeign==F |      Car origin\n    oreign |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |        52          0 |        52 \n         1 |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74"
  },
  {
    "objectID": "formation/chapitre5.html#egen",
    "href": "formation/chapitre5.html#egen",
    "title": "Les variables",
    "section": "2.2 egen",
    "text": "2.2 egen\negen: extented generate\negenmore: package programmé par NJ.Cox qui ajoute des fonctions associée à egen [ssc install egenmore]\nRéservé à l’utilisation de fonctions. Pour obtenir la liste help egen.\n\nExemple: on va créer dans un premier la variable mprice qui reporte pour chaque observation la moyenne de la variable price. Dans un second temps, on va créer la variable mprice_or, mais avec le prix moyen des voitures selon leur origine (foreign). La fonction utilisée est la fonction mean().\n\negen mprice = mean(price)\n\nlist  make price mprice in 1/10\n\n     | make             price     mprice |\n     |-----------------------------------|\n  1. | AMC Concord      4,099   6165.257 |\n  2. | AMC Pacer        4,749   6165.257 |\n  3. | AMC Spirit       3,799   6165.257 |\n  4. | Buick Century    4,816   6165.257 |\n  5. | Buick Electra    7,827   6165.257 |\n     |-----------------------------------|\n  6. | Buick LeSabre    5,788   6165.257 |\n  7. | Buick Opel       4,453   6165.257 |\n  8. | Buick Regal      5,189   6165.257 |\n  9. | Buick Riviera   10,372   6165.257 |\n 10. | Buick Skylark    4,082   6165.257 |\n     +-----------------------------------+\n\n\n\nbysort foreign: egen mprice_or = mean(price)\n\nlist  make price mprice in 1/5\nlist  make price mprice in 66/70\n\n     | make            price   mprice~r |\n     |----------------------------------|\n  1. | AMC Concord     4,099   6072.423 |\n  2. | AMC Pacer       4,749   6072.423 |\n  3. | AMC Spirit      3,799   6072.423 |\n  4. | Buick Century   4,816   6072.423 |\n  5. | Buick Electra   7,827   6072.423 |\n     +----------------------------------+\n\n     +-----------------------------------+\n     | make             price   mprice~r |\n     |-----------------------------------|\n 66. | Subaru           3,798   6384.682 |\n 67. | Toyota Celica    5,899   6384.682 |\n 68. | Toyota Corolla   3,748   6384.682 |\n 69. | Toyota Corona    5,719   6384.682 |\n 70. | VW Dasher        7,140   6384.682 |\n     +-----------------------------------+\n\n\n\n\n\n\n\n\nLes fonctions sum() et total()**\n\n\n\nSans aucune explication, la fonction sum() qui permet d’obtenir une somme incrémentale n’est pas associée à egen mais à generate. En revanche la fonction total() est associée à egen. Il faut le retenir.\nExemple: on veut créer un identifiant numérique (variable id) pour chaque voiture (dans la base on a une seule voiture par nom de voiture).\n\ngen x = 1 \ngen id = sum(x)\n\nlist id make in 1/5\nlist id make in 66/70\n\n     | id   make          |\n     |--------------------|\n  1. |  1   AMC Concord   |\n  2. |  2   AMC Pacer     |\n  3. |  3   AMC Spirit    |\n  4. |  4   Buick Century |\n  5. |  5   Buick Electra |\n     +--------------------+\n\n     +---------------------+\n     | id   make           |\n     |---------------------|\n 66. | 66   Subaru         |\n 67. | 67   Toyota Celica  |\n 68. | 68   Toyota Corolla |\n 69. | 69   Toyota Corona  |\n 70. | 70   VW Dasher      |\n     +---------------------+\n\n\nSi on veut reporter le nombre total d’observations dans la base (variable N), avec la fonction total:\n\negen N = total(x)\n\nlist id N make in 1/5\nlist id N make in 66/70\n\nx not found\nr(111);\n\nend of do-file\nr(111);\n\n\n\n\nOn va le voir, ces deux variables qui ont été générées peuvent l’être directement avec les variables internes dites de comptage.\n\n\n\n\n\n\nPackage gegen (M.Caceres)\n\n\n\n\nPour les volumétries dépassant le million d’observation il est fortement conseillé d’utilisée les commandes associées au package de Mauricio Caceres, ici la commande gege,.\nhttps://gtools.readthedocs.io/en/latest/\nhttps://mthevenin.github.io/stata_programmation/speedup/gtools.html"
  },
  {
    "objectID": "formation/chapitre5.html#todo",
    "href": "formation/chapitre5.html#todo",
    "title": "Les variables",
    "section": "5.1 TODO",
    "text": "5.1 TODO\nFaire un rapide topo sur les variables de type dates"
  }
]