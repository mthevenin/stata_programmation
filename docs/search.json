[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Marc Thévenin",
    "section": "",
    "text": "Sms-Ined\n\n\n\n\n\n\nLiens Ined\n\n\n\n\nSite de l’Ined: \nSite du Service Méthodes Statistiques: \n\nSite des Rencontres de Statistique Appliquée: \n\nSite du séminaire R à l’Usage des Sciences Sociales (RUSS): \n\n\n\n\n\n\n\n\n\nAutres supports\n\n\n\n\nFormation analyse des durées (2017-2020): https://mthevenin.github.io/analyse_duree/\nFormation introduction à Stata (2018): datée - mise à jour en cours:"
  },
  {
    "objectID": "formation/chapitre0.html",
    "href": "formation/chapitre0.html",
    "title": "Présentation",
    "section": "",
    "text": "MAJ EN COURS DE LA VERSION 2018 [nouvelle version fin 2022…au mieux]\n\nN’intéressera sûrement pas les utilisatrices et utilisateurs aguerri.e.s à Stata…. quoique, on trouve toujours des années plus tard des nouvelles commandes qui facilite vraiment les choses, par exemple sur la rapide reprise du chapitre 5, la commande sencode (s pour super).\nUn document pdf sera mis à disposition au fil des maj\nLa fin de la maj de la formation est programmée pour la fin 2022 (donc prévoir un dépassement), cela devrait (pourrait) aller assez vite\nMaj dela formation:\n\n28/07 : Les variables. Chapitre 5 [todo: un topo sur les formats date]\n07/10 : Introduction. Chapitre 1\n07/10 : L’environnement. Chapitre 2\n\nProgrammes des chapitres:\n\nChapitre5"
  },
  {
    "objectID": "formation/chapitre1.html#les-ressources-externes",
    "href": "formation/chapitre1.html#les-ressources-externes",
    "title": "Introduction",
    "section": "3.1 Les ressources externes",
    "text": "3.1 Les ressources externes\n\nLes manuels édités par STATA. Certains sont disponibles au GED [http://www.stata.com/bookstore/books-on-stata]\n*Stata Journal, la revue trimestrielle éditée par Stata [http://www.stata-journal.com ]. Depuis 2015 accès total aux versions PDF (via portail GED maintenant). L’accès et le sommaire des 4 derniers numéro est disponible ici: Lien\nUne chaîne Youtube [http://www.youtube.com/user/statacorp/videos?view=0] qui propose des tutoriels via les manips par les boites de dialogue.\nUn forum particulièrement actif (https://www.statalist.org/)\nAuto-promo: le support que j’ai mis en place à l’été 2022 et qui héberge cette formation introductive Lien"
  },
  {
    "objectID": "formation/chapitre1.html#les-ressources-internes",
    "href": "formation/chapitre1.html#les-ressources-internes",
    "title": "Introduction",
    "section": "3.2 Les ressources internes",
    "text": "3.2 Les ressources internes\n\nLe manuel de Stata est directement intégré au logiciel. Pour y accéder à partir du menu : help => PDF documentation. Il est vraiement de très bonne qualité.\nPour une instruction, on peut obtenir son aide en tapant dans la fenêtre command de l’environnement principal help nom_commande.\n\nPour les commandes internes, un lien permet d’accéder à l’entrée du manuel officiel, plus riche.\n\nDans les fenêtre de dialogue, on peut accéder directement au fichier d’aide en cliquant sur le point d’interrogation.\n\n\n\n\n\nUtiliser l'aide interne\n\nhelp generate\n\n\nL’aide comprend généralement:\n\nLe nom de la commande\nLe lien vers l’entrée du manuel si commande officielle. Pour les commandes externes, un lien vers le sitee support peut-être proposé.\nLa description de la syntaxe\nLe détail des options\nDes exemples avec éventuellement une exécution directe (voir avec help tw)\nLes informations sauvegardées temporairement (jusqu’à l’exécution d’une autre commande) => stored results.\nL’instruction findit nom_command permet d’obtenir la liste de toutes les ressources disponibles d’une commande, internes ou externes. Exemple: findit fitstat\n\n\n\n\n\n\n\nWarning: compatibilité entre les versions\n\n\n\nDes problèmes de compatibilité entre les versions de Stata se sont posés. Cela affecte la lecture des bases entre les différentes versions du logiciel. C’est le cas entre la version 14 et les versions antérieures (dont la version 13 qui date de 2012).\nVersion 14 (idem 15,16): refonte total du système d’encodage vers le standard UTF8.\nLes versions inférieures ne peuvent pas ouvrir les bases au format actuel, qui doivent être enregistrées avec une commande particulière (saveold) sous Stata 14 à 17. Les accents ne sont pas lu après cette conversion, et ce qui nécessite d’exécuter un programme pour les convertir (au secours!!!!).\n A l’Ined, depuis le déploiement de la version 14 et le passage à la version 15 Linux, il n’y a plus de problème. Attention toutefois pour les collaborations avec l’extérieur."
  },
  {
    "objectID": "formation/chapitre2.html",
    "href": "formation/chapitre2.html",
    "title": "Environnement",
    "section": "",
    "text": "Commandes et fonction introduites\nEn italique, commandes externes"
  },
  {
    "objectID": "formation/chapitre2.html#soumettre-un-programme-ou-un-bloc-de-programme",
    "href": "formation/chapitre2.html#soumettre-un-programme-ou-un-bloc-de-programme",
    "title": "Environnement",
    "section": "5.1 Soumettre un programme ou un bloc de programme",
    "text": "5.1 Soumettre un programme ou un bloc de programme\n\nOn ne sélectionne aucune ligne: tout le programme est exécuté\nOn sélectionne une partie du programme: seul le bloc est exécuté\n\n\n\n\n\n\n\nexecute (do): les commandes et les résultats sont affichés dans l’output de l’interface principale\nexecute quietly (run): les commandes et les résultats ne sont pas affichés dans l’output de l’interface principale\n\n\n\n\n\n\n\ndo et run dans un programme\n\n\n\nOn peut exécuter un ou plusieurs programme enregistré dans un programme\n\ndo \"path/nom_prog.do\"  // avec affichage de l'output\nrun \"path/nom_prog.do\" // sans affichage de l'output"
  },
  {
    "objectID": "formation/chapitre2.html#delimiter",
    "href": "formation/chapitre2.html#delimiter",
    "title": "Environnement",
    "section": "5.2 delimiter",
    "text": "5.2 delimiter\nPar défaut une ligne = une instruction (#delimit cr).\nStata ne comprend pas la deuxième ligne de:\n\nkeep  X1 X2 \n      X3 X4\n\nOn peut contourner cela dans un programme pour écrire des instructions longue sur plusieurs lignes avec l’instruction #delimit ;\n\n#delimit ;\nkeep  X1 X2  \n      X3 X4;\n      \ntabulate X1;\n\nLe délimiteur s’appliquera tant qu’on ne repasse pas à #delimit cr\n\n#delimit ;\nkeep  X1 X2  \n      X3 X4;\n      \n#delimit cr      \ntabulate X1\n\nLe délimiteur ; est sourtout utilisé pour les graphiques qui peuvent âtre assez gourmants en options (je le conseille).\nLa solution la plus utilisée est /// à la fin d’une ligne, à l’exception de la dernière de la commande\n\nkeep  X1 X2 /// \n      X3    /// \n      X4\n\ntabulate X1"
  },
  {
    "objectID": "formation/chapitre2.html#les-commentaires",
    "href": "formation/chapitre2.html#les-commentaires",
    "title": "Environnement",
    "section": "5.3 Les commentaires",
    "text": "5.3 Les commentaires\nSi le commentaire est sur une seule ligne\n\n* Commentaire\n\nSi le commentaire est sur une ligne et suit une instruction\n\ninstruction  // Commentaire \n\nSi le commentaire est sur plusieurs lignes\n\n/* commentaire 1\n   commentaire 2 */\n\n\n\n\n\n\n\nPas d’autosave T_T\n\n\n\nIl n’y a pas d’autosave avec Stata contrairement à d’autres applications comme R. C’est très regrettable, car un plantage n’arrive pas toujours aux autres, et oublier de sauvegarder un programme n’est pas un évènement d’une extrême rareté.\nOn peut sauver les meubles en générant un log de session en tête de programme ou mieux en générant un log à chaque ouverture de session dans un fichier profile [marche à suivre].\n\nPour générer un log de session qui enregistrera en continu l’output de l’interface, et donc les lignes de commandes exécutée (sauf si exécution en mode run):\n\nfile => log => begin, puis choisir un emplacement pour l’enregistrement du fichier log.\nlog using \"path/nom_log.smcl\"\n\ncommande externe log2do2: à partir d’un fichier log, permet de conserver seulement les lignes de programmes en supprimant les éléments de l’output. Attention les lignes comportant des erreurs seront également conservée.\nssc install log2do2\n\n\n\n\n5.3.1 Interactions entre l’interface principale, les boîtes de dialogue et l’éditeur de programme\nDEMONSTRATION PENDANT LA FORMATION"
  },
  {
    "objectID": "formation/chapitre3.html#sensibilité-à-la-casse",
    "href": "formation/chapitre3.html#sensibilité-à-la-casse",
    "title": "Le langage Stata",
    "section": "5.1 Sensibilité à la casse",
    "text": "5.1 Sensibilité à la casse\nComme R ou Python, Stata est intégralement sensible à la casse pour les instructions, seulement en minuscules. Par exemple TABULATE X renverra un message d’erreur."
  },
  {
    "objectID": "formation/chapitre3.html#troncature-des-instructions-et-des-options",
    "href": "formation/chapitre3.html#troncature-des-instructions-et-des-options",
    "title": "Le langage Stata",
    "section": "5.2 Troncature des instructions et des options",
    "text": "5.2 Troncature des instructions et des options\nDans le fichier d’aire d’une commande usine ou externe, le niveau de troncature est indiqué par un soulignement dans l’instruction: par exemple tabulate est souligné au niveau de ta : tabulate = tabulat = tabula = tabul = tabu = tab = ta. On utilise généralement tabulate ou tab.\nA manier avec une certaine précaution car le programme peut devenir rapidement incompréhensible, surtout s’il est partagé entre personnes dont la pratique diffère à ce niveau:\n\ntabulate var1 var2, nofreq row miss  \n\n* est équivalent à: \n\nta var1 var2, nof r m"
  },
  {
    "objectID": "formation/chapitre3.html#introduction-au-macros",
    "href": "formation/chapitre3.html#introduction-au-macros",
    "title": "Le langage Stata",
    "section": "8.1 Introduction au macros",
    "text": "8.1 Introduction au macros\nJuste une introduction…Vu la simplicité du langage Stata, il est conseiller de se mettre rapidement à la manipulation des expressions dites macro.\n\nUne macro, dans sa version la plus simple, est une expression qui est utilisée une ou plusieurs fois dans un programme. Elle sont de type temporaire (local) ou enregistré en dur (global).\nLes commandes, en particulier sur les opérations statistiques, enregistre un certains nombre d’objet de type macro qui peuvent être utilisés ultérieurement. On peut récupérer leur liste à la fin du fichier d’aide, et les visualiser les valeurs enregistrées après avoir exécuté une commande avec return list, ereturn list…\n\nUn autre type d’objet, appelé scalar ressemble à une macro mais n’en est pas. Il s’agit de pseudo variables. Ils ne seront pas traités.\nLe contenu d’une macro peut être affiché avec display ou macro list (mac list)\n\nprivilégier display pour afficher le contenu d’une macro de type valeur\nprivilégier mac list pour afficher le contenu d’une macro de type chaîne de caractère lorsque des doubles quotes (“) doivent rester apparentes. La gestion des” dans les macros peut s’avérer particulièrement retord.\n\n\nMacro temporaire\nL’instruction local permet de définir des macros variables temporaire (disparaissent après l’exécution du programme):\n\nlocal nom_macro expression\n\nLe nom de la macro dans l’expression sera indiquée dans la suite du programme par `nom_macro'\n\nlocal a 2\n\ndi 5^(`a')\n\n25\n\n\n\nlocal var price mpg\nsum `var'\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n       price |         74    6165.257    2949.496       3291      15906\n         mpg |         74     21.2973    5.785503         12         41\n\n\nOn en voit tout de suite l’utilité: si je veux changer la liste de variables pour les instructions sum (troncature de summarize) et pour regress, je le fais une fois (dans la définition de la macro) au lieu de deux.\nAvec Stata peut définir également des macros dites global qui sont sauvegardées et s’appliqueront à tous les programmes (on peut les supprimer). Leur utilisation est moins courante: global nom_macro expression, le nom de la macro dans l’expression s’écrira $nom_macro.\nIl est conseillé de les supprimer en fin de programme avec macro drop + noms des macros.\n\nsysuse auto.dta\n\nglobal x mpg weight length turn\n\nsum $x\nreg price $x\n\nmacro drop x\n\n(1978 automobile data)\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n      weight |         74    3019.459    777.1936       1760       4840\n      length |         74    187.9324    22.26634        142        233\n        turn |         74    39.64865    4.399354         31         51\n\n      Source |       SS           df       MS      Number of obs   =        74\n-------------+----------------------------------   F(4, 69)        =     12.13\n       Model |   262166817         4  65541704.3   Prob > F        =    0.0000\n    Residual |   372898579        69  5404327.23   R-squared       =    0.4128\n-------------+----------------------------------   Adj R-squared   =    0.3788\n       Total |   635065396        73  8699525.97   Root MSE        =    2324.7\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.651     80.879    -1.17   0.246     -256.000      66.697\n      weight |      5.030      1.154     4.36   0.000        2.728       7.332\n      length |    -73.147     40.212    -1.82   0.073     -153.368       7.074\n        turn |   -323.861    126.882    -2.55   0.013     -576.983     -70.738\n       _cons |  19581.418   6005.223     3.26   0.002     7601.327   31561.509\n------------------------------------------------------------------------------\n\n\nLa liste des macro enregistrée est donnée par l’instruction: macro dir"
  },
  {
    "objectID": "formation/chapitre3.html#objets-sauvegardés-à-lexécution-dune-commande",
    "href": "formation/chapitre3.html#objets-sauvegardés-à-lexécution-dune-commande",
    "title": "Le langage Stata",
    "section": "8.2 Objets sauvegardés à l’exécution d’une commande",
    "text": "8.2 Objets sauvegardés à l’exécution d’une commande\n\nCes objets de type macro ne sont conservés en mémoire qu’entre 2 commandes exécutés\nOn peut donc les manipuler qu’à ce moment là, en particulier les enregistrer sous forme de macro standard pour les utiliser ultérieurement.\n\n\nqui sum price\n\nreturn list\n\nlocal mprice = r(mean)\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.974268788\n                 r(sd) =  2949.495884768919\n                r(min) =  3291\n                r(max) =  15906\n                r(sum) =  456229"
  },
  {
    "objectID": "formation/chapitre3.html#répétition-avec-des-boucles",
    "href": "formation/chapitre3.html#répétition-avec-des-boucles",
    "title": "Le langage Stata",
    "section": "8.3 Répétition avec des boucles",
    "text": "8.3 Répétition avec des boucles\n\n`forvalues: valeurs occurencées, compteur\n\nfor num 1/n: commande est de plus en plus abandonnée (aide Stata supprimée). On lui préfère maintenant l’instruction forvalues pour effectuer des boucles sur des occurences numériques.\nSi l’on souhaite par exemple changer le nom des variables x1 à x9 en var1, var2,…., var9:\n\nforvalues i=1/9 {\n  \nrename x`i' var`i' \n  \n}\n\n\nforeach: termes d’une expression enregistrée sous la forme d’une macro\n\nPar l’exemple, et juste une petite introduction. On veut faire une régression linéaire entre la variable price et la variable foreign en ajoutant une seule autre variable dans cette liste: mpg, headroom, trunk.\nAu lieu d’exécuter:\n\nregress price foreign mpg      \nregress price foreign headroom \nregress price foreign trunk    \n\nOn génère une macro variable temporaire qui liste ces 3 variables , et on exécute une boucle avec l’instruction foreach.\n\n\nlocal var mpg headroom trunk\n\nforeach x of local var {\n\nregress price foreign `x', noheader\n}\n\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |   1767.292    700.158     2.52   0.014      371.217    3163.368\n         mpg |   -294.196     55.692    -5.28   0.000     -405.242    -183.149\n       _cons |  11905.415   1158.634    10.28   0.000     9595.164   14215.667\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |    577.812    787.566     0.73   0.466     -992.549    2148.174\n    headroom |    491.575    428.405     1.15   0.255     -362.641    1345.791\n       _cons |   4522.071   1412.097     3.20   0.002     1706.430    7337.711\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n     foreign |   1190.155    760.805     1.56   0.122     -326.847    2707.157\n       trunk |    262.772     81.852     3.21   0.002       99.564     425.980\n       _cons |   2196.541   1267.857     1.73   0.088     -331.494    4724.576\n------------------------------------------------------------------------------\n\n\n….et on peut aller plus loin… Juste pour information car cela se complique, avec une technique de macro empilée, on ajoute les les variables une à une au modèle.\n\nlocal j mpg weight length turn headroom trunk\n\nforeach j2 of local j {\nlocal x `x' `j2'\n  \ndi  \"covariables introduites = `x'\"  // pour afficher ce qui est lu dans la macro\n  \nregress price `x' , noheader\n}\n  \n\n  4.   \ncovariables introduites = mpg\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -238.894     53.077    -4.50   0.000     -344.701    -133.088\n       _cons |  11253.061   1170.813     9.61   0.000     8919.088   13587.033\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -49.512     86.156    -0.57   0.567     -221.302     122.278\n      weight |      1.747      0.641     2.72   0.008        0.468       3.025\n       _cons |   1946.069   3597.050     0.54   0.590    -5226.245    9118.382\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -86.789     83.943    -1.03   0.305     -254.209      80.630\n      weight |      4.365      1.167     3.74   0.000        2.036       6.693\n      length |   -104.868     39.722    -2.64   0.010     -184.090     -25.646\n       _cons |  14542.434   5890.632     2.47   0.016     2793.940   26290.929\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.651     80.879    -1.17   0.246     -256.000      66.697\n      weight |      5.030      1.154     4.36   0.000        2.728       7.332\n      length |    -73.147     40.212    -1.82   0.073     -153.368       7.074\n        turn |   -323.861    126.882    -2.55   0.013     -576.983     -70.738\n       _cons |  19581.418   6005.223     3.26   0.002     7601.327   31561.509\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn headroom\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -96.145     80.259    -1.20   0.235     -256.300      64.010\n      weight |      5.015      1.145     4.38   0.000        2.730       7.300\n      length |    -60.922     40.791    -1.49   0.140     -142.319      20.476\n        turn |   -332.592    126.045    -2.64   0.010     -584.111     -81.073\n    headroom |   -538.252    373.149    -1.44   0.154    -1282.859     206.356\n       _cons |  19317.280   5961.554     3.24   0.002     7421.185   31213.375\n------------------------------------------------------------------------------\ncovariables introduites = mpg weight length turn headroom trunk\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |    -94.063     80.371    -1.17   0.246     -254.484      66.357\n      weight |      5.079      1.148     4.42   0.000        2.788       7.371\n      length |    -73.487     43.011    -1.71   0.092     -159.338      12.364\n        turn |   -327.070    126.311    -2.59   0.012     -579.188     -74.952\n    headroom |   -731.292    427.369    -1.71   0.092    -1584.324     121.740\n       trunk |     98.275    105.721     0.93   0.356     -112.745     309.295\n       _cons |  20447.251   6090.068     3.36   0.001     8291.424   32603.078\n------------------------------------------------------------------------------"
  },
  {
    "objectID": "formation/chapitre4.html#variables-continues",
    "href": "formation/chapitre4.html#variables-continues",
    "title": "Les bases de données",
    "section": "7.1 Variables continues",
    "text": "7.1 Variables continues\nCommande summarize\nAvec l’option detail (d) on obtient la moyenne, la variance, les quantiles, la symétrie…). La commande peut-être tronquée jusqu’à sum.\nWarning: il existe également une fonction sum pour générer des cumuls lors d’une création de variable [voir chapitre 5].\n\n\n\nSyntaxe\n\nsummarize varlist [, detail]\n\n\nA voir également: les commandes mean ou tabstat. Mais également la commande table permet de calculer des quantités de type moyenne, médiane, variance…. pour les différentes valeurs d’une variable catégorielle, et qui intègre des éléments pour exporter les résultats dans plusieurs format (je ne suis pas très à jour sur ce point).\n\nsum price length, d\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n                        Length (in.)\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%          142            142\n 5%          154            147\n10%          157            149       Obs                  74\n25%          170            154       Sum of wgt.          74\n\n50%        192.5                      Mean           187.9324\n                        Largest       Std. dev.      22.26634\n75%          204            221\n90%          218            222       Variance       495.7899\n95%          221            230       Skewness      -.0409746\n99%          233            233       Kurtosis        2.04156\n\n\n\nbysort foreign: sum price, d\n\n-> foreign = Domestic\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3667           3299\n10%         3955           3667       Obs                  52\n25%         4184           3799       Sum of wgt.          52\n\n50%       4782.5                      Mean           6072.423\n                        Largest       Std. dev.      3097.104\n75%         6234          13466\n90%        11385          13594       Variance        9592055\n95%        13594          14500       Skewness       1.777939\n99%        15906          15906       Kurtosis       5.090316\n\n-------------------------------------------------------------------------------\n-> foreign = Foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3748           3748\n 5%         3798           3798\n10%         3895           3895       Obs                  22\n25%         4499           3995       Sum of wgt.          22\n\n50%         5759                      Mean           6384.682\n                        Largest       Std. dev.      2621.915\n75%         7140           9690\n90%         9735           9735       Variance        6874439\n95%        11995          11995       Skewness       1.215236\n99%        12990          12990       Kurtosis       3.555178\n\n\nPour aller plus loin (voir introduction aux macro dans le chapitre précédent\nEn bas de l’aide d’une commande, stored result indique les informations enregistrées temporairement.\nPour la commande summarize:\n\n*Extrait de l'aide de summarize\n\n* help summarize\n\n    summarize stores the following in r():\n\n    Scalars   \n      r(N)           number of observations\n      r(mean)        mean\n      r(skewness)    skewness (detail only)\n      r(min)         minimum\n      r(max)         maximum\n      r(sum_w)       sum of the weights\n      r(p1)          1st percentile (detail only)\n      r(p5)          5th percentile (detail only)\n      r(p10)         10th percentile (detail only)\n      r(p25)         25th percentile (detail only)\n      r(p50)         50th percentile (detail only)\n      r(p75)         75th percentile (detail only)\n      r(p90)         90th percentile (detail only)\n      r(p95)         95th percentile (detail only)\n      r(p99)         99th percentile (detail only)\n      r(Var)         variance\n      r(kurtosis)    kurtosis (detail only)\n      r(sum)         sum of variable\n      r(sd)          standard deviation\n\nOn peut afficher ces informations avec la commande return list (ereturn list pour les estimations de modèles)\n\nqui sum price, d\nreturn list\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.97426879\n                 r(sd) =  2949.495884768919\n           r(skewness) =  1.653433511704859\n           r(kurtosis) =  4.819187528464004\n                r(sum) =  456229\n                r(min) =  3291\n                r(max) =  15906\n                 r(p1) =  3291\n                 r(p5) =  3748\n                r(p10) =  3895\n                r(p25) =  4195\n                r(p50) =  5006.5\n                r(p75) =  6342\n                r(p90) =  11385\n                r(p95) =  13466\n                r(p99) =  15906\n\n\nSi l’on souhaite afficher seulement les valeurs de la médiane pour plusieurs variables de la base:\n\n\nlocal var  price mpg rep78 headroom trunk\n\nforeach x of local var {\nqui sum `x', d\ndi as text \"La valeur  médiane de la variable `x' est:\" as result `r(p50)'\n}\n\nLa valeur  médiane de la variable price est:5006.5\nLa valeur  médiane de la variable mpg est:20\nLa valeur  médiane de la variable rep78 est:3\nLa valeur  médiane de la variable headroom est:3\nLa valeur  médiane de la variable trunk est:14\n\n\n\nIci r(p50) joue le rôle d’une macro,\nCes informations peuvent être utilisées pour générer une variable\n\nGraphiques\nCommandes boxplot et histogram\nPar les menus: Graphics => Distributional graphs\nSyntaxe\n* Boxplot\ngraph box varlist [, over(var)...]\n* Histogramme\nhistogram varname [, by(var)...]\nhistogram length, by(foreign)\ngraph box length, over(foreign)    \n\n\n\n\n\nLes graphiques de type violin qui réunie les informations issues des boxplots et histogrammes ne sont pas implémentés dans Stata (possible via Python à partir de la v16 de Stata).\nBien évidemment, d’autres types de graphiques sont possibles, en particulier via des commandes externes. Pour analyses des distributions de deux variables continues, on se reportera par exemple à la commande heatplot de Ben Jann.\nExemples"
  },
  {
    "objectID": "formation/chapitre4.html#variables-catégorielles",
    "href": "formation/chapitre4.html#variables-catégorielles",
    "title": "Les bases de données",
    "section": "5.2 Variables catégorielles",
    "text": "5.2 Variables catégorielles\nLa principale commande est tabulate (tab)\nSyntaxe (tableau croisé)\ntab var1 var2 [, mis nofreq row col chi2 ......]\ntab rep78 foreign, mis\n\n    Repair |\n    Record |    Origine voiture\n      1978 |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        27          3 |        30 \n         4 |         9          9 |        18 \n         5 |         2          9 |        11 \n         . |         4          1 |         5 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\ntab rep78 foreign,  nofreq col\n\n    Repair |\n    Record |    Origine voiture\n      1978 |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         1 |      4.17       0.00 |      2.90 \n         2 |     16.67       0.00 |     11.59 \n         3 |     56.25      14.29 |     43.48 \n         4 |     18.75      42.86 |     26.09 \n         5 |      4.17      42.86 |     15.94 \n-----------+----------------------+----------\n     Total |    100.00     100.00 |    100.00 \n\n\nOn peut également utiliser la commande table pour afficher des effectifs croisés.\nLa commande externe tab3way permet d’afficher des tables pour 3 variables catégorielles.\nUne option intéressante est nolabel. Si les modalités ont des libellés, le tableau ne les affiche pas (utile pour du recodage - voir chapitre suivant).\n\ntab rep78 foreign,  nofreq col nolab\n\n    Repair |\n    Record |    Origine voiture\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |      4.17       0.00 |      2.90 \n         2 |     16.67       0.00 |     11.59 \n         3 |     56.25      14.29 |     43.48 \n         4 |     18.75      42.86 |     26.09 \n         5 |      4.17      42.86 |     15.94 \n-----------+----------------------+----------\n     Total |    100.00     100.00 |    100.00 \n\nGraphiques\nA Ajouter: pourquoi les camembers sont visualisation de mauvaise qualité (et programmation peu efficace avec Stata)\nOn privilégiera ici des commandes externes, en particulier celles de NJ.Cox catplot et spineplot\nssc install catplot \n\n* tableau: tab rep78 foreign,  nofreq col\ncatplot rep78, by(foreign) percent(foreign)\n* tableau: tab rep78 foreign,  nofreq row\ncatplot rep78, by(foreign) percent(foreign)\nspineplot foreign rep78\n\n\n\n\n\nssc install spineplot\nspineplot foreign rep78"
  },
  {
    "objectID": "formation/chapitre4.html#tri-dune-base",
    "href": "formation/chapitre4.html#tri-dune-base",
    "title": "Les bases de données",
    "section": "4.1 Tri d’une base",
    "text": "4.1 Tri d’une base\nCommande sort\n\nsort varlist\n\nLa commande sort n’effectue que des tris croissants. Pour faire un tri décroissant, on peut utiliser la commande gsort. Tris croissants et décroissant peuvent se succéder dans une logique de cluster.\n\nsort varlist => tri croissant\ngsort + var1 => croissant var1\ngsort - var1 => décroissant var1\ngsort + var1 - var2 => croissant var1 et décroissant var2 dans chaque strate de var1\n\nLe tri d’une peut/doit être réalisé lorsqu’on veut répéter une instruction avec le préfixe bysort: bysort varlist: instruction. Il est imposé lorsqu’on souhaite apparier des bases [voir chapitre 6]\n\n\n\n\nSyntaxe\n\n\n* tri croissant sur la variable price\nsort price\n\n* tri décroissant sur la variable prix pour chaque niveau de la variable foreign\ngsort + foreign - price"
  },
  {
    "objectID": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "href": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "title": "Les bases de données",
    "section": "4.2 Repérage et suppression des doublons",
    "text": "4.2 Repérage et suppression des doublons\nRepérage et suppression des doublons\nCommande duplicates list/tag/drop [varlist]\nPermet de lister, repérer (avec gen(varname) ) ou supprimer des observations répliquées. Si la liste de variables n’est pas renseignée, elles toutes sont utilisées.\nSyntaxe\nduplicates list [varlist]\n\nduplicates tag [varlist], gen(var)\n\nduplicates drop [varlist]"
  },
  {
    "objectID": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "href": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "title": "Les bases de données",
    "section": "4.3 Modifier la place des variables dans la base",
    "text": "4.3 Modifier la place des variables dans la base\nCommande order\n\n\n\nSyntaxe\n\norder varlist, [first/last] [after/before(varname)]\n\n\n\norder foreign, first\norder rep78, after(foreign)\n\ndes\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nrep78           int     %8.0g                 Repair record 1978\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nCette opération est particulièrement pour organiser sa base de données après la création de nouvelles variables."
  },
  {
    "objectID": "formation/chapitre4.html#importationexportation",
    "href": "formation/chapitre4.html#importationexportation",
    "title": "Les bases de données",
    "section": "2.4 Importation/Exportation",
    "text": "2.4 Importation/Exportation\nExcel et fichiers textes (.txt, .csv)\n\n\nLe plus simple est passer par le menu: files + [Import ou Export] qui dispose d’une fenêtre de prévisualisation.\n\nPour excel les commandes sont import excel et export excel\nPour des fichiers textes type csv (R), les commandes sont import delimited et export delimited\n\n\n**Exemples\n\n* exportation csv\nexport delimited using \"D:\\D\\stata_temp\\export_csv.csv\", replace\n\n* exportation xls\nexport excel using \"D:\\D\\stata_temp\\export_excel.xls\", firstrow(variables) replace\n\n* importation cxv\nimport delimited \"D:\\D\\stata_temp\\export_csv.csv\",  clear\n\n\n* importation xls\nimport excel \"D:\\D\\stata_temp\\export_excel.xls\", sheet(\"Sheet1\") firstrow clear\n\nSAS\n\n\nDepuis la version 16 de Stata il est possible d’importer directement des formats sas7bdat. Pas d’exportation possible.\nPour les versions antérieure, la solution installée via sasxport n’est pas satisfaisante. Il est alors conseillé d’utiliser le package externe savasas\n\nSas => Stata [importation]: commande usesas\n\nStata => Sas [exportation] : commande savasas\nSi le chemin d’accès à l’exécutable de SAS Windows n’est pas reconnu, il faut récupérer et éditer le fichier sasexe.do (à partir de la ligne 169), dont l’accès est donné dans le fichier d’aide.\n\nPour l’exportation, on peut générer un catalogue de format,en dur, avec l’option format.\n\n\nSPSS\n\n\nDepuis la dernière version de Stata (16), il est possible d’importer directement des bases de ce format.\nPas de possibilité d’exportation directe."
  },
  {
    "objectID": "formation/chapitre5.html",
    "href": "formation/chapitre5.html",
    "title": "Les variables",
    "section": "",
    "text": "Programme du chapitre\nCommandes et expressions introduites\nPour accéder aux infomations sur les variables d’une base:\nVariables manager\nFenêtre properties à droite de l’interface principale (mode dévérouillé)\nCommande describe"
  },
  {
    "objectID": "formation/chapitre5.html#types",
    "href": "formation/chapitre5.html#types",
    "title": "Les variables",
    "section": "1.1 Types",
    "text": "1.1 Types\nStata gère tous les types de variables: numérique, caractère, date. Un type de variable est un type de stockage.\n\nTypes numériques: float, long, double, int et byte.\nTypes caractère: str# et strL (très grandes chaînes de caractères). # est la longueur de la chaîne de caractère, elle ne peut pas excéder 2046 pour le type str.\n\nPlus d’informations: help data types\nModification du type de variable\n\nOptimisation du poids en mémoire avec compress\nCommande recast\n\nOptimisation du poids de la base\n\ncompress \n\n  variable mpg was int now byte\n  variable rep78 was int now byte\n  variable trunk was int now byte\n  variable turn was int now byte\n  variable make was str18 now str17\n  (370 bytes saved)\n\n\nPassage de la variable make en str3\nEn réduisant le type, on va tronquer les chaînes de caractères qui ne garderont que les 3 premières lettres, à manupiler avec prudence donc. Pour cette opération, Stata impose une confirmation avec l’option force.\nVariable d’origine\n\ndes make \nlist make in 1/10\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\n\n     +---------------+\n     | make          |\n     |---------------|\n  1. | AMC Concord   |\n  2. | AMC Pacer     |\n  3. | AMC Spirit    |\n  4. | Buick Century |\n  5. | Buick Electra |\n     |---------------|\n  6. | Buick LeSabre |\n  7. | Buick Opel    |\n  8. | Buick Regal   |\n  9. | Buick Riviera |\n 10. | Buick Skylark |\n     +---------------+\n\n\nModification du type\n\nrecast str3 make, force\ndes make\nlist make in 1/10\n\nmake:  74 values changed\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str3    %-9s                  Make and model\n\n     +------+\n     | make |\n     |------|\n  1. | AMC  |\n  2. | AMC  |\n  3. | AMC  |\n  4. | Bui  |\n  5. | Bui  |\n     |------|\n  6. | Bui  |\n  7. | Bui  |\n  8. | Bui  |\n  9. | Bui  |\n 10. | Bui  |\n     +------+"
  },
  {
    "objectID": "formation/chapitre5.html#format",
    "href": "formation/chapitre5.html#format",
    "title": "Les variables",
    "section": "1.2 Format",
    "text": "1.2 Format\nIl s’agit du format d’affichage des valeurs des variables. Ils peuvent être modifiés sans que le type soit changé (décimales, alignement….).\nVariables numérique:\n- format g: général (définition un peu obsure pour moi) - format f: fixe - plusieurs format d’affichage pour les variables de type dates: %td (date avec jour-mois-année), %tm (mois), %tq (trimestre), %tw (semaine). Les dates et leur manipulation sont un domaines très riche, et feront l’objet d’une courte présentation en fin de chapite.\nOn peut changer le format d’affichage avec la commande format. Si le format est de type général (g), il est préférable de passer à un format de type fixe (f) On peut un même format à une liste de variables.\n\n\n\nSyntaxe\n\nformat %format varlist\n\n\nExemple: changement du nombre de décimales\nDans la base auto, la variable gear_ratio est de format fixe à 2 décimales (%6.2f). Pour supprimer, à l’affichage, les deux décimales: afficher les valeurs sans décimales.\n\nlist gear_ratio in 1/10\n\n     | gear_r~o |\n     |----------|\n  1. |     3.58 |\n  2. |     2.53 |\n  3. |     3.08 |\n  4. |     2.93 |\n  5. |     2.41 |\n     |----------|\n  6. |     2.73 |\n  7. |     2.87 |\n  8. |     2.93 |\n  9. |     2.93 |\n 10. |     3.08 |\n     +----------+\n\n\n\nformat %6.0f gear_ratio\nlist gear_ratio in 1/10\n\n     | gear_r~o |\n     |----------|\n  1. |        4 |\n  2. |        3 |\n  3. |        3 |\n  4. |        3 |\n  5. |        2 |\n     |----------|\n  6. |        3 |\n  7. |        3 |\n  8. |        3 |\n  9. |        3 |\n 10. |        3 |\n     +----------+\n\n\nExemple: aligner le nombre décimal reporté avec summarize sur le format de la variable\nAvec l’option format appliquée à la commande summarize on peut automatiquement réduire le nombre de décimales reportées dans l’output\n\nsum gear_ratio\nsum gear_ratio, d\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         2.19           2.19\n 5%         2.28           2.24\n10%         2.43           2.26       Obs                  74\n25%         2.73           2.28       Sum of wgt.          74\n\n50%        2.955                      Mean           3.014865\n                        Largest       Std. dev.      .4562871\n75%         3.37           3.78\n90%         3.72           3.78       Variance       .2081979\n95%         3.78           3.81       Skewness       .2191658\n99%         3.89           3.89       Kurtosis       2.101812\n\n\nAvec l’option format\n\nsum gear_ratio, format\nsum gear_ratio, d format\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74        3.01        0.46       2.19       3.89\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         2.19           2.19\n 5%         2.28           2.24\n10%         2.43           2.26       Obs                  74\n25%         2.73           2.28       Sum of wgt.          74\n\n50%         2.96                      Mean               3.01\n                        Largest       Std. dev.          0.46\n75%         3.37           3.78\n90%         3.72           3.78       Variance           0.21\n95%         3.78           3.81       Skewness           0.22\n99%         3.89           3.89       Kurtosis           2.10"
  },
  {
    "objectID": "formation/chapitre5.html#modification-du-type",
    "href": "formation/chapitre5.html#modification-du-type",
    "title": "Les variables",
    "section": "1.3 Modification du type",
    "text": "1.3 Modification du type\nIl est possible de basculer d’un type caractère à un type numérique et inversement\nDe numérique à caractère\n Si la variable numérique n’a pas de label affecté sur les modalités, ou qu’on ne veut pas conserver l’information données par les labels, on peut utiliser la commande tostring. On peut créer une nouvelle variable avec l’option gen() ou remplacer la variable numérique d’origine avec l’option replace. Une des deux options doit être nécessairement renseignée.\n\n\n\nSyntaxe\n\n  tostring [varlist], gen(nom_varlist)\n  tostring [varlist], replace\n\n\nExemple avec la variable foreign qui prend les valeur 0 et 1 avec les labels “domestic” (0) et “foreign” (1)\n\ntostring foreign, gen(foreign_str)\ndes foreign foreign_str\n\ntab foreign foreign_str\n\nforeign_str generated as str1\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str1    %9s                   Car origin\n\n           |      Car origin\nCar origin |         0          1 |     Total\n-----------+----------------------+----------\n  Domestic |        52          0 |        52 \n   Foreign |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nSi la variable numérique a des labels affectés aux modalités modalités et qu’on souhaite conserver cet information, on utilise la commande decode\n\n\n\nSyntaxe\n\n  decode variable, gen(nom_var)\n\n\nExemple avec la variable foreign\n\ndecode foreign, gen(foreign_str)\n\ndes foreign foreign_str\n\ntab foreign_str\n  \n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str8    %9s                   Car origin\n\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\nDe caractère à numérique\nSi la variable caractère est a une forme numerique (une suite de nombre comme des années, des âges…), on utilise la commande destring. Lorsqu’il y a des des valeurs manquantes à la variable, on doit uiliser l’option force.\n\n\n\nStata\n\n destring [varlist] , gen(nom_varlist) \n destring [varlist] , replace [force]\n\n\nExemple avec la variable rep78 qui est transformé dans un premier temps en variables caractère avec tostring puis de nouveau transformé en format numérique avec destring\n\ntostring rep78, replace\ndes rep78\n\ndestring rep78, replace\ndes rep78\n\nrep78 was int now str1\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           str1    %9s                   Repair record 1978\n\nrep78: all characters numeric; replaced as byte\n(5 missing values generated)\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           byte    %10.0g                Repair record 1978\n\n\nSi la variable caractère n’est pas de forme numérique et que l’on souhaite récupérer les labels sur les modalités, on peut utiliser la commande encode ou la commande externe sencode (net install st0043_2, force). La seconde permet de remplacer directement la variable d’origine, option particulièrement pratique.. Egalement, cette commande permet plus de souplesse sur le codage de la variable (help sencode pour plus de détail).\nAvec encode ou sencode sans l’option gsort, le numéro de la modalité suivra l’ordre alphabétique des chaînes de caractère de la variable: si la variable caractère à pour valeur (“Homme”, “Femme”), “femme” sera automatiquement codée 1 et “homme” 2.\n\n\n\nSyntaxe\n\nencode variable, gen(nom_variable)\n\n\n\n\n\nSyntaxe\n\n```{} \nsencode variable, gen(nom_variable) replace gsort()\n\n\nExemple avec la variable foreign_str (variable caractère créée précédemment à partir de la variable foreign)\n\nencode foreign_str, gen(foreign2)\n\ntab foreign2\ntab foreign2, nolab\n\nvariable foreign_str not found\nr(111);\n\nend of do-file\nr(111);\n\n\n\n\n\n\n\n\nType de variable pour les modèles\n\n\n\nLes variables de type caractères ne sont pas acceptées, Stata renvoie alors un message d’erreur avec no observation. Si c’est le cas, les commandes destring et encode vont s’avérer particulièrement utiles."
  },
  {
    "objectID": "formation/chapitre5.html#generate---replace",
    "href": "formation/chapitre5.html#generate---replace",
    "title": "Les variables",
    "section": "2.1 generate - replace",
    "text": "2.1 generate - replace\nLa création d’une nouvelle variable se fait avec la commande generate généralement tronquée jusqu’à gen.\n\n\n\nSyntaxe\n\ngen nom_variable=valeur/fonction [expression: if in inlist inrange...]\n\n\nPour remplacer la valeur d’une valeur variable existante on utilise la commande replace. Le nom n’est malheureusement pas tronquable.\n\n\n\nSyntaxe\n\nreplace nom_variable=valeur/fonction [expression: if in inlist inrange...]\n\n\n\nOn peut utiliser le préfixe bysort\nPour utiliser une fonction mathématique (log, exp, .) => help math_functions\nPour afficher la liste complète des fonctions (variables caractères, statistiques, pseudo nombre aléatoire, dates.): help function\n\nRappel: attention entre l’opérateur d’affectation (=) et l’expression conditionnelle (==).\n\nCréation d’une indicatrice (0,1)\n On peut rapidement générer des indicatrices (0,1) à partir d’une expression conditionnelle:\n\n\n\nSyntaxe\n\ngen x= expression_conditionnelle\n\n\nExemple avec la variable rep78. On génère la variable rep2 qui prend la valeur 1 si rep78>3, 0 sinon. Comme il y a des valeurs manquantes dans la variable d’origine, on corrige l’information pour l’indicatrice dont les valeurs manquantes ont été automatiquement affectées à la valeur 0.\n\ngen rep2 = rep78>3\nreplace rep2 = . if rep78==.\ntab rep78 rep2\n\n(5 real changes made, 5 to missing)\n\n    Repair |\n    record |         rep2\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        30          0 |        30 \n         4 |         0         18 |        18 \n         5 |         0         11 |        11 \n-----------+----------------------+----------\n     Total |        40         29 |        69 \n\n\n Remarque: Avec la commande tabulate on peut créer une série d’indicatrices à partir d’une variable catégorielle avec l’option gen(nom_variable)\n\n\n\nSyntaxe\n\ntab x, gen(nom_variable)\n\n\nExemple avec la variable foreign. Avec tabulate on va générer deux indicatrices: origine1 si foreign=0, et origine2 si foreign=1. Un label à la variable est automatiquement créé indiquant la valeur de la variable d’origine.\n\ntab foreign, gen(origine)\n\ndes origine1 origine2\n\ntab origine1 foreign\ntab origine2 foreign\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\norigine1        byte    %8.0g                 foreign==Domestic\norigine2        byte    %8.0g                 foreign==Foreign\n\n\nforeign==D |      Car origin\n   omestic |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |         0         22 |        22 \n         1 |        52          0 |        52 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nforeign==F |      Car origin\n    oreign |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |        52          0 |        52 \n         1 |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74"
  },
  {
    "objectID": "formation/chapitre5.html#egen",
    "href": "formation/chapitre5.html#egen",
    "title": "Les variables",
    "section": "2.2 egen",
    "text": "2.2 egen\negen: extented generate\negenmore: package programmé par NJ.Cox qui ajoute des fonctions associée à egen [ssc install egenmore]\nRéservé à l’utilisation de fonctions. Pour obtenir la liste help egen.\n\nExemple: on va créer dans un premier la variable mprice qui reporte pour chaque observation la moyenne de la variable price. Dans un second temps, on va créer la variable mprice_or, mais avec le prix moyen des voitures selon leur origine (foreign). La fonction utilisée est la fonction mean().\n\negen mprice = mean(price)\n\nlist  make price mprice in 1/10\n\n     | make             price     mprice |\n     |-----------------------------------|\n  1. | AMC Concord      4,099   6165.257 |\n  2. | AMC Pacer        4,749   6165.257 |\n  3. | AMC Spirit       3,799   6165.257 |\n  4. | Buick Century    4,816   6165.257 |\n  5. | Buick Electra    7,827   6165.257 |\n     |-----------------------------------|\n  6. | Buick LeSabre    5,788   6165.257 |\n  7. | Buick Opel       4,453   6165.257 |\n  8. | Buick Regal      5,189   6165.257 |\n  9. | Buick Riviera   10,372   6165.257 |\n 10. | Buick Skylark    4,082   6165.257 |\n     +-----------------------------------+\n\n\n\nbysort foreign: egen mprice_or = mean(price)\n\nlist  make price mprice in 1/5\nlist  make price mprice in 66/70\n\n     | make            price   mprice~r |\n     |----------------------------------|\n  1. | AMC Concord     4,099   6072.423 |\n  2. | AMC Pacer       4,749   6072.423 |\n  3. | AMC Spirit      3,799   6072.423 |\n  4. | Buick Century   4,816   6072.423 |\n  5. | Buick Electra   7,827   6072.423 |\n     +----------------------------------+\n\n     +-----------------------------------+\n     | make             price   mprice~r |\n     |-----------------------------------|\n 66. | Subaru           3,798   6384.682 |\n 67. | Toyota Celica    5,899   6384.682 |\n 68. | Toyota Corolla   3,748   6384.682 |\n 69. | Toyota Corona    5,719   6384.682 |\n 70. | VW Dasher        7,140   6384.682 |\n     +-----------------------------------+\n\n\n\n\n\n\n\n\nLes fonctions sum() et total()**\n\n\n\nSans aucune explication, la fonction sum() qui permet d’obtenir une somme incrémentale n’est pas associée à egen mais à generate. En revanche la fonction total() est associée à egen. Il faut le retenir.\nExemple: on veut créer un identifiant numérique (variable id) pour chaque voiture (dans la base on a une seule voiture par nom de voiture).\n\ngen x = 1 \ngen id = sum(x)\n\nlist id make in 1/5\nlist id make in 66/70\n\n     | id   make          |\n     |--------------------|\n  1. |  1   AMC Concord   |\n  2. |  2   AMC Pacer     |\n  3. |  3   AMC Spirit    |\n  4. |  4   Buick Century |\n  5. |  5   Buick Electra |\n     +--------------------+\n\n     +---------------------+\n     | id   make           |\n     |---------------------|\n 66. | 66   Subaru         |\n 67. | 67   Toyota Celica  |\n 68. | 68   Toyota Corolla |\n 69. | 69   Toyota Corona  |\n 70. | 70   VW Dasher      |\n     +---------------------+\n\n\nSi on veut reporter le nombre total d’observations dans la base (variable N), avec la fonction total:\n\negen N = total(x)\n\nlist id N make in 1/5\nlist id N make in 66/70\n\nx not found\nr(111);\n\nend of do-file\nr(111);\n\n\n\n\nOn va le voir, ces deux variables qui ont été générées peuvent l’être directement avec les variables internes dites de comptage.\n\n\n\n\n\n\nPackage gegen (M.Caceres)\n\n\n\n\nPour les volumétries dépassant le million d’observation il est fortement conseillé d’utilisée les commandes associées au package de Mauricio Caceres, ici la commande gege,.\nhttps://gtools.readthedocs.io/en/latest/\nhttps://mthevenin.github.io/stata_programmation/speedup/gtools.html"
  },
  {
    "objectID": "formation/chapitre5.html#todo",
    "href": "formation/chapitre5.html#todo",
    "title": "Les variables",
    "section": "5.1 TODO",
    "text": "5.1 TODO\nFaire un rapide topo sur les variables de type dates"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programmation",
    "section": "",
    "text": "07 octobre 2022\n\n\n\nUn premier petit topo sur le calcul des effets marginaux avec R, avec un package récent marginaleffects.\nLien\n\n\n\n\n\n\n\n\n30 septembre 2022\n\n\n\nUne présentation du package Statamarkdown de Doug Hemken. La durée d’exécution n’est pas optimale, mais ce package permet d’exécuter des programmes Stata dans RStudio tout en éditant un document (article, rapport, ouvrage).\nLien\n\n\n\n\n\n\n\n\n08 Septembre 2022\n\n\n\n\n\n\n collect La version 17 de Stata a introduit une suite nommée collect permettant de paramétrer, enregistrer, et utiliser des styles pour les tableaux. Dans le fichier d’aide, l’idée de remplacer les commandes utilisateurs existantes, en particulier la très populaire outreg2, est assez clairement annoncée. Après quelques heures d’apprentissage, je suis agréablement surpris pour ne pas dire bluffé.\nUne première courte présentation pour les régressions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n26 Août 2022\n\n\n\n\nUtilité d’avoir un fichier profile.do\nPrésentation du package gtools et de plusieurs commandes associées qui améliore de manière impréssionnante le temps d’exécution. Particulièrement utile pour des bases de données volumineuses\nLa mise à jour de la formation introductive ne présente pas d’intérêt particulier pour les chercheur.e.s mais je me dois tout de même de la reprendre. Il y a toujours des commandes externes peu connues qui s’avèrent très pratiques: senscode, tabm, fre… Tout le monde connait ????\nLes macros. Déjà une section importante traitée pour les graphiques. Dans un premier temps:\n\nDifférences avec les objets de type scalar\nTour d’horizon plus complet sur les fonctions associées aux macros\n\nPour la question Stata=>R je vais surement partir sur des traductions expliquées de programmes. Dans un premier temps je vais mettre à jour avec R le travail effectué avec Cris sur Mafe en 2015 lien qui consistait à mettre en parallèle, pour une même mise en forme de données biographiques, des programmes en Stata, R et Sas.\n\n\n\n\n\n Support réalisé avec Rstudio - Quarto.\n Version Stata: 17-SE"
  },
  {
    "objectID": "macro/intro.html",
    "href": "macro/intro.html",
    "title": "Présentation",
    "section": "",
    "text": "26 AOUT 2022\n\nVraisemblablement la section qui sera la plus dense, avec également des éléments de programmation d’algorithme.\nPas de contenu en mis à disposition mais on peut déjà se diriger vers le chapitre sur macros dans la formation sur les graphiques: lien\nLa première contribution sera surement sur les objets scalar. Il y a souvent des confusions entre ce type d’objets qui ne sont pas justement pas des macros mais des pseudo variables, mais dont l’utilisation peut dans certains contextes s’avérer être un bon substitut aux macros de type local dans les programmes:\n\npas d’appel par des côtes\nenregistrement sur la session et non sur le temps d’exécution"
  },
  {
    "objectID": "profile/profile1.html",
    "href": "profile/profile1.html",
    "title": "Principe",
    "section": "",
    "text": "Un fichier profile.do est un programme qui s’éxécute à l’ouverture d’une session Stata. Ce programme comporte uniquement des éléments de configuration, par exemples:\n\nCréation d’un log de session automatique. J’y tiens, un problème n’arrive pas toujours qu’aux autre.\nAffectation d’un répertoire temporaire autre que celui par défaut\nModification de la localisation du répertoire ado plus (il est conseillé mettre sur le lecteur D à l’Ined ou tout autre lecteur que le C:)\nToutes les commandes de paramétrisation préfixées par set: contrôle du défilement de l’output, affichage du nombre de décimales dans les tableaux de régression etc…\nParamètres des graphiques: thèmes, police d’affichage… Je conseille d’utiliser à minima grstyle de Ben Jann.\n\nToutes les commandes sont donc insérées dans un seule programme, il est possible de les activer, de les désactiver ou de les modifier très facilement selon l’usage du moment.\n\n\n1 Création et modification d’un fichier profile.do\nLe fichier profile.do doit être impérativement enregistré dans le répertoire user:\n\n\nWindows: \"C:/Users/nom_user/\"\nLinux (serveur Margaux): \"home/Users/nom_user/\"\n\n\nUne fois le programme enregistré, son effet n’est pris en compte que pour les sessions ouvertes ultérieurement et non sur celles en cours. Le programme est chargé uniquement à l’ouverture d’une session, un message apparait dans l’output:\n\n\n\n\n\nPour faciliter l’ouverture et l’enregistrement du fichier sous windows sans avoir à se promener dans l’explorateur de fichiers, on peut enregistrer la localisation du répertoire user avec une macro de type global, ici appelée user, et l’ouvrir rapidement avec l’invite de commande windows sous Stata (! ou shell).\nAffectation du répertoire user dans une macro:\n\nglobal user \"C:/Users/nom_user/\"\n\nOuverture du fichier profile.do avec l’invite de commande:\n\n! $user/profile.do\n\n\n\n2 Exemples\nLes quelques exemples de configurations qui suivent sont forcément orientés vers mon propre usage.\n\nadoplusRépertoire temporaireLog automatiqueCommandes de type setGraphiquesPython\n\n\nChangement de la localisation du répertoire où sont enregistrées les commandes externes. Il est préférable de les localiser dans un lecteur autre que le lecteur C:\n\nsysdir set PLUS \"D:/D/ado/plus\"\nsysdir set PERSONAL \"D:/D/ado/personal\"\n\n\n\nOn peut créer un répertoire qui fera office de répertoire d’enregistrement par défaut des fichiers, et affecter les opérations d’ouvertures et de sauvegardes dans ce répertoire.\n\n* Après création du répertoire stata_temp\ncd \"D:\\D\\stata_temp\\\"\n\nC’est très optionnel: on peut demander à Stata d’afficher à l’ouverture le contenu de ce répertoire\n\nnoisily display as txt    \"------------------------------------\"\nnoisily display as result \"  Contenu du repertoire stata_temp  \"\nnoisily display as txt    \"------------------------------------\"\nnoisily dir \"D:/D/stata_temp/\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on change dans un programme le répertoire d’affectation par défaut avec cd, ce répertoire stata_temp ne sera plus reconnu comme répertoire par défaut.\nPour palier ce problème on peut affecter une macro à la localisation de ce répertoire.\n\nglobal tmp \"D:/D/stata_temp/\"\n\n\ncd \"path/mon_projet\"  \n\nuse base, clear\nkeep if x==1\nsave $tmp/base_x1, replace\n\nCette solution comporte néanmoins des limites lorsque le programme est utilisé par plusieurs personnes.\n\n\nLa plus utile de toutes les configurations décrites ici.\nAu préalable, je conseille de créer un répertoire d’enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de stat_temp appelé tout simplement log.\n\ncapture log close statalog\nlocal cdt = \"`c(current_date)'\"\nlocal cdt: subinstr local cdt \" \" \"-\", all\nlocal cti = \"`c(current_time)'\"\nlocal cti: subinstr local cti \":\" \".\", all\nlocal statalogname \"statalog_`cdt'_`cti'.log\"\n\nlog using \"$user/stata_temp/log/`statalogname'\" , text name(statalog)\n\nPour le chemin d’accès, j’utilise le répertoire user enregistré sous forme d’une macro (voir plus haut).\nDans ce répertoire sont enregistrés tous les log de session depuis le 1er février 2022.\n\n\n\n\n\n\n\n\n\nIl n’est pas nécessaire d’ajouter l’option permanently comme le fichier profile est chargé à chaque ouverture de session.\nEnsemble des commandes préfixées par set: help set\n\n\nExemple 1: nombre de décimales reportées dans l’output d’une régression avec set cformats (coef, se et bornes ci), set sformats (statistique du test) et set pformats (p-value).\nSi on souhaite fixer le nombre de décimale pour l’ensemble des statistiques à 2\n\nset cformats %9.2f   // max longueur =9\nset sformats %9.2f   // max longueur =8\nset pformats %9.2f   // max longueur =5\n\nExemple 2: déblocage du défilement de l’output\n\nset more off\n\n\n\nDe nouveau avec une commande de type set on peut dans son fichier profile.do changer le thème par défaut avec set scheme nom_scheme.\nJ’ai maintenant pour (bonne) habitude d’utiliser grstyle de Ben Jann (présentation dans la formation dédiée aux graphiques: https://mthevenin.github.io/stata_graphiques/formation32.html#grstyle-de-b.jann).\nSelon l’humeur du moment, on peut générer un thème graphique visuellement bien plus qualitatif que les thèmes usines de Stata, avec seulement quelques arguments.\n\ngrstyle init\ngrstyle set imesh\ngrstyle set legend 11, nobox\ngrstyle set color tableau\n\nPenser à installer les packafes grstyle** et colorpalette avant.\n\n\nEmpêcher le bug graphique qui fait planter Stata avec Anaconda/miniconda\nL’utilisation de conda - Anaconda ou miniconda - n’est pas recommandé pour exécuter du code python dans un programme Stata. Pour preuve, sans les quelques lignes de codes qui suiven, l’exécution d’un graphique utilisant matplotlib risque de faire crasher la session Stata. C’est très désagréable. Plutôt que d’insérer ce code dans le programme, il est préférable de le mettre une bonne fois pour toute dans le profile.do si python est utilisé via conda. Mieux vaut vérifier la localisation exacte du répertoire plugins, je ne sais pas si le chemin qui suit vaut pour toutes les installation de miniconda/anaconda.\n\npython:\nimport os\nos.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\nend\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLa section qui suit met a disposition mon fichier profile.do. Tout est mis en ligne de commentaire, il suffit de retirer la balise * et de modifier les chemins si nécessaire."
  },
  {
    "objectID": "profile/profile2.html",
    "href": "profile/profile2.html",
    "title": "Exemple profile.do",
    "section": "",
    "text": "**************************\n* profile.do Ined        *\n* M.Thevenin Ined-SMS    *\n**************************\n\n/* \n- Copier le programme ou une partie selon les besoins danx un .do\n- Désactiver les zônes de commentaire *\n- Enregistrer le fichier profile.do dans le répertoire unser\n- Seulement ici les paramètres que j'utilise. On peut, bien évidemment, en ajouter d'autres\n*/  \n  \n*****************************\n* ado + et personal dans D: *\n***************************** \n\n/* modifier les chemin si nécessaire */  \n  \n* sysdir set PLUS \"D:/D/ado/plus\"\n* sysdir set PERSONAL \"D:/D/ado/personal\"\n\n****************\n** STATA_TEMP **\n****************\n\n/* Créer un répertoire, pas forcément du même nom que celui ci et modifier les chemin */  \n  \n* cd \"D:\\D\\stata_temp\\\"\n\n*************************************************\n* affichage du contenu du repertoire stata_temp *\n*************************************************\n\n* noisily display as txt    \"------------------------------------\"\n* noisily display as result \"  Contenu du repertoire stata_temp  \"\n* noisily display as txt    \"------------------------------------\"\n* noisily dir \"D:/D/stata_temp/\"\n\n\n**************************************************\n* chargement du répertoire  $tmp dans stata_temp *\n**************************************************\n\n/* attention si plusieurs utilisateurs d'un même programme, le chemin de $tmp risque de ne pas être reconnu */\n\n* global tmp \"D:/D/stata_temp/\"\n\n\n\n\n******************************************\n* Creation automatique d'un fichier .log *\n******************************************\n\n/* changer le chemin à l'avant dernière ligne: log using.... */\n\n* capture log close statalog\n* local cdt = \"`c(current_date)'\"\n* local cdt: subinstr local cdt \" \" \"-\", all\n* local cti = \"`c(current_time)'\"\n* local cti: subinstr local cti \":\" \".\", all\n* local statalogname \"statalog_`cdt'_`cti'.log\"\n\n* noisily display \"Nom du log: `statalogname'\"\n*  log using \"D:/D/stata_temp/log/`statalogname'\" , text name(statalog)\n*  noisily display \"\"\n\n\n*****************\n* R source path *\n*****************\n\n* global Rterm_path `\"C:\\Program Files\\R\\R-4.1.2\\bin\\R.exe\"'\n\n* global Rterm_options `\"--slave --vanilla --args  \"`tf1'\" \"`tf2'\" \"'\n\n\n***************************************************\n* supprimer le blocage du défilement  de l'output *\n***************************************************\n\n* set more off\n\n*******************************\n* output regression           *\n*******************************\n\n/* nombre de decimales =3 */\n\n* set cformat %9.3f\n\n/* garder baselevel*/\n\n*set showbaselevels on\n\n*******************************\n*      graphique              *\n*******************************\n\n/* Installer au préalab grstyle et colorpalette */\n\n* grstyle init\n* grstyle set imesh\n* grstyle set legend 11, nobox\n* grstyle set color tableau\n\n\n*******************************\n*      python                 *\n*******************************\n\n/* chargement de l'exécutable */\n\n* capture  set python_exec  \"C:/Users/thevenin_m/AppData/Local/Programs/Python/Python310/python.exe\"\n\n\n****** plugin miniconda\n* python:\n* import os\n* os.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\n* end"
  },
  {
    "objectID": "profile.html#adoplus",
    "href": "profile.html#adoplus",
    "title": "Principe",
    "section": "2.1 adoplus",
    "text": "2.1 adoplus\n\nsysdir set PLUS \"D:/D/ado/plus\"\nsysdir set PERSONAL \"D:/D/ado/personal\""
  },
  {
    "objectID": "profile.html#répertoire-temporaire",
    "href": "profile.html#répertoire-temporaire",
    "title": "Principe",
    "section": "2.2 Répertoire temporaire",
    "text": "2.2 Répertoire temporaire\nWarning: multi utilisation d’un programme\n\ncd \"D:\\D\\stata_temp\\\"\n\n\nnoisily display as txt    \"------------------------------------\"\nnoisily display as result \"  Contenu du repertoire stata_temp  \"\nnoisily display as txt    \"------------------------------------\"\nnoisily dir \"D:/D/stata_temp/\"\n\nWarning pour ce qui suit: multi utilisateurs d’un programme\n\nglobal tmp \"D:/D/stata_temp/\""
  },
  {
    "objectID": "profile.html#log-automatique",
    "href": "profile.html#log-automatique",
    "title": "Principe",
    "section": "2.3 Log automatique",
    "text": "2.3 Log automatique\nLa plus utile de toutes les configurations décrites ici.\nAu préalable, je conseille de créer un répertoire d’enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de stat_temp appelé tout simplement log.\n[image]\n\ncapture log close statalog\nlocal cdt = \"`c(current_date)'\"\nlocal cdt: subinstr local cdt \" \" \"-\", all\nlocal cti = \"`c(current_time)'\"\nlocal cti: subinstr local cti \":\" \".\", all\nlocal statalogname \"statalog_`cdt'_`cti'.log\"\n\nlog using \"$user/log/`statalogname'\" , text name(statalog)"
  },
  {
    "objectID": "profile.html#commandes-de-type-set",
    "href": "profile.html#commandes-de-type-set",
    "title": "Principe",
    "section": "2.4 Commandes de type set",
    "text": "2.4 Commandes de type set\nRemarque: les commandes dédiées à Python\n\n\nIl n’est pas nécessaire d’ajouter l’option permanently comme le fichier profile est chargé à chaque ouverture de session.\nEnsemble des commandes de type set: help set\n\n\nExemple: nombre de décimales reportées dans l’output d’une régression avec set cformats (coef, se et bornes ci), set sformats (statistique du test) et set pformats (p-value) .\nSi on souhaite fixer le nombre de décimale pour l’ensemble des statistiques à 2\n\nset cformats %9.2f   // max longueur =9\nset sformats %9.2f   // max longueur =8\nset pformats %9.2f   // max longueur =5"
  },
  {
    "objectID": "profile.html#graphiques",
    "href": "profile.html#graphiques",
    "title": "Principe",
    "section": "2.5 Graphiques",
    "text": "2.5 Graphiques"
  },
  {
    "objectID": "R/marginaleffect/marginaleffect.html#modèle-logit-binaire",
    "href": "R/marginaleffect/marginaleffect.html#modèle-logit-binaire",
    "title": "Effets marginaux",
    "section": "2.1 Modèle logit (binaire)",
    "text": "2.1 Modèle logit (binaire)\nEstimation du modèle\n\nfit = glm(highbp ~ female + black + bmi, family=binomial, data=df)\n\nCalcul des AME\n\nStata - marginsR - marginsR - marginaleffects\n\n\n\nqui use \"D:\\D\\Marc\\SMS\\STATA INED\\Programmation\\R\\marginaleffect\\nhanes.dta\" , clear\nqui logit highbp female black bmi \nmargins, dydx(*) \n\n> , clear\n\n\n\nAverage marginal effects                                Number of obs = 10,335\nModel VCE: OIM\n\nExpression: Pr(highbp), predict()\ndy/dx wrt:  female black bmi\n\n------------------------------------------------------------------------------\n             |            Delta-method\n             |      dy/dx   std. err.      z    P>|z|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n      female |     -0.087      0.009    -9.65   0.000       -0.105      -0.069\n       black |      0.045      0.015     3.02   0.003        0.016       0.074\n         bmi |      0.032      0.001    36.31   0.000        0.030       0.034\n------------------------------------------------------------------------------\n\n\n\n\n\name = margins(fit)\nsummary(ame)\n\n factor     AME     SE       z      p   lower   upper\n  black  0.0450 0.0149  3.0209 0.0025  0.0158  0.0742\n    bmi  0.0321 0.0009 36.3104 0.0000  0.0304  0.0338\n female -0.0871 0.0090 -9.6499 0.0000 -0.1048 -0.0694\n\n\n\n\n\name = marginaleffects(fit)\nsummary(ame)\n\n    Term   Effect Std. Error z value   Pr(>|z|)    2.5 %   97.5 %\n1 female -0.08710  0.0090267  -9.650 < 2.22e-16 -0.10480 -0.06941\n2  black  0.04498  0.0148897   3.021  0.0025201  0.01580  0.07416\n3    bmi  0.03212  0.0008831  36.371 < 2.22e-16  0.03039  0.03385\n\nModel type:  glm \nPrediction type:  response"
  },
  {
    "objectID": "R/marginaleffect/marginaleffect.html#modèle-ordinal-odds-proportionnels",
    "href": "R/marginaleffect/marginaleffect.html#modèle-ordinal-odds-proportionnels",
    "title": "Effets marginaux",
    "section": "2.2 Modèle ordinal (odds proportionnels)",
    "text": "2.2 Modèle ordinal (odds proportionnels)\nSeulement avec margineffects pour R\n\nStata - marginsR - margineffects\n\n\n\n\n\n\n\n\nqui ologit hlthstat female black bmi \nmargins, dydx(*) \n\nAverage marginal effects                                Number of obs = 10,335\nModel VCE: OIM\n\ndy/dx wrt: female black bmi\n\n1._predict: Pr(hlthstat==1), predict(pr outcome(1))\n2._predict: Pr(hlthstat==2), predict(pr outcome(2))\n3._predict: Pr(hlthstat==3), predict(pr outcome(3))\n4._predict: Pr(hlthstat==4), predict(pr outcome(4))\n5._predict: Pr(hlthstat==5), predict(pr outcome(5))\n\n------------------------------------------------------------------------------\n             |            Delta-method\n             |      dy/dx   std. err.      z    P>|z|     [95% conf. interval]\n-------------+----------------------------------------------------------------\nfemale       |\n    _predict |\n          1  |  -.0235471   .0062116    -3.79   0.000    -.0357216   -.0113726\n          2  |  -.0089765   .0023674    -3.79   0.000    -.0136165   -.0043365\n          3  |   .0093555   .0024826     3.77   0.000     .0044896    .0142214\n          4  |   .0145253   .0038254     3.80   0.000     .0070276    .0220229\n          5  |   .0086428   .0022926     3.77   0.000     .0041493    .0131363\n-------------+----------------------------------------------------------------\nblack        |\n    _predict |\n          1  |  -.1206233   .0102194   -11.80   0.000    -.1406529   -.1005936\n          2  |  -.0459833   .0039391   -11.67   0.000    -.0537038   -.0382628\n          3  |   .0479248   .0042586    11.25   0.000     .0395781    .0562716\n          4  |   .0744078   .0062401    11.92   0.000     .0621774    .0866383\n          5  |   .0442739    .003994    11.08   0.000     .0364457    .0521021\n-------------+----------------------------------------------------------------\nbmi          |\n    _predict |\n          1  |  -.0088687   .0006413   -13.83   0.000    -.0101257   -.0076117\n          2  |  -.0033809     .00025   -13.52   0.000    -.0038709   -.0028908\n          3  |   .0035236   .0002694    13.08   0.000     .0029956    .0040517\n          4  |   .0054707   .0003941    13.88   0.000     .0046983    .0062432\n          5  |   .0032552   .0002564    12.69   0.000     .0027526    .0037578\n------------------------------------------------------------------------------\n\n\n\n\nJ’utilise la fonction clm du package ordinal pour estimer le modèle.\n\nfit = clm(hlthstat ~ female + black + bmi, family=binomial, data=df)\name = marginaleffects(fit)\nsummary(ame)\n\n   Group   Term    Effect Std. Error z value   Pr(>|z|)     2.5 %    97.5 %\n1      1 female -0.023547  0.0062114  -3.791 0.00015008 -0.035721 -0.011373\n2      1  black -0.120621  0.0102190 -11.804 < 2.22e-16 -0.140650 -0.100592\n3      1    bmi -0.008868  0.0006404 -13.848 < 2.22e-16 -0.010123 -0.007613\n4      2 female -0.008977  0.0023676  -3.791 0.00014978 -0.013617 -0.004336\n5      2  black -0.045985  0.0039405 -11.670 < 2.22e-16 -0.053709 -0.038262\n6      2    bmi -0.003381  0.0002502 -13.517 < 2.22e-16 -0.003872 -0.002891\n7      3 female  0.009355  0.0024824   3.769 0.00016409  0.004490  0.014221\n8      3  black  0.047923  0.0042588  11.252 < 2.22e-16  0.039575  0.056270\n9      3    bmi  0.003523  0.0002680  13.145 < 2.22e-16  0.002998  0.004048\n10     4 female  0.014525  0.0038255   3.797 0.00014646  0.007028  0.022023\n11     4  black  0.074409  0.0062407  11.923 < 2.22e-16  0.062177  0.086640\n12     4    bmi  0.005471  0.0003941  13.883 < 2.22e-16  0.004699  0.006243\n13     5 female  0.008643  0.0022928   3.770 0.00016351  0.004149  0.013137\n14     5  black  0.044275  0.0039941  11.085 < 2.22e-16  0.036447  0.052104\n15     5    bmi  0.003256  0.0002571  12.660 < 2.22e-16  0.002752  0.003760\n\nModel type:  clm \nPrediction type:  prob \n\n\n\n\n\nNiveau output cela se complique pour sélectionner un ou un sous ensemble d’outcome…On va y arriver."
  },
  {
    "objectID": "R/marginaleffect/marginaleffect.html#modèle-multinomial-logistique",
    "href": "R/marginaleffect/marginaleffect.html#modèle-multinomial-logistique",
    "title": "Effets marginaux",
    "section": "2.3 Modèle multinomial (logistique)",
    "text": "2.3 Modèle multinomial (logistique)\nRemarque: l’estimation des AME avec un modèle multinomial de type stereotype logit model, adapté aux variables à structure ordinale n’est pas possible avec marginaleffects (modèle estimé avec le pck VGAM). Avec Stata, il est estimé avec la commande slogit.\n\nStata - marginsR - marginaleffects\n\n\n\n\n\n\n\n\nqui mlogit hlthstat female black bmi \nmargins, dydx(*) \n\nAverage marginal effects                                Number of obs = 10,335\nModel VCE: OIM\n\ndy/dx wrt: female black bmi\n\n1._predict: Pr(hlthstat==Excellent), predict(pr outcome(1))\n2._predict: Pr(hlthstat==Very_good), predict(pr outcome(2))\n3._predict: Pr(hlthstat==Good), predict(pr outcome(3))\n4._predict: Pr(hlthstat==Fair), predict(pr outcome(4))\n5._predict: Pr(hlthstat==Poor), predict(pr outcome(5))\n\n------------------------------------------------------------------------------\n             |            Delta-method\n             |      dy/dx   std. err.      z    P>|z|     [95% conf. interval]\n-------------+----------------------------------------------------------------\nfemale       |\n    _predict |\n          1  |  -.0435641   .0082163    -5.30   0.000    -.0596679   -.0274604\n          2  |   .0088463    .008501     1.04   0.298    -.0078154    .0255081\n          3  |   .0233105   .0088631     2.63   0.009     .0059391    .0406819\n          4  |   .0261863   .0072332     3.62   0.000     .0120095     .040363\n          5  |   -.014779   .0050284    -2.94   0.003    -.0246345   -.0049235\n-------------+----------------------------------------------------------------\nblack        |\n    _predict |\n          1  |  -.1107437   .0162243    -6.83   0.000    -.1425427   -.0789447\n          2  |  -.0668401   .0155164    -4.31   0.000    -.0972515   -.0364286\n          3  |   .0635409   .0141258     4.50   0.000     .0358548     .091227\n          4  |    .060461   .0105785     5.72   0.000     .0397274    .0811946\n          5  |   .0535818   .0065457     8.19   0.000     .0407524    .0664112\n-------------+----------------------------------------------------------------\nbmi          |\n    _predict |\n          1  |  -.0100225   .0009394   -10.67   0.000    -.0118636   -.0081814\n          2  |  -.0026028   .0008992    -2.89   0.004    -.0043652   -.0008403\n          3  |   .0037662   .0008894     4.23   0.000     .0020231    .0055094\n          4  |    .006369   .0006729     9.46   0.000     .0050501    .0076879\n          5  |   .0024901   .0004731     5.26   0.000     .0015627    .0034174\n------------------------------------------------------------------------------\n\n\n\n\n\nfit = multinom(hlthstat ~ female + black + bmi,  data=df)\n\n# weights:  25 (16 variable)\ninitial  value 16633.540825 \niter  10 value 15780.594333\niter  20 value 15554.684483\nfinal  value 15554.562787 \nconverged\n\name = marginaleffects(fit)\nsummary(ame)\n\n   Group   Term    Effect Std. Error z value   Pr(>|z|)     2.5 %     97.5 %\n1      1 female -0.043564  0.0082163  -5.302 1.1446e-07 -0.059667 -0.0274602\n2      1  black -0.110741  0.0162240  -6.826 8.7472e-12 -0.142539 -0.0789423\n3      1    bmi -0.010022  0.0009399 -10.662 < 2.22e-16 -0.011864 -0.0081797\n4      2 female  0.008846  0.0085013   1.041  0.2980980 -0.007816  0.0255079\n5      2  black -0.066842  0.0155161  -4.308 1.6480e-05 -0.097253 -0.0364309\n6      2    bmi -0.002603  0.0009004  -2.891  0.0038367 -0.004368 -0.0008385\n7      3 female  0.023310  0.0088633   2.630  0.0085410  0.005938  0.0406815\n8      3  black  0.063540  0.0141261   4.498 6.8587e-06  0.035853  0.0912261\n9      3    bmi  0.003766  0.0008902   4.230 2.3339e-05  0.002021  0.0055105\n10     4 female  0.026186  0.0072335   3.620  0.0002945  0.012009  0.0403633\n11     4  black  0.060460  0.0105788   5.715 1.0957e-08  0.039726  0.0811939\n12     4    bmi  0.006369  0.0006743   9.446 < 2.22e-16  0.005048  0.0076909\n13     5 female -0.014778  0.0050287  -2.939  0.0032963 -0.024634 -0.0049216\n14     5  black  0.053583  0.0065455   8.186 2.6955e-16  0.040754  0.0664120\n15     5    bmi  0.002490  0.0004746   5.247 1.5489e-07  0.001560  0.0034202\n\nModel type:  multinom \nPrediction type:  probs"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#ressources",
    "href": "R/statamarkdown/statamarkdown_html.html#ressources",
    "title": "Statamarkdown [RStudio]",
    "section": "2.1 Ressources",
    "text": "2.1 Ressources\n\nDoug Hemken\nSite tutoriel\nDépôt github"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#installation",
    "href": "R/statamarkdown/statamarkdown_html.html#installation",
    "title": "Statamarkdown [RStudio]",
    "section": "2.2 Installation",
    "text": "2.2 Installation\nInstallation du package\n\nlibrary(devtools)\ninstall_github(\"hemken/Statamarkdown\")\n\nChargement de l’exécutable Stata\nLe code R qui suis est à utiliser systématiquement dans chaque document.\n```{r, echo=FALSE, message=FALSE}\nlibrary(Statamarkdown)\nstataexe <- \"C:/Program Files/Stata17/StataSE-64.exe\"\nknitr::opts_chunk$set(engine.path=list(stata=stataexe))\n```"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#exemple",
    "href": "R/statamarkdown/statamarkdown_html.html#exemple",
    "title": "Statamarkdown [RStudio]",
    "section": "2.3 Exemple",
    "text": "2.3 Exemple\n\n2.3.1 Suite de commandes dans un bloc\n\n\n\n```{Stata}\n\nsysuse auto, clear\ndescribe\nsum price, d\n\n\n(1978 automobile data)\n\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n\n\n\n2.3.2 Suite de commandes dans plusieurs blocs\nSi on exécute la suite du programme dans un autre bloc:\n\n\n\n```{Stata}\n\nregress price mpg turn if foreign==1\n\n\n      Source |       SS           df       MS      Number of obs   =        22\n-------------+----------------------------------   F(2, 19)        =      8.51\n       Model |  68197168.3         2  34098584.2   Prob > F        =    0.0023\n    Residual |  76166044.4        19  4008739.18   R-squared       =    0.4724\n-------------+----------------------------------   Adj R-squared   =    0.4169\n       Total |   144363213        21   6874438.7   Root MSE        =    2002.2\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -164.397     84.536    -1.94   0.067     -341.332      12.538\n        turn |    607.204    372.318     1.63   0.119     -172.067    1386.475\n       _cons |  -1.10e+04  14587.768    -0.76   0.458    -4.16e+04   19489.258\n------------------------------------------------------------------------------\n\n\nCela ne marche pas.\nOn doit ajouter collectcode=TRUE en entrée du premier bloc: {Stata, collectcode=TRUE }\n```{stata,  collectcode=TRUE }\nsysuse auto, clear\n```\n\n\n\n```{Stata, collectcode=TRUE }\n\nsysuse auto, clear\n\n\n(1978 automobile data)\n\n\nPuis\n\n\n\n```{Stata}\n\nregress price mpg turn if foreign==1\n\n\n      Source |       SS           df       MS      Number of obs   =        22\n-------------+----------------------------------   F(2, 19)        =      8.51\n       Model |  68197168.3         2  34098584.2   Prob > F        =    0.0023\n    Residual |  76166044.4        19  4008739.18   R-squared       =    0.4724\n-------------+----------------------------------   Adj R-squared   =    0.4169\n       Total |   144363213        21   6874438.7   Root MSE        =    2002.2\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n         mpg |   -164.397     84.536    -1.94   0.067     -341.332      12.538\n        turn |    607.204    372.318     1.63   0.119     -172.067    1386.475\n       _cons |  -1.10e+04  14587.768    -0.76   0.458    -4.16e+04   19489.258\n------------------------------------------------------------------------------"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#commandes-externes",
    "href": "R/statamarkdown/statamarkdown_html.html#commandes-externes",
    "title": "Statamarkdown [RStudio]",
    "section": "2.4 Commandes externes",
    "text": "2.4 Commandes externes\nSi vous avez modifié l’emplacement du répertoire adoplus et que l’appel à ce répertoire est dans un fichier profile.do (tutoriel), Statamarkdown ne sera pas capable d’exécuter les commande externes.\nLa solution est simple: il suffit de coller votre fichier profile.do, normalement dans votre répertoire user, dans le répertoire du document que vous êtes en train de rédiger."
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#inserer-un-graphique",
    "href": "R/statamarkdown/statamarkdown_html.html#inserer-un-graphique",
    "title": "Statamarkdown [RStudio]",
    "section": "2.5 Inserer un graphique",
    "text": "2.5 Inserer un graphique\nLe graphique exporter avec graph export. Il est conseillé de l’enregistrer dans le même répertoire que le document généré ou dans un sous répertoire. Pour l’insérer, il suffit d’utiliser l’intégration standard avec markdown: ![nom graph](nom_graph.png){option} s’il est dans le même répertoire ou ![nom graph](img/nom_graph.png){option} s’il se trouve dans un sous répertoire, par exemple img\n\n\n\n```{Stata, message=FALSE}\n\nlocal mopts mc(%80) mlc(black) mlw(*.2) jitter(4)\n\ntw scatter price mpg if !foreign, `mopts' /// \n|| scatter price mpg if  foreign, `mopts' /// \n|| , legend(order(1 \"Domestic\" 2 \"foreign\") region(color(%0)) pos(11)) /// \n     ylabel(, angle(0))  ///\n     title(\"Graphique avec Statamarkown\" \"dans un document Quarto\", pos(11))\n\nqui graph export \"D:\\D\\Marc\\SMS\\STATA INED\\Programmation\\R\\statamarkdown\\g1.png\", replace \n\n\n\n\n\n\n\n\nDirectement dans le document\n\n![titre graph](g1.png){width=80%}{fig-align=\"left\"}"
  },
  {
    "objectID": "R/statamarkdown/statamarkdown_html.html#résultat-de-régression-avec-collect",
    "href": "R/statamarkdown/statamarkdown_html.html#résultat-de-régression-avec-collect",
    "title": "Statamarkdown [RStudio]",
    "section": "2.6 Résultat de régression avec collect",
    "text": "2.6 Résultat de régression avec collect\n\nSe reporter à la courte présention de collect (lien) introduite avec la version 17 de Stata. On prendra le premier exemple.\nPour ce document html on utilisera le package R htmltools pour insérer un tableau générer avec collect et exporter avec collect export en html. Pour la version pdf, le tableau sera de type Latex.\n\nInstallation de htmltools (R)\n\n\n\n```{r}\n\ninstall.packages(\"htmltools\")\n\n\nChargement de htmltools (R)\n\n\n\n```{r, message=FALSE}\n\nlibrary(htmltools)\n\n\n\n2.6.1 Programme Stata\n\n\n\n```{Stata, message=FALSE, warning=FALSE}\n\n\nqui use https://www.stata-press.com/data/r17/nhanes2l, clear\n\nqui collect clear\nqui collect use multimod, replace\n\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region i.sex\n\nqui collect label values cmdset 1 \"Modèle 1\" 2 \"Modèle 2\" \n\nqui collect export \"D:/D/Marc/SMS/STATA INED/Programmation/R/statamarkdown/ex1\", as(html)     replace\n\n\n\n\n\n\n\n2.6.2 Insertion du tableau avec htmltools\nDirectement dans un bloc de code de code:\n```{r}\n#| tbl-cap: \"Régression générée avec collect\"\nhtmltools::includeHTML(\"D:/D/Marc/SMS/STATA INED/Programmation/R/statamarkdown/ex1.html\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRégression générée avec collect\n  \n    \n      \n       \n      \n    \n    \n      \n      \n    \n    \n      \n      Modèle 1\n      \n    \n    \n      \n      Modèle 2\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      \n    \n    \n      \n      Coefficient\n      \n    \n    \n      \n      Std. error\n      \n    \n    \n      \n      p-value\n      \n    \n    \n      \n      Coefficient\n      \n    \n    \n      \n      Std. error\n      \n    \n    \n      \n      p-value\n      \n    \n  \n  \n    \n      \n      Age group\n      \n    \n    \n      \n      20–29\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      30–39\n      \n    \n    \n      \n      2.891\n      \n    \n    \n      \n      0.664\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      2.917\n      \n    \n    \n      \n      0.661\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      40–49\n      \n    \n    \n      \n      9.580\n      \n    \n    \n      \n      0.716\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      9.584\n      \n    \n    \n      \n      0.713\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      50–59\n      \n    \n    \n      \n      18.324\n      \n    \n    \n      \n      0.713\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      18.384\n      \n    \n    \n      \n      0.710\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      60–69\n      \n    \n    \n      \n      24.184\n      \n    \n    \n      \n      0.574\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      24.193\n      \n    \n    \n      \n      0.571\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      70+\n      \n    \n    \n      \n      30.851\n      \n    \n    \n      \n      0.780\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      30.958\n      \n    \n    \n      \n      0.777\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n      Region\n      \n    \n    \n      \n      NE\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      MW\n      \n    \n    \n      \n      -0.023\n      \n    \n    \n      \n      0.595\n      \n    \n    \n      \n      0.969\n      \n    \n    \n      \n      0.033\n      \n    \n    \n      \n      0.592\n      \n    \n    \n      \n      0.956\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      S\n      \n    \n    \n      \n      -0.303\n      \n    \n    \n      \n      0.591\n      \n    \n    \n      \n      0.608\n      \n    \n    \n      \n      -0.227\n      \n    \n    \n      \n      0.588\n      \n    \n    \n      \n      0.699\n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      W\n      \n    \n    \n      \n      -0.777\n      \n    \n    \n      \n      0.601\n      \n    \n    \n      \n      0.196\n      \n    \n    \n      \n      -0.745\n      \n    \n    \n      \n      0.599\n      \n    \n    \n      \n      0.213\n      \n    \n  \n  \n    \n      \n      Sex\n      \n    \n    \n      \n      Male\n      \n    \n    \n      \n      \n    \n    \n      \n      \n    \n    \n      \n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      \n    \n  \n  \n    \n      \n       \n      \n    \n    \n      \n      Female\n      \n    \n    \n      \n      \n    \n    \n      \n      \n    \n    \n      \n      \n    \n    \n      \n      -4.015\n      \n    \n    \n      \n      0.402\n      \n    \n    \n      \n      0.000\n      \n    \n  \n  \n    \n      \n      Intercept\n      \n    \n    \n      \n      117.632\n      \n    \n    \n      \n      0.589\n      \n    \n    \n      \n      0.000\n      \n    \n    \n      \n      119.672\n      \n    \n    \n      \n      0.621\n      \n    \n    \n      \n      0.000\n      \n    \n  \n\n\n\n\n\n\nUn titre à été ajouté avec #| tbl-cap: \"Régression générée avec collect\""
  },
  {
    "objectID": "R.html",
    "href": "R.html",
    "title": "Stata et R",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 7, 2022\n\n\nEffets marginaux\n\n\nMarc Thevenin\n\n\n\n\nSep 30, 2022\n\n\nStatamarkdown [RStudio]\n\n\nMarc Thevenin\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "speedup/gtools.html",
    "href": "speedup/gtools.html",
    "title": "Gtools",
    "section": "",
    "text": "1 Le package\nAuteur: Mauricio Caceres Bravo\nInstallation:\n\nhttps://gtools.readthedocs.io/en/latest/index.html\nhttps://github.com/mcaceresb/stata-gtools\n\nLes Benchmarks réalisés par l’auteur ont été exécutés avec Stata MP. J’ai fait tourné son programme (lien) avec Stata 17 SE sous windows. Les résultats sont les suivants:\n\n     Versus | Native | gtools | % faster \n ---------- | ------ | ------ | -------- \n   collapse |   1.53 |   1.25 |   18.51% \n   collapse |   1.68 |   1.17 |   29.91% \n    reshape |  31.63 |   6.90 |   78.19% \n    reshape |  60.26 |  10.95 |   81.83% \n      xtile |  17.74 |   1.12 |   93.67% \n     pctile |  18.20 |   0.77 |   95.76% \n       egen |   2.13 |   0.64 |   69.77% \n   contract |   4.52 |   1.74 |   61.54% \n       isid |  18.71 |   0.68 |   96.35% \n duplicates |  10.07 |   0.86 |   91.42% \n   levelsof |   2.75 |   0.44 |   83.94% \n   distinct |   7.24 |   0.44 |   93.88% \n     winsor |  16.09 |   0.65 |   95.99% \n sum_detail |  17.09 |   1.22 |   92.86% \n    tabstat |  11.18 |   0.67 |   94.03% \n range_stat |  67.37 |   2.82 |   95.81% \n\nPour mon propre benchmark, plus gourmand (10 variables quanti et une variable binaire), les données sont générées de la manière suivante:\nCréation de la base de données (N=10M)\n\nclear \nset obs 10000000\ntempvar x\ngen `x' = runiform()\ngen g = `x'>.5\n\nforv i=1/10 {\ngen y`i' = rnormal()    \n    \ngen id = _n \n}\n\nPour récupérer les durées d’exécution, j’utilise un fragment du programme de M.Caceres. Les commandes sont exécutées avec le prefixe bench 1:\n\ncapture program drop bench\nprogram bench\n    gettoken timer call: 0,    p(:)\n    gettoken colon call: call, p(:)\n    cap timer clear `timer'\n    timer on `timer'\n    `call'\n    timer off `timer'\n    qui timer list\n    c_local r`timer' `=r(t`timer')'\nend\n\n\nLes tests sont réalisés avec les équivalents de xtile, reshape, collapseet levelsof. L’équivalent à tabstat sera ajouté rapidement.\nPour information, les programmes des fonctions R sont également rapidement décris. Les durées d’exécution ont été récupérés avec la librairie tictoc.\n\n\n\n2 gquantiles\n\nCommande usine xtile et pctile (help xtile). Le benchmark est seulement effectué pour xtile (affectation d’un quantile à une valeur) qui est plus gourmant que pctile (calcul et report des quantiles).\nEn termes d’options, l’autre intérêt de gquantile est de stratifier l’opération avec l’option by().\n\nSyntaxe courte\n\n\n*xtile\ngquantiles nouvelle_var = var1 , xtile  nq(#) [by(var2)]\n\n*pctile\ngquantiles nouvelle_var = var1 , pctile nq(#) [by(var2)] \n\nProgramme\n\n* Fonction bench (voir plus haut)\n\nqui forv i=1/10 {\n  \n** XTILE\n  \ntempvar yg`i'\nbench 1:   xtile `yg`i'' = y`i' ,  nq(10) \nlocal rt1 = `rt1' + `r1' \n  }\ndi \"XTILE runtime =\" `rt1'\n\n*** GQUANTILES\nqui forv i=1/10 {\ncapt drop  `yg`i''  \ntempvar yg`i'\nbench 1: gquantiles `yg`i'' = y`i' , xtile  nq(10) \nlocal rt2 = `rt2' + `r1'     \n   }\ndi  \"GQUANTILES runtime =\" `rt2'\n\nRésultats (secondes)\n\n\n\nStata\n10k\n100k\n1M\n10M\n\n\n\n\nxtile\n0.12\n1.65\n16.03\n196.56\n\n\ngquantiles\n0.06\n0.22\n1.24\n14.75\n\n\n\n\n\n\nR\n10k\n100k\n1M\n10M\n\n\n\n\nquantcut\n0.04\n0.24\n2.38\n29.11\n\n\nntile\n0.06\n0.16\n1.54\n15.51\n\n\n\n\n\n\n\n\n\nFonctions R\n\n\n\n\nquantcut\n\nlibrairie gtools\nSyntaxe pour la variable y1: df$gy1=quantcut(df$y1,10)\n\nntile\n\nlibrairie dplyr\nSyntaxe pour la variable y1: df=df %>% mutate(gy1 = ntile(y1, 10))\n\n\n\n\n\n\n3 greshape\n\nNiveau syntaxe peu de différence avec la commande usine, si ce n’est pour les arguments i() et j()\n\ni() = id()\nj() = key()\n\nPour R:\n\nFonction de base reshape.\n\nAvantage: syntaxe très proche de Stata\nInconvénients: temps d’exécution pas optimal. Pour 10M d’observations, j’ai arrêté l’exécution au bout de 10 minutes.\n\nFonctions pivot_longer et pivot_wider de **tydir.\n\n\nSi greshape est nettement plus performant que reshape, il reste nettement en deçà des deux fonctions de la librairie tydir de R.\nProgramme\n\n* Fonction bench (voir plus haut)\n\n**RESHAPE\nqui bench 1: reshape long y, i(id) j(j)\ndi \"RESHAPE LONG runtime =\" `r1'\nqui bench 1: reshape wide y, i(id) j(j)\ndi \"RESHAPE WIDE runtime =\" `r1'\n\n**GRESHAPE\nqui bench 1: greshape long y, by(id) keys(j)\ndi \"GRESHAPE LONG runtime =\" `r1'\nqui bench 1: greshape wide y, by(id) keys(j)\ndi \"GRESHAPE WIDE runtime =\" `r1'\n\nRésultats (secondes)\n\nLongWide\n\n\n\n\n\nStata\n10K\n100k\n1M\n10M\n\n\n\n\nreshape long\n0.14\n1.22\n12.36\n245.18\n\n\ngreshape long\n0.04\n0.21\n3.22\n61.23\n\n\n\n\n\n\nR\n10k\n100k\n1M\n10M\n\n\n\n\nreshape\n0.1\n1.19\n11.9\n///\n\n\npivot_longer\n0.01\n0.12\n0.6\n13.39\n\n\n\n\n\n\n\n\nStata\n10k\n100k\n1M\n10M\n\n\n\n\nreshape wide\n0.37\n2.18\n26.58\n338.10\n\n\ngreshape wide\n0.06\n0.30\n2.79\n55.86\n\n\n\n\n\n\nR\n10k\n100k\n1M\n10M\n\n\n\n\nreshape\n0.37\n3.69\n34.93\n///\n\n\npivot_wider\n0.01\n0.24\n1.98\n38.97\n\n\n\n\n\n\n\n\n\n\n\n\nFonctions R\n\n\n\n\nreshape\n\nInstallé avec R\nLong: long = reshape(gtools, idvar = \"id\", timevar=\"j\", varying = list(2:11), v.names = \"y\", direction = \"long\")\nWide: wide = reshape(long, idvar = \"id\",  timevar=\"j\",  v.names = \"y\", sep = \"\", direction = \"wide\")\n\npivot_longer/pivot_wider\n\nlibrairie tydir\nlong: long = pivot_longer(gtools, cols = starts_with(\"y\"))\nwide: wide = pivot_wider(long, names_from = c(\"name\"), values_from = c(\"value\"))\n\n\n\n\n\n\n4 gcollapse\n\nSyntaxe identique à celle de collapse. Par défaut, c’est également la moyenne qui est calculée.\nAjout d’une option merge replace qui remplace la valeur des observations par l’indicateur séléctionné.\nOn ajouté l’option by() sur la variable g (deux groupes).\n\nProgramme\n\n\n*** COLLAPSE\npreserve\nqui bench 1: collapse  y1-y10,  by(g)\nlocal col `r1'\nrestore\n\n*** GCOLLAPSE\npreserve\nqui bench 1: gcollapse  y1-y10,  by(g)\nlocal gcol `r1' \nrestore\n\ndi \"N=`N\"\ndi \"COLLAPSEruntime =\" `col'\ndi \"GCOLLAPSEruntime =\" `gcol'\n\nRésultats (secondes)\n\n\n\nStata\n10K\n100K\n1M\n10 M\n\n\n\n\ncollapse\n0.007\n0.041\n0.461\n7.846\n\n\ngcollapse\n0.021\n0.049\n0.219\n2.559\n\n\nR\n10K\n100K\n1M\n10 M\n\n\nsummarise\n0.03\n0.06\n0.3\n1.91\n\n\n\nNote: pour Stata le programme exécute preserve/restore, ce qui augmente légèrement un temps d’exécution\n\n\n\n\n\n\nFonction R\n\n\n\n\nsummarise()\n\nlibrairie dplyr\nSyntaxe : collapse= gtools %>%  group_by(g) %>%  summarise(across(y1:y10, ~ mean(.x, na.rm = TRUE)))\n\n\n\n\nProgramme\n\n\n5 gegen\n\nSyntaxe identique à celle d’egen. On a choisi comme fonction la moyenne.\nOn ajouté l’option by() sur la variable g (deux groupes).\n\n\nforv  i=1/10 {\nqui bench 1: egen my`i' = mean(y`i'), by(g)\nlocal egen = `egen' + `r1' \n}\n\ndrop my*\n\nforv  i=1/10 {\nqui bench 1: gegen my`i' = mean(y`i'), by(g)\nlocal gegen = `gegen' + `r1' \n}\n\ndi \"N=`N\"\ndi \"EGEN  runtime =\" `egen'\ndi \"GEGEN runtime =\" `gegen'\n\n\n\n\nStata\n10k\n100k\n1M\n10M\n\n\n\n\negen\n0.23\n0.41\n4.82\n73.6\n\n\ngegen\n0.69\n0.20\n0.83\n8.88\n\n\nR\n10k\n100k\n1M\n10M\n\n\nmutate + mean\n0.03\n0.05\n0.17\n1.74\n\n\n\n\n\n\n\n\n\nFonction R\n\n\n\n\nmutate() associée à la fonction mean\n\nlibrairie dplyr\nSyntaxe :\n\nvar <- c(\"y1\", \"y2\", \"y3\", \"y4\", \"y5\", \"y6\", \"y7\", \"y8\", \"y9\", \"y10\")\ngtools = gtools %>% group_by(g) %>% mutate(across(var, mean, .names = \"m{col}\"))\n\n\n\n\n\n\n\n6 glevelsof\n\n\n\n\n\n\nRappel\n\n\n\n\nLa commande levelsof (help levelsof) permet de récupérer automatiquement les valeurs d’une variable pour les transformer sous forme de macro. Par défaut la macro enregistrée est nommée r(levels), il est possible de l’appeler différemment avec l’option local(). Elle est particulièrement utile en amont d’une opération en boucle de type foreach. La macro générée r(r) permet de récupérer le nombre de valeurs enregistrés, et peut donc être utile pour des instructions en boucle de type forvalue (et évite de programmer une macro avec la fonction word count plus loin).\nLes valeurs sont enregistrées par ordre croissant numérique ou alphabétique selon le type de variable.\n\n\n\nglevelsof\n\nAutorise plusieurs variables. la macro enregistrée concaténera les valeurs et/ou expression avec un séparateur (espace par défaut).\nPermet de trier les valeurs en ordre décroissant en ajoutant - devant le nom de la variable.\n\nbenchmark\n\nBien évidemment, pas de comparaison possible avec R\nProgramme d’origine différent: on va générer une variable qui affecte aléatoirement une lettre de l’alphabet (une version caractère et une version numérique générée avec encode). Le programme a été écrit par Paul Picard sur le forum Statalist (lien)\n\n\nclear\nset obs 10000\nlocal c2use ABCDEFGHIJKLMNPQRSTUVWXYZ\ngen random_string = substr(\"`c2use'\", runiformint(1,length(\"`c2use'\")),1) + ///\n    string(runiformint(0,9)) + ///\n    char(runiformint(65,90)) + ///\n    char(runiformint(65,90)) + ///\n    string(runiformint(0,9)) + ///\n    char(runiformint(65,90))\n\ngen xchar = substr(random_string,1,1)\nencode xchar, gen(xnum)\ndrop random_string\n\nLevelsof :\n\nlevelsof xchar\n\n/*\n`\"A\"' `\"B\"' `\"C\"' `\"D\"' `\"E\"' `\"F\"' `\"G\"' `\"H\"' `\"I\"' `\"J\"' `\"K\"' `\"L\"' `\"M\"' `\"N\"' `\"P\"' `\"Q\"' `\n> \"R\"' `\"S\"' `\"T\"' `\"U\"' `\"V\"' `\"W\"' `\"X\"' `\"Y\"' `\"Z\"'\n*/\n\nlevelsof xnum\n\n/*\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n*/\n\nGlevelsof avec valeurs enregistrées en ordre décroissant:\n\nglevelsof -xchar\n\n`\"Z\"' `\"Y\"' `\"X\"' `\"W\"' `\"V\"' `\"U\"' `\"T\"' `\"S\"' `\"R\"' `\"Q\"' `\"P\"' `\"N\"' `\"M\"' `\"L\"' `\"K\"' `\"J\"' \n` \"I\"' `\"H\"' `\"G\"' `\"F\"' `\"E\"' `\"D\"' `\"C\"' `\"B\"' `\"A\"'\n\nglevelsof -xnum\n\n25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n\n\n\n\nVariable caractère\n10k\n100k\n1M\n10M\n\n\n\n\nlevelsof\n0.01\n0.10\n2.64\n42.51\n\n\nglevelsof\n0.01\n0.01\n0.11\n0.62\n\n\n\n\n\n\nVariable numerique\n10k\n100k\n1M\n10M\n\n\n\n\nlevelsof\n0.01\n0.01\n0.09\n1.04\n\n\nglevelsof\n0.00\n0.01\n0.04\n0.32"
  },
  {
    "objectID": "speedup/intro.html",
    "href": "speedup/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Version 1 avec gtools [Aout 2022]\n\nStata 17: grosse amélioration du temps d’exécution de certaines commandes, en particulier sort et collapse.\nDepuis de nombreuses années des packages ou commandes standalone amélioraientt le temps d’exécution, en particulier les packages ftools de Sergio Correa ou les commandes fastxtile/fastwpctile d’egenmisc.\nLe package gtools de Mauricio Caceres Bravo donne des résultats vraiment très intéressants lorsqu’on atteint un seuil d’un million d’observations pour les commandes suivantes: greshape, gquantiles, gegen, glevelof avec une variable caractère, et dans une moindre mesure gcollapse.\nAu delà des durées d’exécution, ces packages et commandes peuvent avoir quelques options propres, par exemple, l’option by() de gquantiles ou la possibilité d’enregistrer les valeurs en ordre décroissant avec glevelsof.\n\nBenchmarks\n\nVersion Stata 17 SE. Les benchmarks réalisés par Mauricio Caceres sont en version MP.\nConfiguration PC: i5-10210U CPU et 16GO de RAM.\nVolumétries: 10k, 100k, 1M, 10M.\nComparaisons avec R si fonctions équivalentes.\nProgramme Stata: https://github.com/mthevenin/stata_programmation/blob/main/speedup/benchmark.do\nTo do: faire les tests sur la version serveur-linux (toujours Stata 17 SE)\n\nSources:\n\nStata 17 faster: https://www.stata.com/new-in-stata/faster-stata-speed-improvements/\nftools: https://github.com/sergiocorreia/ftools\ngtools:\n\nhttps://gtools.readthedocs.io/en/latest/index.html\nhttps://github.com/mcaceresb/stata-gtools"
  },
  {
    "objectID": "tableaux/intro.html",
    "href": "tableaux/intro.html",
    "title": "Intro - Collect",
    "section": "",
    "text": "La suite collect introduite avec le version 17 va t-elle remplacer outreg2 et autres commandes de mise en forme et d’exportation de tableaux…..\n08-09-2022: Merci à Marion pour m’avoir donné l’idée de me pencher rapidement sur cette suite.\nPas encore un tutoriel, dès éléments sont encore obscurs, mais avec quelques copier-coller issus des fichiers d’aides je présente juste deux exemples avec des régressions.\nPrincipe de la suite collect:\nA partir de la base nanhes21:"
  },
  {
    "objectID": "tableaux/intro.html#ols",
    "href": "tableaux/intro.html#ols",
    "title": "Intro - Collect",
    "section": "2.1 Ols",
    "text": "2.1 Ols\n\n\n\n\n\n\nWarning\n\n\n\nLorsqu’on génère un tableau avec collect avec un même style il me semble préférable d’exécuter systématiquement:\n\n\n\nSyntaxe\n\ncollect clear\ncollect use nom_style, replace\n\n\n\n\nEstimation du modèle avec collect\n\n\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region\nqui: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region i.sex\n\nModification du style pour ajouter le nom des modèles\n\ncollect label values cmdset 1 \"Modèle 1\" 2 \"Modèle 2\" \n\nOn peut également ajouter un titre, modifier les labels des variables, je pense aussi les libellées des colonnes pour les indicateurs (par exemple AME au lieu de Coefficient).\nPrévisualisation du tableau\n\ncollect preview\n\n/*\n------------------------------------------------------------------------------\n                            Modèle 1                       Modèle 2           \n                 Coefficient Std. error p-value Coefficient Std. error p-value\n------------------------------------------------------------------------------\nAge group 20–29        0.000      0.000               0.000      0.000        \n          30–39        2.891      0.664   0.000       2.917      0.661   0.000\n          40–49        9.580      0.716   0.000       9.584      0.713   0.000\n          50–59       18.324      0.713   0.000      18.384      0.710   0.000\n          60–69       24.184      0.574   0.000      24.193      0.571   0.000\n          70+         30.851      0.780   0.000      30.958      0.777   0.000\nRegion    NE           0.000      0.000               0.000      0.000        \n          MW          -0.023      0.595   0.969       0.033      0.592   0.956\n          S           -0.303      0.591   0.608      -0.227      0.588   0.699\n          W           -0.777      0.601   0.196      -0.745      0.599   0.213\nSex       Male                                        0.000      0.000        \n          Female                                     -4.015      0.402   0.000\nIntercept            117.632      0.589   0.000     119.672      0.621   0.000\n------------------------------------------------------------------------------\n*/  \n\nRemarque: on peut supprimer les baselines, mais je n’ai pas trouvé comment mettre par exemple ref pour la contrainte à 0.\nExportations\nJ’ai vu large pour l’exemple\n\n\n\n\n\n\nExportation latex\n\n\n\nMettre l’option tableonly pour que la balise d’ouverture soit celle d’un tableau et non d’un document.\n\n\n\ncollect export ex1, as(docx)     replace\ncollect export ex1, as(xls)      replace\ncollect export ex1, as(tex)      replace tableonly\ncollect export ex1, as(html)     replace\ncollect export ex1, as(markdown) replace\n\nEnsemble du programme (sauf la création du style multimod et les exportations)\n\ncollect clear\ncollect use multimod\n\nquietly: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region\nquietly: collect _r_b _r_se _r_p: regress bpsystol i.agegrp i.region i.sex\n\ncollect label values cmdset 1 \"Modèle 1\" 2 \"Modèle 2\"\n\ncollect preview\n\n\n2.1.1 Visualisation des exportations\n\nWordExcelLatex (pdf)Markdown (Html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nle fichier tex1.tex généré avec collect export donne le tableau brut balisé. Le fichier peut être inséré dans un document Latex avec \\estauto{nom_fichier.tex} ou \\input{nom_fichier.tex}\n\nJuste une petite remarque sur les notes de bas de tableau. collect gère également leur présence et leur mise en forme, mais le code généré semble systématiquement les aligner au centre. A creuser, sinon il faut modifier le code Latex pour les aligner à gauche. Par exemple:\n\n\\multicolumn{3}{l}{\\footnotesize Note 1: blablabla}\\\\\n\\multicolumn{3}{l}{\\footnotesize Note 2: blablabla}\\\\\n\\end{tabular}\n\\end{table}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModèle 1\n\n\nModèle 2\n\n\n\n\n\n\n\n\nCoefficient\nStd. error\np-value\nCoefficient\nStd. error\np-value\n\n\nAge group\n20–29\nRef\nRef\n\nRef\nRef\n\n\n\n\n30–39\n2.891\n0.664\n0.000\n2.917\n0.661\n0.000\n\n\n\n40–49\n9.580\n0.716\n0.000\n9.584\n0.713\n0.000\n\n\n\n50–59\n18.324\n0.713\n0.000\n18.384\n0.710\n0.000\n\n\n\n60–69\n24.184\n0.574\n0.000\n24.193\n0.571\n0.000\n\n\n\n70+\n30.851\n0.780\n0.000\n30.958\n0.777\n0.000\n\n\nRegion\nNE\nRef\nRef\n\nRef\nRef\n\n\n\n\nMW\n-0.023\n0.595\n0.969\n0.033\n0.592\n0.956\n\n\n\nS\n-0.303\n0.591\n0.608\n-0.227\n0.588\n0.699\n\n\n\nW\n-0.777\n0.601\n0.196\n-0.745\n0.599\n0.213\n\n\nSex\nMale\n\n\n\nRef\nRef\n\n\n\n\nFemale\n\n\n\n-4.015\n0.402\n0.000\n\n\nIntercept\n\n117.632\n0.589\n0.000\n119.672\n0.621\n0.000\n\n\n\nLe tableau est un peu complexe, pour et les 3 premières lignes doivent être modifiée en md (je n’ai pas trouvé mieux pour l’instant):\nmd du fichier ex1.md\n\n|           |        | Modèle 1    |            |         | Modèle 2    |            |         |\n|           |        | Coefficient | Std. error | p-value | Coefficient | Std. error | p-value |\n|-----------|--------|-------------|------------|---------|-------------|------------|---------|\n| Age group | 20–29  | 0.000       | 0.000      |         | 0.000       | 0.000      |         |\n|           | 30–39  | 2.891       | 0.664      | 0.000   | 2.917       | 0.661      | 0.000   |\n|           | 40–49  | 9.580       | 0.716      | 0.000   | 9.584       | 0.713      | 0.000   |\n|           | 50–59  | 18.324      | 0.713      | 0.000   | 18.384      | 0.710      | 0.000   |\n|           | 60–69  | 24.184      | 0.574      | 0.000   | 24.193      | 0.571      | 0.000   |\n|           | 70+    | 30.851      | 0.780      | 0.000   | 30.958      | 0.777      | 0.000   |\n| Region    | NE     | 0.000       | 0.000      |         | 0.000       | 0.000      |         |\n|           | MW     | -0.023      | 0.595      | 0.969   | 0.033       | 0.592      | 0.956   |\n|           | S      | -0.303      | 0.591      | 0.608   | -0.227      | 0.588      | 0.699   |\n|           | W      | -0.777      | 0.601      | 0.196   | -0.745      | 0.599      | 0.213   |\n| Sex       | Male   |             |            |         | 0.000       | 0.000      |         |\n|           | Female |             |            |         | -4.015      | 0.402      | 0.000   |\n| Intercept |        | 117.632     | 0.589      | 0.000   | 119.672     | 0.621      | 0.000   |\n\nmd modifié (ligne 1 à 3\n\n|           |        | Modèle 1    |            |         | Modèle 2    |            |         |\n|-----------|--------|-------------|------------|---------|-------------|------------|---------|  \n|           |        | Coefficient | Std. error | p-value | Coefficient | Std. error | p-value |\n| Age group | 20–29  | 0.000       | 0.000      |         | 0.000       | 0.000      |         |\n|           | 30–39  | 2.891       | 0.664      | 0.000   | 2.917       | 0.661      | 0.000   |\n|           | 40–49  | 9.580       | 0.716      | 0.000   | 9.584       | 0.713      | 0.000   |\n|           | 50–59  | 18.324      | 0.713      | 0.000   | 18.384      | 0.710      | 0.000   |\n|           | 60–69  | 24.184      | 0.574      | 0.000   | 24.193      | 0.571      | 0.000   |\n|           | 70+    | 30.851      | 0.780      | 0.000   | 30.958      | 0.777      | 0.000   |\n| Region    | NE     | 0.000       | 0.000      |         | 0.000       | 0.000      |         |\n|           | MW     | -0.023      | 0.595      | 0.969   | 0.033       | 0.592      | 0.956   |\n|           | S      | -0.303      | 0.591      | 0.608   | -0.227      | 0.588      | 0.699   |\n|           | W      | -0.777      | 0.601      | 0.196   | -0.745      | 0.599      | 0.213   |\n| Sex       | Male   |             |            |         | 0.000       | 0.000      |         |\n|           | Female |             |            |         | -4.015      | 0.402      | 0.000   |\n| Intercept |        | 117.632     | 0.589      | 0.000   | 119.672     | 0.621      | 0.000   |\n\n\n\n\nPour la sortie, j’ai fait également quelques modifs au niveau du texte et changé les valeurs des baselines de 0.00 à Ref"
  },
  {
    "objectID": "tableaux/intro.html#margins-avec-mlogit",
    "href": "tableaux/intro.html#margins-avec-mlogit",
    "title": "Intro - Collect",
    "section": "2.2 Margins avec mlogit",
    "text": "2.2 Margins avec mlogit\n\nLe programme est très simple, et au final on arrive à produire rapidement un output très satisfaisant avec les résulats des différentes modalités en colonne.\nJe n’ai pas reproduit la fin du programme avec collect export.\n\nRappel: j’ai seulement reporté les AME pour seulement deux catégories excellent et poor\n\ncollect clear\ncollect use multimod\n\nqui mlogit hlthstat i.agegrp i.region i.sex i.race\nqui: collect _r_b _r_se _r_p: margins, dydx(*) predict(outcome(Excellent))\nqui: collect _r_b _r_se _r_p: margins, dydx(*) predict(outcome(Poor))\n\ncollect label values cmdset 1 \"Excellent\" 2 \"Poor\" \n\ncollect preview\n\n\n/*\n------------------------------------------------------------------------------\n                            Excellent                        Poor             \n                 Coefficient Std. error p-value Coefficient Std. error p-value\n------------------------------------------------------------------------------\nAge group 20–29        0.000          .       .       0.000          .       .\n          30–39       -0.028      0.015   0.066       0.008      0.004   0.031\n          40–49       -0.089      0.016   0.000       0.038      0.006   0.000\n          50–59       -0.185      0.014   0.000       0.079      0.008   0.000\n          60–69       -0.241      0.012   0.000       0.117      0.006   0.000\n          70+         -0.234      0.014   0.000       0.132      0.011   0.000\nRegion    NE           0.000          .       .       0.000          .       .\n          MW          -0.008      0.012   0.525       0.025      0.006   0.000\n          S           -0.060      0.012   0.000       0.064      0.007   0.000\n          W           -0.050      0.012   0.000       0.028      0.006   0.000\nSex       Male         0.000          .       .       0.000          .       .\n          Female      -0.039      0.008   0.000      -0.016      0.005   0.001\nRace      White        0.000          .       .       0.000          .       .\n          Black       -0.113      0.011   0.000       0.060      0.010   0.000\n          Other       -0.042      0.028   0.134      -0.011      0.017   0.526\n------------------------------------------------------------------------------\n*/  \n\n\n2.2.1 Visualisation des exportations\n\nWordExcelLatex (pdf)Markdown (Html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExcellent\n\n\nPoor\n\n\n\n\n\n\n\n\nCoefficient\nStd. error\np-value\nCoefficient\nStd. error\np-value\n\n\nAge group\n20–29\nRef\n.\n.\nRef\n.\n.\n\n\n\n30–39\n-0.028\n0.015\n0.066\n0.008\n0.004\n0.031\n\n\n\n40–49\n-0.089\n0.016\n0.000\n0.038\n0.006\n0.000\n\n\n\n50–59\n-0.185\n0.014\n0.000\n0.079\n0.008\n0.000\n\n\n\n60–69\n-0.241\n0.012\n0.000\n0.117\n0.006\n0.000\n\n\n\n70+\n-0.234\n0.014\n0.000\n0.132\n0.011\n0.000\n\n\nRegion\nNE\nRef\n.\n.\nRef\n.\n.\n\n\n\nMW\n-0.008\n0.012\n0.525\n0.025\n0.006\n0.000\n\n\n\nS\n-0.060\n0.012\n0.000\n0.064\n0.007\n0.000\n\n\n\nW\n-0.050\n0.012\n0.000\n0.028\n0.006\n0.000\n\n\nSex\nMale\nRef\n.\n.\nRef\n.\n.\n\n\n\nFemale\n-0.039\n0.008\n0.000\n-0.016\n0.005\n0.001\n\n\nRace\nWhite\n0.000\n.\n.\n0.000\n.\n.\n\n\n\nBlack\n-0.113\n0.011\n0.000\n0.060\n0.010\n0.000\n\n\n\nOther\n-0.042\n0.028\n0.134\n-0.011\n0.017\n0.526"
  },
  {
    "objectID": "formation/chapitre4.html#variables-quantitatives",
    "href": "formation/chapitre4.html#variables-quantitatives",
    "title": "Les bases de données",
    "section": "5.1 Variables quantitatives",
    "text": "5.1 Variables quantitatives\n\n5.1.1 Tableaux d’indicateurs\n\n\n\n\n\n\nNote\n\n\n\nLes commandes qui sont rapidement décrites afficheront des indicateurs communs, typiquement la moyenne. Elles se distinguent par la forme de leur output facilitant plus ou moins les comparaisons, les possibilités offertes en termes de pondération, et sur la récupération des résultats (macro).\n\n\nCommande summarize\nComme son l’indique, la commande summarize, avec l’option detail (d) donne un résumé complet de la distribution d’une variable quantitative: moyenne, variance, quantiles, symétrie, applatissement ..nom l’indique l.)\n\n\n\nSyntaxe\n\nsummarize varlist [, detail]\n\n\nSi on indique pas le nom d’au moins une variable, toutes les variables de la base seront sélectionnées.\nLa commande peut-être tronquée jusqu’à sum [Warning: il existe également une fonction sum pour générer des cumuls lors d’une création de variable - voir chapitre 5].\n\nsum price\n\nsum \n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n       price |         74    6165.257    2949.496       3291      15906\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n        make |          0\n       price |         74    6165.257    2949.496       3291      15906\n         mpg |         74     21.2973    5.785503         12         41\n       rep78 |         69    3.405797    .9899323          1          5\n    headroom |         74    2.993243    .8459948        1.5          5\n-------------+---------------------------------------------------------\n       trunk |         74    13.75676    4.277404          5         23\n      weight |         74    3019.459    777.1936       1760       4840\n      length |         74    187.9324    22.26634        142        233\n        turn |         74    39.64865    4.399354         31         51\ndisplacement |         74    197.2973    91.83722         79        425\n-------------+---------------------------------------------------------\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n     foreign |         74    .2972973    .4601885          0          1\n\n\n\nsum price length, d\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n                        Length (in.)\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%          142            142\n 5%          154            147\n10%          157            149       Obs                  74\n25%          170            154       Sum of wgt.          74\n\n50%        192.5                      Mean           187.9324\n                        Largest       Std. dev.      22.26634\n75%          204            221\n90%          218            222       Variance       495.7899\n95%          221            230       Skewness      -.0409746\n99%          233            233       Kurtosis        2.04156\n\n\n\nbysort foreign: sum price, d\n\n-> foreign = Domestic\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3667           3299\n10%         3955           3667       Obs                  52\n25%         4184           3799       Sum of wgt.          52\n\n50%       4782.5                      Mean           6072.423\n                        Largest       Std. dev.      3097.104\n75%         6234          13466\n90%        11385          13594       Variance        9592055\n95%        13594          14500       Skewness       1.777939\n99%        15906          15906       Kurtosis       5.090316\n\n-------------------------------------------------------------------------------\n-> foreign = Foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3748           3748\n 5%         3798           3798\n10%         3895           3895       Obs                  22\n25%         4499           3995       Sum of wgt.          22\n\n50%         5759                      Mean           6384.682\n                        Largest       Std. dev.      2621.915\n75%         7140           9690\n90%         9735           9735       Variance        6874439\n95%        11995          11995       Skewness       1.215236\n99%        12990          12990       Kurtosis       3.555178\n\n\n\nAvantage: récupération des résultats sous forme de macro rapide.\nInconvénients: pas de sélection des indicateurs avec l’option detail, output pas adapté aux comparaisons.\n\n\n\n\nreturn list: macros associées aux indicateurs\n\n\n*Extrait de l'aide de summarize\n\n/* help summarize\n\n    summarize stores the following in r():\n\n    Scalars   \n      r(N)           number of observations\n      r(mean)        mean\n      r(skewness)    skewness (detail only)\n      r(min)         minimum\n      r(max)         maximum\n      r(sum_w)       sum of the weights\n      r(p1)          1st percentile (detail only)\n      r(p5)          5th percentile (detail only)\n      r(p10)         10th percentile (detail only)\n      r(p25)         25th percentile (detail only)\n      r(p50)         50th percentile (detail only)\n      r(p75)         75th percentile (detail only)\n      r(p90)         90th percentile (detail only)\n      r(p95)         95th percentile (detail only)\n      r(p99)         99th percentile (detail only)\n      r(Var)         variance\n      r(kurtosis)    kurtosis (detail only)\n      r(sum)         sum of variable\n      r(sd)          standard deviation\n*/\n\n\n\nqui sum price, d\n\nreturn list\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.97426879\n                 r(sd) =  2949.495884768919\n           r(skewness) =  1.653433511704859\n           r(kurtosis) =  4.819187528464004\n                r(sum) =  456229\n                r(min) =  3291\n                r(max) =  15906\n                 r(p1) =  3291\n                 r(p5) =  3748\n                r(p10) =  3895\n                r(p25) =  4195\n                r(p50) =  5006.5\n                r(p75) =  6342\n                r(p90) =  11385\n                r(p95) =  13466\n                r(p99) =  15906\n\n\nmean\nN’affiche que la moyenne et ses statistiques associées. L’option over permet de comparer les valeurs moyennes des modalités d’une variable catégorielle (over(varname)) ou un croisement des modalités de plusieurs variables (over(varlist))\n\nmean price  \nmean price, over(foreign)\nmean price, over(foreign rep78)\n\nMean estimation                             Number of obs = 74\n\n--------------------------------------------------------------\n             |       Mean   Std. err.     [95% conf. interval]\n-------------+------------------------------------------------\n       price |   6165.257    342.872      5481.914    6848.600\n--------------------------------------------------------------\n\n\nMean estimation                                Number of obs = 74\n\n-----------------------------------------------------------------\n                |       Mean   Std. err.     [95% conf. interval]\n----------------+------------------------------------------------\nc.price@foreign |\n      Domestic  |   6072.423    429.491      5216.449    6928.398\n       Foreign  |   6384.682    558.994      5270.608    7498.756\n-----------------------------------------------------------------\n\n\nMean estimation                                      Number of obs = 69\n\n-----------------------------------------------------------------------\n                      |       Mean   Std. err.     [95% conf. interval]\n----------------------+------------------------------------------------\nc.price@foreign#rep78 |\n          Domestic#1  |   4564.500    369.500      3827.174    5301.826\n          Domestic#2  |   5967.625   1265.494      3442.372    8492.878\n          Domestic#3  |   6607.074    704.611      5201.044    8013.104\n          Domestic#4  |   5881.556    530.673      4822.614    6940.497\n          Domestic#5  |   4204.500    220.500      3764.499    4644.501\n           Foreign#1  |      0.000  (no observations)\n           Foreign#2  |      0.000  (no observations)\n           Foreign#3  |   4828.667    742.249      3347.532    6309.801\n           Foreign#4  |   6261.444    632.031      5000.247    7522.642\n           Foreign#5  |   6292.667    921.876      4453.091    8132.242\n-----------------------------------------------------------------------\n\n\n\nAvantage: output synthétique si la moyenne de plusieurs groupes comparées\nInconvénients: récupération des résultats via une matrice (on oublie)\n\ntabstat\nPermet de sélectionner les indicateurs avec l’option stat() (par défaut la moyenne). L’option by() permet de comparer le ou les indicateurs pour chaque niveau d’une variable catégorielle. Dans ce cas tabstat affiche également les résultats sur l’ensemble des observations (sinon ajouter l’option nototal).\n\ntabstat price  \ntabstat price mpg, by(foreign)\n\n    Variable |      Mean\n-------------+----------\n       price |  6165.257\n------------------------\n\n\nSummary statistics: Mean\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n Foreign |  6384.682  24.77273\n---------+--------------------\n   Total |  6165.257   21.2973\n------------------------------\n\n\n\n\n\nliste des indicateurs\n\n\n*Extrait de l'aide de summarize\n\n/* help tabstat\n\n        mean            mean\n        count           count of nonmissing observations\n        n               same as count\n        sum             sum\n        max             maximum\n        min             minimum\n        range           range = max - min\n        sd              standard deviation\n        variance        variance\n        cv              coefficient of variation (sd/mean)\n        semean          standard error of mean (sd/sqrt(n))\n        skewness        skewness\n        kurtosis        kurtosis\n        p1              1st percentile\n        p5              5th percentile\n        p10             10th percentile\n        p25             25th percentile\n        median          median (same as p50)\n        p50             50th percentile (same as median)\n        p75             75th percentile\n        p90             90th percentile\n        p95             95th percentile\n        p99             99th percentile\n        iqr             interquartile range = p75 - p25\n        q               equivalent to specifying p25 p50 p75\n*/\n\n\nSi on souhaite ajouter la médiane\n\ntabstat price mpg, by(foreign) stat(mean median)\n\nSummary statistics: Mean, p50\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n         |    4782.5        19\n---------+--------------------\n Foreign |  6384.682  24.77273\n         |      5759      24.5\n---------+--------------------\n   Total |  6165.257   21.2973\n         |    5006.5        20\n------------------------------\n\n\n\n\n5.1.2 Graphiques\n[MAJ EN COURS: bcp de nouveautés]\nJuste une rapide présentation de quelques visualisations permettant d’explorer des distributions.\nUne seule distribution: graph box/hbox , histogram, violinplot (externe)\nPlusieurs distributions: violinplot (externe) Deux distribution croisée: hexplot (externe), gjoint (externe)\nBoxplot\n\ngraph hbox mpg, \ngraph hbox mpg, over(foreign)   \n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\nHistogramme\n\nhistogram mpg, percent \nhistogram mpg, percent by(foreign)\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\n\nDans le langage de Stata, ce type de graphique est appelé oneway.\nL’altération de son aspect avec les options n’est pas très flexible, surtout au niveau des couleurs.\nPour les histogrammes, il y a une version twoway qui permet d’empilé plusieurs histogrammes dans un même graphique, mais généralement la visualisation n’est pas optimale. Préférer en ce cas là une approche par les densités (voir violinplot - comparaison III).\nConseil de sémiologie graphique: garder l’axe quantitatif/continu sur les abcisses .\n\nViolinplot (Ben Jann)\nToujours beaucoup d’options dans les commandes de magik B.Jann. Se reporter à son tutoriel sur github pour l’installation (nécessite l’installation de dépendances) Lien\n\nviolinplot mpg, fill\n\nviolinplot mpg, nobox over(foreign) left overlay nomedian  dscale(.) \n\nviolinplot mpg, fill over(foreign)\n\nviolinplot mpg, fill split(foreign) horizontal\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nComparaison I\n\n\n\n\n\n\n\nComparaison II\n\n\n\n\n\nComparaison III\n\n\n\n\nDeux variables quantitatives\n\nUne nuage de point pêche rapidement lorsque le nombre d’observations augmente, par exemple audelà de 200.\nSolutions:\n\nCourbes de niveaux\nHeatplot/hexplot: l’idée est de visualiser un histogramme “vu du dessuss”, la hauteurs des barres étant données par un différentiel de couleur issues d’une palette séquentielle (du clair au foncé par exemple).\n\n\n\n\n\nInstallation heatplot\n\nssc install heatplot, replace  \n\n\n\nIl peut-être intéressant d’ajouté les distributions marginales des deux variables. J’ai programmé une petite commande (encore en version très alpha): gjoint. Tout le mérite revient à B.Jann pour la commande hexplot (j’ai juste combiné hexplot avec des histogrammes).\n\n\n\n\nInstallation gjoint\n\nnet install gjoint, from(\"https://raw.githubusercontent.com/mthevenin/stata_graphiques/master/ressources/gjoint/\") replace\n\n\n\nhexplot price mpg, colors(flare)\ngjoint price mpg, palette(flare)\n\n\n\n\n\n\nhexplot\n\n\n\n\n\nhexplot"
  },
  {
    "objectID": "formation/chapitre4.html#ouverture",
    "href": "formation/chapitre4.html#ouverture",
    "title": "Les bases de données",
    "section": "2.1 Ouverture",
    "text": "2.1 Ouverture\nCommande use\n Sans chargement d’un répertoire\n\n\n\nSyntaxe\n\nuse \"path/nom_base.dta\" [,clear]\n\n\nL’option clear permet d’effacer une base en cours d’utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser clear comme instruction avant d’ouvrir une base. on ne supprime pas la base du répertoire (commande erase), elle est juste écrasée dans la session.\nSyntaxe avec affectation d’un répertoire:\n\n\n\nSyntaxe\n\ncd \"path\"\nuse \"nom_base.dta\", clear \n\n\nou\n\n\n\nSyntaxe\n\ncd \"path\"\nclear\nuse \"nom_base.dta\" \n\n\nRemarque: pour les bases d’exemples préinstallées, on utilise la commande sysuse. Dans les fichiers d’aide, des exemples font également appels a des bases localisées sur des serveurs qui s’ouvrent avec la commande webuse.\n\n\n\nSyntaxe\n\nsysuse auto, clear\n\n\n\n\n\n\n\n\nNote\n\n\n\nOuverture d’une base stockée sur un git [github, gitlab …]\nDans un premier temps, comme pour cd il faut charger le répertoire où se trouve localisé la base, avec la commande webuse set. Par exemple sur mon dépôt git, une base d’exemple (logement.dta) pour une commande se trouve à cette adresse: https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint\nPour charger ce répertoire à distance:\n\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\n\nOn remarque que le chemin n’est pas identique au simple lien (spécificité des dépôt de type git).\nIl suffit ensuite de charger la base avec webuse\n\nwebuse logement.dta, clear\n\nOn revient au dépôt officiel de stata avec webuse set\nEn résumé avec un seul bloc d’instructions:\n\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\n\nwebuse \"logement.dta\", clear\n\nwebuse set\n\n> ster/ressources/gjoint\"\n(prefix now \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/mast\n> er/ressources/gjoint\")\n\n\n(prefix now \"https://www.stata-press.com/data/r17\")"
  },
  {
    "objectID": "formation/chapitre4.html#sauvegarde",
    "href": "formation/chapitre4.html#sauvegarde",
    "title": "Les bases de données",
    "section": "2.2 Sauvegarde",
    "text": "2.2 Sauvegarde\nCommandes save ou saveold\n\n\n\nSyntaxe\n\nsave \"path/nom_base.dta\" [, replace]     \n\n\nL’option replace permet d’écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l’utiliser dès la première sauvegarde (un message d’avertissement s’affiche).\n\n\n\nSyntaxe\n\nsysuse auto, clear  \n\nsave auto, replace\n\n\n(1978 automobile data)\n\nfile auto.dta saved\n\n\nsaveold permettra d’ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec save il ne sera plus possible d’ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l’encodage Utf8 avec la version 14).\n\n\n\nSyntaxe\n\n saveold \"path/nom_base.dta\", [replace] [version(#)] // # = numéro de la version de Stata: \n\n\nRemarque:\n\nEcrire l’extension .dta n’est pas obligatoire\nLes doubles quotes ne sont obligatoires que s’il y a un espace dans le chemin d’accès et/ou dans le nom de la base\n\n\n\n\nSyntaxe\n\nuse \"ma base\", clear \nuse ma_base,   clear"
  },
  {
    "objectID": "formation/chapitre4.html#autres-formats",
    "href": "formation/chapitre4.html#autres-formats",
    "title": "Les bases de données",
    "section": "2.3 Autres formats",
    "text": "2.3 Autres formats"
  },
  {
    "objectID": "formation/chapitre4.html#affichage-de-la-base-dans-loutput",
    "href": "formation/chapitre4.html#affichage-de-la-base-dans-loutput",
    "title": "Les bases de données",
    "section": "4.1 Affichage de la base dans l’output",
    "text": "4.1 Affichage de la base dans l’output\nCommande list\n\n\n\nSyntaxe\n\n list [varlist] [expression]\n\n\n\nlist price mpg turn foreign in 1/10\n\n     |  price   mpg   turn    foreign |\n     |--------------------------------|\n  1. |  4,099    22     40   Domestic |\n  2. |  4,749    17     40   Domestic |\n  3. |  3,799    22     35   Domestic |\n  4. |  4,816    20     40   Domestic |\n  5. |  7,827    15     43   Domestic |\n     |--------------------------------|\n  6. |  5,788    18     43   Domestic |\n  7. |  4,453    26     34   Domestic |\n  8. |  5,189    20     42   Domestic |\n  9. | 10,372    16     43   Domestic |\n 10. |  4,082    19     42   Domestic |\n     +--------------------------------+"
  },
  {
    "objectID": "formation/chapitre4.html#labelbook-et-label-list",
    "href": "formation/chapitre4.html#labelbook-et-label-list",
    "title": "Les bases de données",
    "section": "4.2 labelbook et label list",
    "text": "4.2 labelbook et label list\nCommande labelbook: affiche les informations sur les labels affectés aux modalités des variables. Peu utilisé.\n\n\n\nSyntaxe\n\nlabelbook [nom_label]\n\n\n\nlabelbook origin\n\nValue label origin \n-------------------------------------------------------------------------------\n\n      Values                                    Labels\n       Range:  [0,1]                     String length:  [7,8]\n           N:  2                 Unique at full length:  yes\n        Gaps:  no                  Unique at length 12:  yes\n  Missing .*:  0                           Null string:  no\n                               Leading/trailing blanks:  no\n                                    Numeric -> numeric:  no\n  Definition\n           0   Domestic\n           1   Foreign\n\n   Variables:  foreign\n\n\nOn peut également utiliser la commande label list [nom_label] si on connait le nom du label. Le nom du label peut-être récupéré dans describe ou dans le fenêtre properties (voir plus loin également dans le variable manager)\n\nlabel list origin\n\norigin:\n           0 Domestic\n           1 Foreign"
  },
  {
    "objectID": "formation/chapitre3.html#statut-des-valeurs-manquantes",
    "href": "formation/chapitre3.html#statut-des-valeurs-manquantes",
    "title": "Le langage Stata",
    "section": "4.1 Statut des valeurs manquantes",
    "text": "4.1 Statut des valeurs manquantes\n\n\n\n\n\n\nImportant\n\n\n\nTrès important\nLa valeur d’une observation manquante dépasse la plus grande valeur observée d’une variable. Ceci doit être pris en compte dans les expressions conditionnelles impliquant par exemple des regroupement de variables ordinales ou mésurées (âge, revenus…):\nSi une variable numérique \\(X\\) a des observations manquantes, la condition if X>valeur conservera ces informations.\nSi \\(X=(1, 2, 3, 4, 5, 6, .)\\):\n\n...if x>4 conserve \\(x=(5,6,.)\\)\n\n...if x>4 & x<. ou ...if x>4 & x!=. regroupe seulement \\(x=(5,6)\\)\n\n\n\nLes valeurs manquantes utilisateurs\nOn peut rendre la valeur manquante informative en lui ajoutant une lettre: .a , .b, .c etc….\nExemple: .a = Ne sait pas, .b=Refus , .c=Pas de réponse."
  },
  {
    "objectID": "formation/chapitre3.html",
    "href": "formation/chapitre3.html",
    "title": "Le langage Stata",
    "section": "",
    "text": "SECTION\nCOMMANDES ET EXPRESSIONS\n\n\n\n\nOpérateurs\n= == < <= > >= != & | + - * / ^\n\n\nValeurs manquantes\n. mdesc mvpatterns misschk\n\n\nSuppression de l’output, et affichage d’une expression\nquietly display\n\n\nSélection groupées\ndrop keep * -\n\n\nMacros et répétition\nlocal global foreach forvalue return list i regress"
  },
  {
    "objectID": "formation/chapitre4.html",
    "href": "formation/chapitre4.html",
    "title": "Les bases de données",
    "section": "",
    "text": "SECTION\nCOMMANDES ET EXPRESSIONS\n\n\n\n\nAffectation d’un répertoire de travail\ncd\n\n\nOuverture et sauvegarde d’une base\nuse webuse [set] sysuse save saveold import export usesas savasas set obs insobs\n\n\nDécrire le contenu d’une base\ndescribe list codebook labelbook label list\n\n\nTri, doublon, position des variables\nsort gsort duplicates order\n\n\nDecription statistique des variables\nsummarize mean tabstat tabulate fre tabm"
  },
  {
    "objectID": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "href": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "title": "Les bases de données",
    "section": "2.5 Création d’une base de donnée, ajout d’observations",
    "text": "2.5 Création d’une base de donnée, ajout d’observations\nOn peut créer une base de donnée, “vide”, avec la commande set obs nbre_observations\n\nclear \nset obs 100\n\nA une base existante, on peut ajouter des observations (en valeurs manquante) avec la commande insobs nbre_observation. Par défaut ces observations s’ajouteront après la dernière ligne (option before/after(position) pour renseigner la position de la première observation ajoutée.\n\ninsobs 10  // ajout de 10 observations à la base"
  },
  {
    "objectID": "formation/chapitre4.html#commande-describe",
    "href": "formation/chapitre4.html#commande-describe",
    "title": "Les bases de données",
    "section": "3.1 Commande describe",
    "text": "3.1 Commande describe\nPermet, sous forme de tableau, d’avoir des renseignement sur une base de donnée: taille en mémoire, nombre d’observations, descriptif des variables (nom, format, labels). La commande est régulièrement tronquée jusqu’à des\nBase courante (ouverte)\n\n\n\nSyntaxe\n\ndescribe [varlist , short]\n\n\n\nsysuse auto.dta, clear\n\ndes \n\n(1978 automobile data)\n\n\nContains data from C:\\PROGRA~1\\Stata17\\ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nBase stockée (non ouverte)\nOn peut également décrire le contenu d’une base en format .dta en mémoire et non ouverte avec l’argument using \"path/nombase\"\n\ndescribe using  \"https://www.stata-press.com/data/r17/census2.dta\"\n\nContains data                                 1980 Census data by state\n Observations:            50                  2 Dec 2020 09:21\n    Variables:            15                  \n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nstate           str13   %-13s                 State\nstate2          str2    %-2s                  Two-letter state abbreviation\nregion          byte    %-8.0g     cenreg     Census region\npop             long    %12.0gc               Population\npoplt5          long    %12.0gc               Pop, < 5 year\npop5_17         long    %12.0gc               Pop, 5 to 17 years\npop18p          long    %12.0gc               Pop, 18 and older\npop65p          long    %12.0gc               Pop, 65 and older\npopurban        long    %12.0gc               Urban population\nmedage          float   %9.2f                 Median age\ndeath           long    %12.0gc               Number of deaths\nmarriage        long    %12.0gc               Number of marriages\ndivorce         long    %12.0gc               Number of divorces\ndrate           int     %9.0g                 Deathrate\nage             byte    %9.0g                 Age\n-------------------------------------------------------------------------------\nSorted by:"
  },
  {
    "objectID": "formation/chapitre4.html#autres-commandes",
    "href": "formation/chapitre4.html#autres-commandes",
    "title": "Les bases de données",
    "section": "3.2 Autres commandes",
    "text": "3.2 Autres commandes\n\nAffichage de la base dans l’output\n\nCommande list\n\n\n\nSyntaxe\n\n list [varlist] [expression]\n\n\n\nlist price mpg turn foreign in 1/10\n\n     |  price   mpg   turn    foreign |\n     |--------------------------------|\n  1. |  4,099    22     40   Domestic |\n  2. |  4,749    17     40   Domestic |\n  3. |  3,799    22     35   Domestic |\n  4. |  4,816    20     40   Domestic |\n  5. |  7,827    15     43   Domestic |\n     |--------------------------------|\n  6. |  5,788    18     43   Domestic |\n  7. |  4,453    26     34   Domestic |\n  8. |  5,189    20     42   Domestic |\n  9. | 10,372    16     43   Domestic |\n 10. |  4,082    19     42   Domestic |\n     +--------------------------------+\n\n\nSauf exceptions, comme la petite base d’exemple utilisée ici, penser à bien filtrer les informations souhaitées en termes de variables et d’observations.\n\nInformation sur les labels affectés aux variables\n\nCommande labelbook et label list\nlabelbook: affiche les informations sur les labels affectés aux modalités des variables.\n\n\n\nSyntaxe\n\nlabelbook [nom_label]\n\n\n\nlabelbook origin\n\nValue label origin \n-------------------------------------------------------------------------------\n\n      Values                                    Labels\n       Range:  [0,1]                     String length:  [7,8]\n           N:  2                 Unique at full length:  yes\n        Gaps:  no                  Unique at length 12:  yes\n  Missing .*:  0                           Null string:  no\n                               Leading/trailing blanks:  no\n                                    Numeric -> numeric:  no\n  Definition\n           0   Domestic\n           1   Foreign\n\n   Variables:  foreign\n\n\nlabel list [nom_label] donne seulement l’affectation des labels aux valeurs.\n\nlabel list origin\n\norigin:\n           0 Domestic\n           1 Foreign"
  }
]