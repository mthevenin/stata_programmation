[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "N’intéressera peut-être pas les plus aguerri.e.s à Stata…. quoique. On trouve toujours des années plus tard des nouvelles commandes qui facilitent vraiment les choses (sencode, fre, tabm,…., commandes du package gtools), ou une introduction aux frames (Stata16), qui revisitent les appariements de bases.\nLes chapitres sont téléchargeables en format docx.\nMaj de la formation:\n\n28/07/22 : Les variables. Chapitre 5 [todo: faire un topo sur les formats date avant fin 2023]\n07/10/22 : Introduction. Chapitre 1\n07/10/22 : L’environnement. Chapitre 2\n22/02/23 : Le langage Stata. Chapitre 3\n22/02/23 : Les bases de données. Chapitre 4 [introduction aux frame introduites avec la v16]\n05/07/23 : Opérations sur les bases de données. Chapitre 6 [début reprise du chapitre]\n\nProgrammes des chapitres:\n\nChapitre3\nChapitre4\nChapitre5\nChapitre6\n\n\n\n\nSupport réalisé avec Posit-Rstudio - Quarto.\nVersion Stata: 17-SE"
  },
  {
    "objectID": "formation/chapitre6.html#large-à-long",
    "href": "formation/chapitre6.html#large-à-long",
    "title": "Fusion",
    "section": "1.1 large à long",
    "text": "1.1 large à long"
  },
  {
    "objectID": "formation/chapitre6.html#long-à-large",
    "href": "formation/chapitre6.html#long-à-large",
    "title": "Fusion",
    "section": "1.2 long à large",
    "text": "1.2 long à large"
  },
  {
    "objectID": "profile/profile1.html",
    "href": "profile/profile1.html",
    "title": "Principe",
    "section": "",
    "text": "Un fichier profile.do est un programme qui s’éxécute à l’ouverture d’une session Stata. Ce programme comporte uniquement des éléments de configuration, par exemples:\n\nCréation d’un log de session automatique. J’y tiens, un problème n’arrive pas toujours qu’aux autre.\nAffectation d’un répertoire temporaire autre que celui par défaut\nModification de la localisation du répertoire ado plus (il est conseillé mettre sur le lecteur D à l’Ined ou tout autre lecteur que le C:)\nToutes les commandes de paramétrisation préfixées par set: contrôle du défilement de l’output, affichage du nombre de décimales dans les tableaux de régression etc…\nParamètres des graphiques: thèmes, police d’affichage… Je conseille d’utiliser à minima grstyle de Ben Jann.\n\nToutes les commandes sont donc insérées dans un seule programme, il est possible de les activer, de les désactiver ou de les modifier très facilement selon l’usage du moment.\n\n\n1 Création et modification d’un fichier profile.do\nLe fichier profile.do doit être impérativement enregistré dans le répertoire user:\n\n\nWindows: \"C:/Users/nom_user/\"\nLinux (serveur Margaux): \"home/Users/nom_user/\"\n\n\nUne fois le programme enregistré, son effet n’est pris en compte que pour les sessions ouvertes ultérieurement et non sur celles en cours. Le programme est chargé uniquement à l’ouverture d’une session, un message apparait dans l’output:\n\n\n\n\n\nPour faciliter l’ouverture et l’enregistrement du fichier sous windows sans avoir à se promener dans l’explorateur de fichiers, on peut enregistrer la localisation du répertoire user avec une macro de type global, ici appelée user, et l’ouvrir rapidement avec l’invite de commande windows sous Stata (! ou shell).\nAffectation du répertoire user dans une macro:\n\nglobal user \"C:/Users/nom_user/\"\n\nOuverture du fichier profile.do avec l’invite de commande:\n\n! $user/profile.do\n\n\n\n2 Exemples\nLes quelques exemples de configurations qui suivent sont forcément orientés vers mon propre usage.\n\nadoplusRépertoire temporaireLog automatiqueCommandes de type setGraphiquesPython\n\n\nChangement de la localisation du répertoire où sont enregistrées les commandes externes. Il est préférable de les localiser dans un lecteur autre que le lecteur C:\n\nsysdir set PLUS \"D:/D/ado/plus\"\nsysdir set PERSONAL \"D:/D/ado/personal\"\n\n\n\nOn peut créer un répertoire qui fera office de répertoire d’enregistrement par défaut des fichiers, et affecter les opérations d’ouvertures et de sauvegardes dans ce répertoire.\n\n* Après création du répertoire stata_temp\ncd \"D:\\D\\stata_temp\\\"\n\nC’est très optionnel: on peut demander à Stata d’afficher à l’ouverture le contenu de ce répertoire\n\nnoisily display as txt    \"------------------------------------\"\nnoisily display as result \"  Contenu du repertoire stata_temp  \"\nnoisily display as txt    \"------------------------------------\"\nnoisily dir \"D:/D/stata_temp/\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on change dans un programme le répertoire d’affectation par défaut avec cd, ce répertoire stata_temp ne sera plus reconnu comme répertoire par défaut.\nPour palier ce problème on peut affecter une macro à la localisation de ce répertoire.\n\nglobal tmp \"D:/D/stata_temp/\"\n\n\ncd \"path/mon_projet\"  \n\nuse base, clear\nkeep if x==1\nsave $tmp/base_x1, replace\n\nCette solution comporte néanmoins des limites lorsque le programme est utilisé par plusieurs personnes.\n\n\nLa plus utile de toutes les configurations décrites ici.\nAu préalable, je conseille de créer un répertoire d’enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de stat_temp appelé tout simplement log.\n\ncapture log close statalog\nlocal cdt = \"`c(current_date)'\"\nlocal cdt: subinstr local cdt \" \" \"-\", all\nlocal cti = \"`c(current_time)'\"\nlocal cti: subinstr local cti \":\" \".\", all\nlocal statalogname \"statalog_`cdt'_`cti'.log\"\n\nlog using \"$user/stata_temp/log/`statalogname'\" , text name(statalog)\n\nPour le chemin d’accès, j’utilise le répertoire user enregistré sous forme d’une macro (voir plus haut).\nDans ce répertoire sont enregistrés tous les log de session depuis le 1er février 2022.\n\n\n\n\n\n\n\n\n\nIl n’est pas nécessaire d’ajouter l’option permanently comme le fichier profile est chargé à chaque ouverture de session.\nEnsemble des commandes préfixées par set: help set\n\n\nExemple 1: nombre de décimales reportées dans l’output d’une régression avec set cformats (coef, se et bornes ci), set sformats (statistique du test) et set pformats (p-value).\nSi on souhaite fixer le nombre de décimale pour l’ensemble des statistiques à 2\n\nset cformats %9.2f   // max longueur =9\nset sformats %9.2f   // max longueur =8\nset pformats %9.2f   // max longueur =5\n\nExemple 2: déblocage du défilement de l’output\n\nset more off\n\n\n\nDe nouveau avec une commande de type set on peut dans son fichier profile.do changer le thème par défaut avec set scheme nom_scheme.\nJ’ai maintenant pour (bonne) habitude d’utiliser grstyle de Ben Jann (présentation dans la formation dédiée aux graphiques: https://mthevenin.github.io/stata_graphiques/formation32.html#grstyle-de-b.jann).\nSelon l’humeur du moment, on peut générer un thème graphique visuellement bien plus qualitatif que les thèmes usines de Stata, avec seulement quelques arguments.\n\ngrstyle init\ngrstyle set imesh\ngrstyle set legend 11, nobox\ngrstyle set color tableau\n\nPenser à installer les packafes grstyle** et colorpalette avant.\n\n\nEmpêcher le bug graphique qui fait planter Stata avec Anaconda/miniconda\nL’utilisation de conda - Anaconda ou miniconda - n’est pas recommandé pour exécuter du code python dans un programme Stata. Pour preuve, sans les quelques lignes de codes qui suiven, l’exécution d’un graphique utilisant matplotlib risque de faire crasher la session Stata. C’est très désagréable. Plutôt que d’insérer ce code dans le programme, il est préférable de le mettre une bonne fois pour toute dans le profile.do si python est utilisé via conda. Mieux vaut vérifier la localisation exacte du répertoire plugins, je ne sais pas si le chemin qui suit vaut pour toutes les installation de miniconda/anaconda.\n\npython:\nimport os\nos.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\nend\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLa section qui suit met a disposition mon fichier profile.do. Tout est mis en ligne de commentaire, il suffit de retirer la balise * et de modifier les chemins si nécessaire."
  },
  {
    "objectID": "profile/profile2.html",
    "href": "profile/profile2.html",
    "title": "Exemple profile.do",
    "section": "",
    "text": "**************************\n* profile.do Ined        *\n* M.Thevenin Ined-SMS    *\n**************************\n\n/* \n- Copier le programme ou une partie selon les besoins danx un .do\n- Désactiver les zônes de commentaire *\n- Enregistrer le fichier profile.do dans le répertoire unser\n- Seulement ici les paramètres que j'utilise. On peut, bien évidemment, en ajouter d'autres\n*/  \n  \n*****************************\n* ado + et personal dans D: *\n***************************** \n\n/* modifier les chemin si nécessaire */  \n  \n* sysdir set PLUS \"D:/D/ado/plus\"\n* sysdir set PERSONAL \"D:/D/ado/personal\"\n\n****************\n** STATA_TEMP **\n****************\n\n/* Créer un répertoire, pas forcément du même nom que celui ci et modifier les chemin */  \n  \n* cd \"D:\\D\\stata_temp\\\"\n\n*************************************************\n* affichage du contenu du repertoire stata_temp *\n*************************************************\n\n* noisily display as txt    \"------------------------------------\"\n* noisily display as result \"  Contenu du repertoire stata_temp  \"\n* noisily display as txt    \"------------------------------------\"\n* noisily dir \"D:/D/stata_temp/\"\n\n\n**************************************************\n* chargement du répertoire  $tmp dans stata_temp *\n**************************************************\n\n/* attention si plusieurs utilisateurs d'un même programme, le chemin de $tmp risque de ne pas être reconnu */\n\n* global tmp \"D:/D/stata_temp/\"\n\n\n\n\n******************************************\n* Creation automatique d'un fichier .log *\n******************************************\n\n/* changer le chemin à l'avant dernière ligne: log using.... */\n\n* capture log close statalog\n* local cdt = \"`c(current_date)'\"\n* local cdt: subinstr local cdt \" \" \"-\", all\n* local cti = \"`c(current_time)'\"\n* local cti: subinstr local cti \":\" \".\", all\n* local statalogname \"statalog_`cdt'_`cti'.log\"\n\n* noisily display \"Nom du log: `statalogname'\"\n*  log using \"D:/D/stata_temp/log/`statalogname'\" , text name(statalog)\n*  noisily display \"\"\n\n\n*****************\n* R source path *\n*****************\n\n* global Rterm_path `\"C:\\Program Files\\R\\R-4.1.2\\bin\\R.exe\"'\n\n* global Rterm_options `\"--slave --vanilla --args  \"`tf1'\" \"`tf2'\" \"'\n\n\n***************************************************\n* supprimer le blocage du défilement  de l'output *\n***************************************************\n\n* set more off\n\n*******************************\n* output regression           *\n*******************************\n\n/* nombre de decimales =3 */\n\n* set cformat %9.3f\n\n/* garder baselevel*/\n\n*set showbaselevels on\n\n*******************************\n*      graphique              *\n*******************************\n\n/* Installer au préalab grstyle et colorpalette */\n\n* grstyle init\n* grstyle set imesh\n* grstyle set legend 11, nobox\n* grstyle set color tableau\n\n\n*******************************\n*      python                 *\n*******************************\n\n/* chargement de l'exécutable */\n\n* capture  set python_exec  \"C:/Users/thevenin_m/AppData/Local/Programs/Python/Python310/python.exe\"\n\n\n****** plugin miniconda\n* python:\n* import os\n* os.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\n* end"
  },
  {
    "objectID": "formation/chapitre6.html",
    "href": "formation/chapitre6.html",
    "title": "Opérations sur les bases",
    "section": "",
    "text": "Programme du chapitre\nCommandes et expressions introduites"
  },
  {
    "objectID": "formation/chapitre6.html#append",
    "href": "formation/chapitre6.html#append",
    "title": "Opérations sur les bases",
    "section": "1.1 Append",
    "text": "1.1 Append\n\nConsiste simplement à ajouter des observations entre plusieurs bases, avec ou non un même jeu de variables.\n\n\n\n\n\n\nOn va générer les deux bases de données avec la commande input (non traité dans cette formation: help input).\n\nclear \ninput str6 id v1 v2\n  \"A\" 8 2 \n  \"B\" 1 2 \n  \"C\" 2 4\nend\n\nlist\n\nsave base1, replace\n\n\n\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\n\nclear \ninput str20 id v1 v2 v3\n  \"D\" 2 5 10\n  \"E\" 12 1 8 \nend\nlist\n\nsave base2, replace\n\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  D    2    5   10 |\n  2. |  E   12    1    8 |\n     +-------------------+\nfile base2.dta saved\n\n\nLa syntaxe de la commande append consiste à ajouter une ou plusieurs bases à la base active avec l’argument using.\n\nappend using base1\nsort id\nlist\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  A    8    2    . |\n  2. |  B    1    2    . |\n  3. |  C    2    4    . |\n  4. |  D    2    5   10 |\n  5. |  E   12    1    8 |\n     +-------------------+\n\n\nOn peut sélectionner les variables de la base qui sera empilée à la base active avec l’option keep.\nDans l’exemple, si la base active est base1, on peut ne pas vouloir ajouter la variable v3 seulement renseignée pour les observations de base2.\n\nuse base1, clear\nappend using base2, keep(id v1 v2)\nlist \n\n(variable id was str6, now str20 to accommodate using data's values)\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n  4. |  D    2    5 |\n  5. |  E   12    1 |\n     +--------------+\n\n\nSi les informations précédentes étaient ventilées dans trois bases, une par variable v, et avec le même niveau d’observation (A,B,C,D,E dans les 3 bases), l’utilisation de append conduirait à une structure empilée non souhaitable avec une réplication des id.\nPour obtenir la base finale proprement appariée, il convient de faire une fusion horizontale contrôlée par une une clé d’identification."
  },
  {
    "objectID": "formation/chapitre6.html#merge",
    "href": "formation/chapitre6.html#merge",
    "title": "Opérations sur les bases",
    "section": "1.2 Merge",
    "text": "1.2 Merge\nStata demande que les bases soient soit triées (sort) sur la clé d’appariement en amont de l’opération. Sinon un message d’erreur sera renvoyé.\n\nLa base active (ouverte) est appelée base master\nLa base qui sera appariée à la base ouverte est appelée base using 1\n\nSyntaxe minimale 1 avec préfixe:\nmerge [1:1] [1:m] [m:1] id_variables(s) using nom_base\n\nIci on peut apparier plus de deux bases.\nOn ne dispose pas de sécurité, si les niveau d’identification sont différents.\n\n\n1.2.1 Même niveau d’identification\nPartons des informations suivantes: - Base1 comprend la variable d’identification id (observations A,B,C) et de deux variables numériques v1 et v3 - Base2 comprend la même variable d’identification id (observations B,C,D) et de la variable numérique v3\n Le niveau d’identification est identique dans les deux bases. Il s’agit donc d’un merge 1:1 [one to one]\nOn va de nouveau générer les bases avec input.\n\nclear \ninput str1 id v1 v2 \n\"A\" 8 2 \n\"B\" 1 2\n\"C\" 2 4 \nend\nlist\n\nsort id\nsave base1, replace\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\nRappel: bien faire le sort sur la base using\n\nclear\ninput str1 id v3 \n\"B\" 10 \n\"C\" 8\n\"D\" 10 \nend\nlist\n\nsort id\nsave base2, replace \n\n\n\n     +---------+\n     | id   v3 |\n     |---------|\n  1. |  B   10 |\n  2. |  C    8 |\n  3. |  D   10 |\n     +---------+\nfile base2.dta saved\n\n\n\nmerge 1:1 id using base1\n\n\n    Result                      Number of obs\n    -----------------------------------------\n    Not matched                             2\n        from master                         1  (_merge==1)\n        from using                          1  (_merge==2)\n\n    Matched                                 2  (_merge==3)\n    -----------------------------------------\n\n\n\nL’output affiche le résultat de l’appariement à l’aide d’un tableau.\nUne variable, _merge, est générée. Elle permettra de filtrer si nécessaire les observations selon le résultat de l’aapriement. Contrairement à d’autres application, cette opération n’est pas effectuée en amont avec des fonctions où des options spécifiques. Par exemple avec R: left_join, right_join, inner_join. _merge = 1 : observations qui se trouvent seulement dans la base active (master) _merge = 2 : observations qui se trouvent seulement dans la base using (appariée) _merge = 3 : observations communes aux bases master et using.\nLes variables de la base master/active sont positionnées en tête.\n\n\nsort id\nlist\n\n\n     +-------------------------------------+\n     | id   v3   v1   v2            _merge |\n     |-------------------------------------|\n  1. |  A    .    8    2    Using only (2) |\n  2. |  B   10    1    2       Matched (3) |\n  3. |  C    8    2    4       Matched (3) |\n  4. |  D   10    .    .   Master only (1) |\n     +-------------------------------------+\n\n\nSi on souhaite seulement conserver les observations communes aux deux bases (_merge=3):\n\nkeep if _merge==3\nlist\n\n(2 observations deleted)\n\n     +---------------------------------+\n     | id   v3   v1   v2        _merge |\n     |---------------------------------|\n  1. |  B   10    1    2   Matched (3) |\n  2. |  C    8    2    4   Matched (3) |\n     +---------------------------------+\n\n\n\n\n\n\n\n\nVariable _merge et appariement successif\n\n\n\nPensez à supprimer la variable _merge si plusieurs opérérations d’appariement sont effectués. La commande ne prévoit pas d’écraser la variable du merge précédent.\n\n\nSituation avec plus d’une base à apparier\nOn ne peux pas utiliser la syntaxe avec préfixe (ici merge 1:1).\nOn va ajouter une nouvelle base qui sera appariée avec les deux premières, qui seront donc les deux bases de type using.\n\nclear\ninput str1 id str3  v4 \n\"A\" \"Non\" \n\"B\" \"Oui\" \n\"C\" \"Oui\" \nend\n\nlist \n\nsort id\n\n\n\n     +----------+\n     | id    v4 |\n     |----------|\n  1. |  A   Non |\n  2. |  B   Oui |\n  3. |  C   Oui |\n     +----------+\n\n\n\nmerge id using base1 base2\n\norder id v1 v2 v3 v4 _merge1 _merge2 _merge \n\nlist\n\n(you are using old merge syntax; see [D] merge for new syntax)\n\n     +------------------------------------------------------+\n     | id   v1   v2   v3    v4   _merge1   _merge2   _merge |\n     |------------------------------------------------------|\n  1. |  A    8    2    .   Non         1         0        3 |\n  2. |  B    1    2   10   Oui         1         1        3 |\n  3. |  C    2    4    8   Oui         1         1        3 |\n  4. |  D    .    .   10               0         1        2 |\n     +------------------------------------------------------+\n\n\nOn obtient maintenant 3 variables _merge:\n\n_merge1. Donne le résultat de l’appariement entre la nouvelle base et base1: 0 si seulement dans une seule des deux bases (D), 1 si dans les deux bases (A,B,C).\n_merge2. Donne le résultat de l’appariement entre la nouvelle base et base2: 0 si seulement dans une seule des deux bases (A,D), 1 si dans les deux bases (B,C).\n_merge. Résume rapidement le matching entre les bases: on retrouve au moins une fois les observations (A,B,C) dans l’un des deux appariement (_merge=3), on trouve une observation (D) qui ne se trouve que dans une base using (_D_merge=2).\n\nSi l’on souhaite conserver les observations communes aux trois bases, on peut sommer les valeurs de _merge1 et _merge2 et conserver les observations dont la valeurs de cette somme est égale au nombre d’appariements; ou faire une sélection des observations avec un filtre conditionnel, ici:\n\nkeep if _merge1==1 & _merge2==1\nlist\n\ndrop _merge*\n\n(2 observations deleted)\n\n     +------------------------------------------------------+\n     | id   v1   v2   v3    v4   _merge1   _merge2   _merge |\n     |------------------------------------------------------|\n  1. |  B    1    2   10   Oui         1         1        3 |\n  2. |  C    2    4    8   Oui         1         1        3 |\n     +------------------------------------------------------+\n\n\n\n\n\n\n\n\nCommande join du package ftools\n\n\n\n[A tester]\n\nDocumentation.\nPermet de gagner 70% de durée d’exécution lorsque la volumétrie dépasse 100000 observations\nGère en amont le tri des bases appariée.\n\n\n\n\n\n1.2.2 Niveaux d’identification différents\nUn merge de type 1:1 n’est pas possible. Dans l’exemple qui suit la base period_act liste pour deux personnes le statut d’activité observé pour plusieurs périodes soit des observations multiples pour chaque individus, et la base sexe donne une caractéristique unique pour chaque individu. Selon le statut des bases appariée (maste ou using), l’appariement est de type 1:m ou m:1.\n\nSi la base active est à observations multiple sur la clé d’identification: m:1\nSi la base active est à observation unique sur la clé d’identification: 1:m\n\n\n\n\n\n\nOn va de nouveau générer les données avec input\n\nclear \ninput id périodes str8 Activité\n1 1 \"Emploi\"\n1 2 \"Emploi\"\n1 3 \"Chômage\"\n2 1 \"Chômage\" \n2 2 \"Chômage\"\n2 3 \"Emploi\"\n2 4 \"Chômage\" \nend \nlist \nsort id \nsave \"period_act\", replace\n\n\n\n     +--------------------------+\n     | id   périodes   Activité |\n     |--------------------------|\n  1. |  1          1     Emploi |\n  2. |  1          2     Emploi |\n  3. |  1          3    Chômage |\n  4. |  2          1    Chômage |\n  5. |  2          2    Chômage |\n     |--------------------------|\n  6. |  2          3     Emploi |\n  7. |  2          4    Chômage |\n     +--------------------------+\nfile period_act.dta saved\n\n\n\nclear\ninput id str6 sexe \n1 \"Homme\"  \n2 \"Femme\"  \nend \nlist\nsort id \nsave \"sexe\", replace\n\n\n\n     +------------+\n     | id    sexe |\n     |------------|\n  1. |  1   Homme |\n  2. |  2   Femme |\n     +------------+\nfile sexe.dta saved\n\n\nSi on faisait un merge 1:1, Stata renverrai le message d’erreur suivant:\nmerge 1:1 id using activités\n\nvariable id does not uniquely identify observations in the using data\nr(459);\nIci la base active est la base sex. Le prefixe qui doit être utilisé est donc 1:m 2\n\nmerge 1:m id using period_act\nsort id période\nlist \n\n\n    Result                      Number of obs\n    -----------------------------------------\n    Not matched                             0\n    Matched                                 7  (_merge==3)\n    -----------------------------------------\n\n     +------------------------------------------------+\n     | id    sexe   périodes   Activité        _merge |\n     |------------------------------------------------|\n  1. |  1   Homme          1     Emploi   Matched (3) |\n  2. |  1   Homme          2     Emploi   Matched (3) |\n  3. |  1   Homme          3    Chômage   Matched (3) |\n  4. |  2   Femme          1    Chômage   Matched (3) |\n  5. |  2   Femme          2    Chômage   Matched (3) |\n     |------------------------------------------------|\n  6. |  2   Femme          3     Emploi   Matched (3) |\n  7. |  2   Femme          4    Chômage   Matched (3) |\n     +------------------------------------------------+\n\n\n\n\n\n\n\n\nTip\n\n\n\nLe tri de la base est régulièrement modifié après ce type d’appariement. Penser donc à retrier les données proprement, surtout quand il s’agit comme ici d’informations biographiques (sort id périodes)\n\n\nDe nouveau les préfixes sont optionnels, et permettent seulement de contrôler l’appariement. On peut sans soucis fusionner des informations contextuelles avec des informations multiples avec seulement merge.\n\nuse sexe, clear\nmerge id using period_act\nsort id périodes\nlist\n\n(you are using old merge syntax; see [D] merge for new syntax)\nvariable id does not uniquely identify observations in period_act.dta\n\n     +-------------------------------------------+\n     | id    sexe   périodes   Activité   _merge |\n     |-------------------------------------------|\n  1. |  1   Homme          1     Emploi        3 |\n  2. |  1   Homme          2     Emploi        3 |\n  3. |  1   Homme          3    Chômage        3 |\n  4. |  2   Femme          1    Chômage        3 |\n  5. |  2   Femme          2    Chômage        3 |\n     |-------------------------------------------|\n  6. |  2   Femme          3     Emploi        3 |\n  7. |  2   Femme          4    Chômage        3 |\n     +-------------------------------------------+\n\n\n\n\n1.2.3 Appariement avec des frames\nPour les personnes qui n’ont jamais manipulé des frames (introduction Stata 16), se reporter à l’aide Stata (help frame) ou à ce court article.\nL’utilisation des frames présentent plusieurs avantages:\n\nIl n’est pas nécessaire de trier les bases concernées par l’appariement.\nOn peut sélectionner avec la commande frget la ou les variables qui seront récupérées dans la base master. On apparie donc pas des bases en tant que telles, on récupère de l’information de frames liées.\nMieux encore, on peut réaliser des opérations entre observations individuelles et observations contextuelles sans passer par un appariement. Avec les frames, l’opération d’appariement doit être plutôt compris comme un système de liaison entre bases,le transfert d’informations n’étant qu’une opération optionnelle.\n\nAu niveau des désavantages:\n\nSi on ne travaille pas exclusivement sous frames, on devra transformer les bases en frame (voir exemple)\nAbsence de variable de type _merge, qui permet de contrôler le résultat de l’appariement.\nles prefixes sont 1:1 et m:1. Cela signifie dans le second cas que la frame active lors de l’opération de liaison doit toujours être celle dont la clé d’identification est de type multiple (niveau individuel).\nPeut-être le plus embêtant est l’absence d’appariement pour les informations correspondant à merge=2 (informations seulement présentes dans la base using). Le dernier exemple illustre ce point.\n\nOn reprend l’exemple précédent, en transformant dans un premier temps les deux bases en frames.\n\nframe reset\n\nframe create period_act\nframe period_act: use period_act\nframe create sexe\nframe sexe: use sexe\n\nframe dir\n\n  default     0 x 0\n  period_act  7 x 3; period_act.dta\n  sexe        2 x 2; sexe.dta\n\n\nOn doit se positionner sur la frame period_act (type m)\n\nframe change period_act\n\nPour lier les frames on utilise la commande frlink.\nSyntaxe\nfrlink 1:1/m:1 id_variable(s), frame(nom_frame) gen(variable_lien)\nIci on fait un appariement de type m:1, la clé d’identification est de nouveau id. On lie la frame active à la frame sexe et la variable de liaison (ici un alias de la variable id) est appelée link.\n\nfrlink m:1 id, frame(sexe) gen(link)\n\n(all observations in frame period_act matched)\n\n\nPour importer la variable sexe dans la frame period_act, on utilise la commande frget, en précisant la ou les variable que l’on souhaite récupérer, ainsi que la variable de liaison (une même frame peut avoir plusieurs liaisons. Voir plus loin).\n\nfrget sexe , from(link)\n\nframe period_act: order link, last\nlist\n\n(1 variable copied from linked frame)\n\n     +-----------------------------------------+\n     | id   périodes   Activité    sexe   link |\n     |-----------------------------------------|\n  1. |  1          1     Emploi   Homme      1 |\n  2. |  1          2     Emploi   Homme      1 |\n  3. |  1          3    Chômage   Homme      1 |\n  4. |  2          1    Chômage   Femme      2 |\n  5. |  2          2    Chômage   Femme      2 |\n     |-----------------------------------------|\n  6. |  2          3     Emploi   Femme      2 |\n  7. |  2          4    Chômage   Femme      2 |\n     +-----------------------------------------+\n\n\n\n\n\n\n\n\nLiaison des frames en présence d’information incomplète\n\n\n\nLa liaison de frames peut être problématique en présence d’informations incomplètes. Pour faire simple la liaison des frames permet de faire des appariements de type merge=1 et merge=3 (présence dans master seulement / présence dans master et using) mais ne permet pas de récupérer des informations présentes seulement dans la base using).\nPour illustrer cela on va génére une nouvelle framme, de type individu période, avec une variable additionnelle tvc.\n\nPour id= 1, on a pas d’information dans la frame period_act pour période=4\nPour id= 2, on a pas d’information dans la frame tvc pour les périodes 3 et 4.\n\nCréation de la nouvelle frame (voir le .do, la compilation pour générer ce support complexifie un peu l’opération):\n\nframe create tvc\nframe change tvc\n\n\nclear\ninput id périodes tvc \n1 1 0   \n1 2 0   \n1 3 1  \n1 4 0  \n2 1 1  \n2 2 0 \nend\n\nlist \n\nsave tvc, replace\nframe tvc: use tvc\n\n\n\n     +---------------------+\n     | id   périodes   tvc |\n     |---------------------|\n  1. |  1          1     0 |\n  2. |  1          2     0 |\n  3. |  1          3     1 |\n  4. |  1          4     0 |\n  5. |  2          1     1 |\n     |---------------------|\n  6. |  2          2     0 |\n     +---------------------+\nfile tvc.dta saved\n\n\nLiaison des frames et récupération de la variable tvc dans period_act\n\nframe change period_act\nfrlink 1:1 id périodes, frame(tvc) gen(link2)\n\nfrget tvc, from(link2)\n\nlist\n\n(2 observations in frame period_act unmatched)\n(2 missing values generated)\n(1 variable copied from linked frame)\n\n     +-------------------------------------------------------+\n     | id   périodes   Activité    sexe   link   link2   tvc |\n     |-------------------------------------------------------|\n  1. |  1          1     Emploi   Homme      1       1     0 |\n  2. |  1          2     Emploi   Homme      1       2     0 |\n  3. |  1          3    Chômage   Homme      1       3     1 |\n  4. |  2          1    Chômage   Femme      2       5     1 |\n  5. |  2          2    Chômage   Femme      2       6     0 |\n     |-------------------------------------------------------|\n  6. |  2          3     Emploi   Femme      2       .     . |\n  7. |  2          4    Chômage   Femme      2       .     . |\n     +-------------------------------------------------------+\n\n\nOn voit bien que la valeur de tvc pour id=1 et périodes=4 n’a pas été importée (_merge=2 dans un appariement classique). En revanche, pour id=2, l’incomplétude de l’information dans la base tvc pour les périodes 3 et 4 est bien visible.\nAvec un merge classique (on suppose que period_act n’a pas été appariée à sexe):\n\nuse tvc, clear\nsort id périodes\nsave tvc, replace\nuse period_act, clear\nsort id périodes\nmerge 1:1 id périodes using tvc\nsort id périodes\nlist\n\nfile tvc.dta saved\n\n    Result                      Number of obs\n    -----------------------------------------\n    Not matched                             3\n        from master                         2  (_merge==1)\n        from using                          1  (_merge==2)\n\n    Matched                                 5  (_merge==3)\n    -----------------------------------------\n\n     +--------------------------------------------------+\n     | id   périodes   Activité   tvc            _merge |\n     |--------------------------------------------------|\n  1. |  1          1     Emploi     0       Matched (3) |\n  2. |  1          2     Emploi     0       Matched (3) |\n  3. |  1          3    Chômage     1       Matched (3) |\n  4. |  1          4                0    Using only (2) |\n  5. |  2          1    Chômage     1       Matched (3) |\n     |--------------------------------------------------|\n  6. |  2          2    Chômage     0       Matched (3) |\n  7. |  2          3     Emploi     .   Master only (1) |\n  8. |  2          4    Chômage     .   Master only (1) |\n     +--------------------------------------------------+\n\n\nOn a bien ici l’ajout de l’information correspondant à _merge=2 (Using only)\n\n\nUn des intérêts des frames, est de faire des opérations entre informations individuelles et contextuelles sans passer par un appariement en amont. Par l’exemple, nous allons voir comment un appariement peut être évité lorsqu’on travaille sur ce genre d’information.\nOn va générer 2 bases, une individuelle et une contextuelle. La première contient un identifiant individuelle (id), le nom de la zône d’appartenance (zone) et les valeurs observéd d’une variable x. La seconde contient le nom de la zône et la valeur moyenne de la variable x dans cet espace.\nCréation des frames:\n\nframe reset \n\nclear \ninput id str6 zone x\n1 \"zoneA\" 10\n2 \"zoneA\" 15\n3 \"zoneB\" 9\n4 \"zoneB\" 12\n5 \"zoneB\" 10\n6 \"zoneB\" 15\n7 \"zoneC\" 6\n8 \"zoneC\" 13\n9 \"zoneC\" 16\nend\nlist\nsave indiv, replace\n\n\n\n     +-----------------+\n     | id    zone    x |\n     |-----------------|\n  1. |  1   zoneA   10 |\n  2. |  2   zoneA   15 |\n  3. |  3   zoneB    9 |\n  4. |  4   zoneB   12 |\n  5. |  5   zoneB   10 |\n     |-----------------|\n  6. |  6   zoneB   15 |\n  7. |  7   zoneC    6 |\n  8. |  8   zoneC   13 |\n  9. |  9   zoneC   16 |\n     +-----------------+\nfile indiv.dta saved\n\n\n\nclear\ninput str6 zone xmean\n\"zoneA\" 11\n\"zoneB\" 12\n\"zoneC\" 13\nend\nlist\nsave zone, replace\n\n\n\n     +---------------+\n     |  zone   xmean |\n     |---------------|\n  1. | zoneA      11 |\n  2. | zoneB      12 |\n  3. | zoneC      13 |\n     +---------------+\nfile zone.dta saved\n\n\n\nframe create indiv\nframe indiv: use indiv\nframe create zone\nframe zone: use zone\n\nAprès avoir lié les deux frames (m:1), on va calculer directement la différence entre la valeur observée pour chaque individu de la variable x et sa moyenne par zone (xmean). On utilise la fonction frval comme argument de la commande generate.\n\nframe change indiv\nfrlink m:1 zone, frame(zone) gen(link)\nlist\n\n(all observations in frame indiv matched)\n\n     +------------------------+\n     | id    zone    x   link |\n     |------------------------|\n  1. |  1   zoneA   10      1 |\n  2. |  2   zoneA   15      1 |\n  3. |  3   zoneB    9      2 |\n  4. |  4   zoneB   12      2 |\n  5. |  5   zoneB   10      2 |\n     |------------------------|\n  6. |  6   zoneB   15      2 |\n  7. |  7   zoneC    6      3 |\n  8. |  8   zoneC   13      3 |\n  9. |  9   zoneC   16      3 |\n     +------------------------+\n\n\ngen = var1 - frval(nom_link, var2)\n\ngen diffx = x - frval(link, xmean)\nlist\n\n\n     +--------------------------------+\n     | id    zone    x   link   diffx |\n     |--------------------------------|\n  1. |  1   zoneA   10      1      -1 |\n  2. |  2   zoneA   15      1       4 |\n  3. |  3   zoneB    9      2      -3 |\n  4. |  4   zoneB   12      2       0 |\n  5. |  5   zoneB   10      2      -2 |\n     |--------------------------------|\n  6. |  6   zoneB   15      2       3 |\n  7. |  7   zoneC    6      3      -7 |\n  8. |  8   zoneC   13      3       0 |\n  9. |  9   zoneC   16      3       3 |\n     +--------------------------------+\n\n\n[05-07-2023]"
  },
  {
    "objectID": "formation/chapitre6.html#avec-des-frames",
    "href": "formation/chapitre6.html#avec-des-frames",
    "title": "Fusion",
    "section": "0.3 Avec des frames",
    "text": "0.3 Avec des frames"
  },
  {
    "objectID": "formation/chapitre6.html#footnotes",
    "href": "formation/chapitre6.html#footnotes",
    "title": "Opérations sur les bases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCela peut être plusieurs bases.↩︎\nm:1 renvoit un message d’erreur. Dans ce sens, la base active doit être period_act et la base using sexe.↩︎"
  },
  {
    "objectID": "formation/chapitre6.html#appariement-avec-ftools",
    "href": "formation/chapitre6.html#appariement-avec-ftools",
    "title": "Fusion",
    "section": "0.3 Appariement avec ftools",
    "text": "0.3 Appariement avec ftools"
  },
  {
    "objectID": "formation/chapitre6.html#appariement-avec-des-frames",
    "href": "formation/chapitre6.html#appariement-avec-des-frames",
    "title": "Fusion",
    "section": "0.4 Appariement avec des frames",
    "text": "0.4 Appariement avec des frames"
  },
  {
    "objectID": "formation/chapitre6.html#transposition-avec-gtools",
    "href": "formation/chapitre6.html#transposition-avec-gtools",
    "title": "Fusion",
    "section": "1.3 Transposition avec gtools",
    "text": "1.3 Transposition avec gtools"
  },
  {
    "objectID": "formation/chapitre0.html",
    "href": "formation/chapitre0.html",
    "title": "Présentation",
    "section": "",
    "text": "N’intéressera peut-être pas les utilisatrices et utilisateurs aguerri.e.s à Stata…. quoique. On trouve toujours des années plus tard des nouvelles commandes qui facilitent vraiment les choses, ou une introduction aux frames, qui revisitent les appariements de bases.\nLes chapitres sont téléchargeables en format docx.\nMaj dela formation:\n\n28/07/22 : Les variables. Chapitre 5 [todo: faire un topo sur les formats date avant fin 2023]\n07/10/22 : Introduction. Chapitre 1\n07/10/22 : L’environnement. Chapitre 2\n22/02/23 : Le langage Stata. Chapitre 3\n22/02/23 : Les bases de données. Chapitre 4 [introduction aux frame introduites avec la v16]\n05/07/23 : Opérations sur les bases de données. Chapitre 6 [début reprise du chapitre]\n\nProgrammes des chapitres:\n\nChapitre3\nChapitre4\nChapitre5\nChapitre6"
  },
  {
    "objectID": "formation/chapitre.html",
    "href": "formation/chapitre.html",
    "title": "Opérations sur les bases",
    "section": "",
    "text": "Salut"
  },
  {
    "objectID": "formation/chapitre5.html",
    "href": "formation/chapitre5.html",
    "title": "Les variables",
    "section": "",
    "text": "Programme du chapitre\nCommandes et expressions introduites\nPour accéder aux infomations sur les variables d’une base:\nVariables manager\nFenêtre properties à droite de l’interface principale (mode dévérouillé)\nCommande describe\nsysuse auto, clear\n\ndescribe\n\n\n\n\n(1978 automobile data)\n\nContains data from C:\\Program Files\\Stata18/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2022 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign"
  },
  {
    "objectID": "formation/chapitre5.html#types",
    "href": "formation/chapitre5.html#types",
    "title": "Les variables",
    "section": "1.1 Types",
    "text": "1.1 Types\nStata gère tous les types de variables: numérique, caractère, date. Un type de variable est un type de stockage.\n\nTypes numériques: float, long, double, int et byte.\nTypes caractère: str# et strL (très grandes chaînes de caractères). # est la longueur de la chaîne de caractère, elle ne peut pas excéder 2046 pour le type str.\n\nPlus d’informations: help data types\nModification du type de variable\n\nOptimisation du poids en mémoire avec compress\nCommande recast\n\nOptimisation du poids de la base\n\ncompress \n\n  variable mpg was int now byte\n  variable rep78 was int now byte\n  variable trunk was int now byte\n  variable turn was int now byte\n  variable make was str18 now str17\n  (370 bytes saved)\n\n\nPassage de la variable make en str3\nEn réduisant le type, on va tronquer les chaînes de caractères qui ne garderont que les 3 premières lettres, à manupiler avec prudence donc. Pour cette opération, Stata impose une confirmation avec l’option force.\nVariable d’origine\n\ndes make \nlist make in 1/10\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str17   %-17s                 Make and model\n\n     +---------------+\n     | make          |\n     |---------------|\n  1. | AMC Concord   |\n  2. | AMC Pacer     |\n  3. | AMC Spirit    |\n  4. | Buick Century |\n  5. | Buick Electra |\n     |---------------|\n  6. | Buick LeSabre |\n  7. | Buick Opel    |\n  8. | Buick Regal   |\n  9. | Buick Riviera |\n 10. | Buick Skylark |\n     +---------------+\n\n\nModification du type\n\nrecast str3 make, force\ndes make\nlist make in 1/10\n\nmake:  74 values changed\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str3    %-9s                  Make and model\n\n     +------+\n     | make |\n     |------|\n  1. | AMC  |\n  2. | AMC  |\n  3. | AMC  |\n  4. | Bui  |\n  5. | Bui  |\n     |------|\n  6. | Bui  |\n  7. | Bui  |\n  8. | Bui  |\n  9. | Bui  |\n 10. | Bui  |\n     +------+"
  },
  {
    "objectID": "formation/chapitre5.html#format",
    "href": "formation/chapitre5.html#format",
    "title": "Les variables",
    "section": "1.2 Format",
    "text": "1.2 Format\nIl s’agit du format d’affichage des valeurs des variables. Ils peuvent être modifiés sans que le type soit changé (décimales, alignement….).\nVariables numérique:\n- format g: général (définition un peu obsure pour moi) - format f: fixe - plusieurs format d’affichage pour les variables de type dates: %td (date avec jour-mois-année), %tm (mois), %tq (trimestre), %tw (semaine). Les dates et leur manipulation sont un domaines très riche, et feront l’objet d’une courte présentation en fin de chapite.\nOn peut changer le format d’affichage avec la commande format. Si le format est de type général (g), il est préférable de passer à un format de type fixe (f) On peut un même format à une liste de variables.\nSyntaxe:\nformat %format varlist\nExemple: changement du nombre de décimales\nDans la base auto, la variable gear_ratio est de format fixe à 2 décimales (%6.2f). Pour supprimer, à l’affichage, les deux décimales: afficher les valeurs sans décimales.\n\nlist gear_ratio in 1/10\n\n\n     +----------+\n     | gear_r~o |\n     |----------|\n  1. |     3.58 |\n  2. |     2.53 |\n  3. |     3.08 |\n  4. |     2.93 |\n  5. |     2.41 |\n     |----------|\n  6. |     2.73 |\n  7. |     2.87 |\n  8. |     2.93 |\n  9. |     2.93 |\n 10. |     3.08 |\n     +----------+\n\n\n\nformat %6.0f gear_ratio\nlist gear_ratio in 1/10\n\n\n     +----------+\n     | gear_r~o |\n     |----------|\n  1. |        4 |\n  2. |        3 |\n  3. |        3 |\n  4. |        3 |\n  5. |        2 |\n     |----------|\n  6. |        3 |\n  7. |        3 |\n  8. |        3 |\n  9. |        3 |\n 10. |        3 |\n     +----------+\n\n\nExemple: aligner le nombre décimal reporté avec summarize sur le format de la variable\nAvec l’option format appliquée à la commande summarize on peut automatiquement réduire le nombre de décimales reportées dans l’output\n\nsum gear_ratio\nsum gear_ratio, d\n\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         2.19           2.19\n 5%         2.28           2.24\n10%         2.43           2.26       Obs                  74\n25%         2.73           2.28       Sum of wgt.          74\n\n50%        2.955                      Mean           3.014865\n                        Largest       Std. dev.      .4562871\n75%         3.37           3.78\n90%         3.72           3.78       Variance       .2081979\n95%         3.78           3.81       Skewness       .2191658\n99%         3.89           3.89       Kurtosis       2.101812\n\n\nAvec l’option format\n\nsum gear_ratio, format\nsum gear_ratio, d format\n\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n  gear_ratio |         74           3           0          2          4\n\n                         Gear ratio\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%            2              2\n 5%            2              2\n10%            2              2       Obs                  74\n25%            3              2       Sum of wgt.          74\n\n50%            3                      Mean                  3\n                        Largest       Std. dev.             0\n75%            3              4\n90%            4              4       Variance              0\n95%            4              4       Skewness              0\n99%            4              4       Kurtosis              2"
  },
  {
    "objectID": "formation/chapitre5.html#modification-du-type",
    "href": "formation/chapitre5.html#modification-du-type",
    "title": "Les variables",
    "section": "1.3 Modification du type",
    "text": "1.3 Modification du type\nIl est possible de basculer d’un type caractère à un type numérique et inversement\nDe numérique à caractère\n Si la variable numérique n’a pas de label affecté sur les modalités, ou qu’on ne veut pas conserver l’information données par les labels, on peut utiliser la commande tostring. On peut créer une nouvelle variable avec l’option gen() ou remplacer la variable numérique d’origine avec l’option replace. Une des deux options doit être nécessairement renseignée.\nSyntaxe:\n  tostring [varlist], gen(nom_varlist)\n  tostring [varlist], replace\nExemple avec la variable foreign qui prend les valeur 0 et 1 avec les labels “domestic” (0) et “foreign” (1)\n\ntostring foreign, gen(foreign_str)\ndes foreign foreign_str\n\ntab foreign foreign_str\n\nforeign_str generated as str1\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str1    %9s                   Car origin\n\n           |      Car origin\nCar origin |         0          1 |     Total\n-----------+----------------------+----------\n  Domestic |        52          0 |        52 \n   Foreign |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\n\nSi la variable numérique a des labels affectés aux modalités modalités et qu’on souhaite conserver cet information, on utilise la commande decode\nSyntaxe:\n  decode variable, gen(nom_var)\nExemple avec la variable foreign\n\ncapt drop foreign_str\n\ndecode foreign, gen(foreign_str)\n\ndes foreign foreign_str\n\ntab foreign_str\n\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nforeign_str     str8    %9s                   Car origin\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\nDe caractère à numérique\nSi la variable caractère est a une forme numerique (une suite de nombre comme des années, des âges…), on utilise la commande destring. Lorsqu’il y a des des valeurs manquantes à la variable, on doit uiliser l’option force.\nSyntaxe:\n destring [varlist] , gen(nom_varlist) \n destring [varlist] , replace [force]\nExemple avec la variable rep78 qui est transformé dans un premier temps en variables caractère avec tostring puis de nouveau transformé en format numérique avec destring\n\ntostring rep78, replace\ndes rep78\n\ndestring rep78, replace\ndes rep78\n\nrep78 was byte now str1\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           str1    %9s                   Repair record 1978\nrep78: all characters numeric; replaced as byte\n(5 missing values generated)\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           byte    %10.0g                Repair record 1978\n\n\nSi la variable caractère n’est pas de forme numérique et que l’on souhaite récupérer les labels sur les modalités, on peut utiliser la commande encode ou la commande externe sencode (net install st0043_2, force). La seconde permet de remplacer directement la variable d’origine, option particulièrement pratique.. Egalement, cette commande permet plus de souplesse sur le codage de la variable (help sencode pour plus de détail).\nAvec encode ou sencode sans l’option gsort, le numéro de la modalité suivra l’ordre alphabétique des chaînes de caractère de la variable: si la variable caractère à pour valeur (“Homme”, “Femme”), “femme” sera automatiquement codée 1 et “homme” 2.\nSyntaxe:\nencode variable, gen(nom_variable)\nSyntaxe:\nsencode variable, gen(nom_variable) replace gsort()\nExemple avec la variable foreign_str (variable caractère créée précédemment à partir de la variable foreign)\n\nencode foreign_str, gen(foreign2)\n\ntab foreign2\ntab foreign2, nolab\n\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          1 |         52       70.27       70.27\n          2 |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n\n\n\n\n\n\n\nType de variable pour les modèles\n\n\n\nLes variables de type caractères ne sont pas acceptées, Stata renvoie alors un message d’erreur avec no observation. Si c’est le cas, les commandes destring et encode vont s’avérer particulièrement utiles."
  },
  {
    "objectID": "formation/chapitre5.html#generate---replace",
    "href": "formation/chapitre5.html#generate---replace",
    "title": "Les variables",
    "section": "2.1 generate - replace",
    "text": "2.1 generate - replace\nLa création d’une nouvelle variable se fait avec la commande generate généralement tronquée jusqu’à gen.\nSyntaxe:\ngen nom_variable=valeur/fonction [expression: if in inlist inrange...]\nPour remplacer la valeur d’une valeur variable existante on utilise la commande replace. Le nom n’est malheureusement pas tronquable.\nSyntaxe:\nreplace nom_variable=valeur/fonction [expression: if in inlist inrange...]\n\nOn peut utiliser le préfixe bysort\nPour utiliser une fonction mathématique (log, exp, .) =&gt; help math_functions\nPour afficher la liste complète des fonctions (variables caractères, statistiques, pseudo nombre aléatoire, dates.): help function\n\nRappel: attention entre l’opérateur d’affectation (=) et l’expression conditionnelle (==).\n\nCréation d’une indicatrice (0,1)\n On peut rapidement générer des indicatrices (0,1) à partir d’une expression conditionnelle:\nSyntaxe:\ngen x= expression_conditionnelle\nExemple avec la variable rep78. On génère la variable rep2 qui prend la valeur 1 si rep78&gt;3, 0 sinon. Comme il y a des valeurs manquantes dans la variable d’origine, on corrige l’information pour l’indicatrice dont les valeurs manquantes ont été automatiquement affectées à la valeur 0.\n\ngen rep2 = rep78&gt;3\nreplace rep2 = . if rep78==.\ntab rep78 rep2\n\n(5 real changes made, 5 to missing)\n\n    Repair |\n    record |         rep2\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        30          0 |        30 \n         4 |         0         18 |        18 \n         5 |         0         11 |        11 \n-----------+----------------------+----------\n     Total |        40         29 |        69 \n\n\n Remarque: Avec la commande tabulate on peut créer une série d’indicatrices à partir d’une variable catégorielle avec l’option gen(nom_variable)\nSyntaxe:\ntab x, gen(nom_variable)\nExemple avec la variable foreign. Avec tabulate on va générer deux indicatrices: origine1 si foreign=0, et origine2 si foreign=1. Un label à la variable est automatiquement créé indiquant la valeur de la variable d’origine.\n\ntab foreign, gen(origine)\n\ndes origine1 origine2\n\ntab origine1 foreign\ntab origine2 foreign\n\n\n Car origin |      Freq.     Percent        Cum.\n------------+-----------------------------------\n   Domestic |         52       70.27       70.27\n    Foreign |         22       29.73      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\norigine1        byte    %8.0g                 foreign==Domestic\norigine2        byte    %8.0g                 foreign==Foreign\n\nforeign==D |      Car origin\n   omestic |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |         0         22 |        22 \n         1 |        52          0 |        52 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\nforeign==F |      Car origin\n    oreign |  Domestic    Foreign |     Total\n-----------+----------------------+----------\n         0 |        52          0 |        52 \n         1 |         0         22 |        22 \n-----------+----------------------+----------\n     Total |        52         22 |        74"
  },
  {
    "objectID": "formation/chapitre5.html#egen",
    "href": "formation/chapitre5.html#egen",
    "title": "Les variables",
    "section": "2.2 egen",
    "text": "2.2 egen\negen: extented generate\negenmore: package programmé par NJ.Cox qui ajoute des fonctions associée à egen [ssc install egenmore]\nRéservé à l’utilisation de fonctions. Pour obtenir la liste help egen.\n\nExemple: on va créer dans un premier la variable mprice qui reporte pour chaque observation la moyenne de la variable price. Dans un second temps, on va créer la variable mprice_or, mais avec le prix moyen des voitures selon leur origine (foreign). La fonction utilisée est la fonction mean().\n\negen mprice = mean(price)\n\nlist  make price mprice in 1/10\n\n\n     +--------------------------+\n     | make    price     mprice |\n     |--------------------------|\n  1. | AMC     4,099   6165.257 |\n  2. | AMC     4,749   6165.257 |\n  3. | AMC     3,799   6165.257 |\n  4. | Bui     4,816   6165.257 |\n  5. | Bui     7,827   6165.257 |\n     |--------------------------|\n  6. | Bui     5,788   6165.257 |\n  7. | Bui     4,453   6165.257 |\n  8. | Bui     5,189   6165.257 |\n  9. | Bui    10,372   6165.257 |\n 10. | Bui     4,082   6165.257 |\n     +--------------------------+\n\n\n\nbysort foreign: egen mprice_or = mean(price)\n\nlist  make price mprice in 1/5\nlist  make price mprice in 66/70\n\n\n     +-------------------------+\n     | make   price     mprice |\n     |-------------------------|\n  1. | AMC    4,099   6165.257 |\n  2. | AMC    4,749   6165.257 |\n  3. | AMC    3,799   6165.257 |\n  4. | Bui    4,816   6165.257 |\n  5. | Bui    7,827   6165.257 |\n     +-------------------------+\n\n     +-------------------------+\n     | make   price     mprice |\n     |-------------------------|\n 66. | Sub    3,798   6165.257 |\n 67. | Toy    5,899   6165.257 |\n 68. | Toy    3,748   6165.257 |\n 69. | Toy    5,719   6165.257 |\n 70. | VW     7,140   6165.257 |\n     +-------------------------+\n\n\n\n\n\n\n\n\nLes fonctions sum() et total()**\n\n\n\nSans aucune explication, la fonction sum() qui permet d’obtenir une somme incrémentale n’est pas associée à egen mais à generate. En revanche la fonction total() est associée à egen. Il faut le retenir.\nExemple: on veut créer un identifiant numérique (variable id) pour chaque voiture (dans la base on a une seule voiture par nom de voiture).\n\ngen x = 1 \ngen id = sum(x)\n\nlist id make in 1/5\nlist id make in 66/70\n\n\n     +-----------+\n     | id   make |\n     |-----------|\n  1. |  1   AMC  |\n  2. |  2   AMC  |\n  3. |  3   AMC  |\n  4. |  4   Bui  |\n  5. |  5   Bui  |\n     +-----------+\n\n     +-----------+\n     | id   make |\n     |-----------|\n 66. | 66   Sub  |\n 67. | 67   Toy  |\n 68. | 68   Toy  |\n 69. | 69   Toy  |\n 70. | 70   VW   |\n     +-----------+\n\n\nSi on veut reporter le nombre total d’observations dans la base (variable N), avec la fonction total:\n\negen N = total(x)\n\nlist id N make in 1/5\nlist id N make in 66/70\n\n\n     +----------------+\n     | id    N   make |\n     |----------------|\n  1. |  1   74   AMC  |\n  2. |  2   74   AMC  |\n  3. |  3   74   AMC  |\n  4. |  4   74   Bui  |\n  5. |  5   74   Bui  |\n     +----------------+\n\n     +----------------+\n     | id    N   make |\n     |----------------|\n 66. | 66   74   Sub  |\n 67. | 67   74   Toy  |\n 68. | 68   74   Toy  |\n 69. | 69   74   Toy  |\n 70. | 70   74   VW   |\n     +----------------+\n\n\n\n\nOn va le voir, ces deux variables qui ont été générées peuvent l’être directement avec les variables internes dites de comptage.\n\n\n\n\n\n\nPackage gegen (M.Caceres)\n\n\n\n\nPour les volumétries dépassant le million d’observation il est fortement conseillé d’utilisée les commandes associées au package de Mauricio Caceres, ici la commande gege,.\nhttps://gtools.readthedocs.io/en/latest/\nhttps://mthevenin.github.io/stata_programmation/speedup/gtools.html"
  },
  {
    "objectID": "formation/chapitre5.html#todo",
    "href": "formation/chapitre5.html#todo",
    "title": "Les variables",
    "section": "5.1 TODO",
    "text": "5.1 TODO\nFaire un rapide topo sur les variables de type dates"
  },
  {
    "objectID": "formation/chapitre4.html",
    "href": "formation/chapitre4.html",
    "title": "Affectation du répertoire de travail",
    "section": "",
    "text": "SECTION\nCOMMANDES ET EXPRESSIONS\n\n\n\n\nAffectation d’un répertoire de travail\ncd\n\n\nOuverture et sauvegarde d’une base\nuse webuse [set] sysuse save saveold import export usesas savasas set obs insobs\n\n\nDécrire le contenu d’une base\ndescribe list codebook labelbook label list\n\n\nTri, doublon, position des variables\nsort gsort duplicates order\n\n\nDecription statistique des variables\nsummarize mean tabstat violinplot heatplot gjoint tabulate fre tabm catplot\n\n\nIntroductions aux frames\nframe dir frame list frame create frame rename frame copy frame change frame drop frame reset\nLa commande cd (Current Directory), permet d’indiquer le chemin d’accès du répertoire où se trouve la base à ouvrir ou à enregistrer. Si aucun chemin d’accès n’est spécifié, Stata ira chercher la base dans le répertoire par défaut (normalement C: ou D:).\nSyntaxe:\nRemarque\nAvec cette commande, un seul repertoire de travail est actif. On peut élargir les possibilités en affectant des répertoires avec des macros variables locales ou globales"
  },
  {
    "objectID": "formation/chapitre4.html#ouverture",
    "href": "formation/chapitre4.html#ouverture",
    "title": "Affectation du répertoire de travail",
    "section": "1.1 Ouverture",
    "text": "1.1 Ouverture\nCommande use\nSyntaxe sans chargement d’un répertoire:\nuse \"path/nom_base.dta\" [,clear]\nL’option clear permet d’effacer une base en cours d’utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser clear comme instruction avant d’ouvrir une base. on ne supprime pas la base du répertoire (commande erase), elle est juste écrasée dans la session.\nSyntaxe avec affectation d’un répertoire:\ncd \"path\"\nuse \"nom_base.dta\", clear \nou\ncd \"path\"\nclear\nuse \"nom_base.dta\" \nRemarque: pour les bases d’exemples préinstallées, on utilise la commande sysuse. Dans les fichiers d’aide, des exemples font également appels a des bases localisées sur des serveurs qui s’ouvrent avec la commande webuse.\nsysuse auto, clear\n\n\n\n\n\n\nNote\n\n\n\nOuverture d’une base stockée sur un git [github, gitlab …]\nDans un premier temps, comme pour cd il faut charger le répertoire où se trouve localisé la base, avec la commande webuse set. Par exemple sur mon dépôt git, une base d’exemple (logement.dta) pour une commande se trouve à cette adresse: https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint\nPour charger ce répertoire à distance:\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\nOn remarque que le chemin n’est pas identique au simple lien (spécificité des dépôt de type git).\nIl suffit ensuite de charger la base avec webuse\nwebuse logement.dta, clear\nOn revient au dépôt officiel de stata avec webuse set\nEn résumé avec un seul bloc d’instructions:\n\nwebuse set  \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint\"\n\nwebuse \"logement.dta\", clear\n\nwebuse set\n\n(prefix now \"https://raw.githubusercontent.com//mthevenin/stata_graphiques/mast\n&gt; er/ressources/gjoint\")\n(prefix now \"https://www.stata-press.com/data/r18\")"
  },
  {
    "objectID": "formation/chapitre4.html#sauvegarde",
    "href": "formation/chapitre4.html#sauvegarde",
    "title": "Affectation du répertoire de travail",
    "section": "1.2 Sauvegarde",
    "text": "1.2 Sauvegarde\nCommandes save ou saveold\nsave \"path/nom_base.dta\" [, replace]     \nL’option replace permet d’écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l’utiliser dès la première sauvegarde (un message d’avertissement s’affiche).\n\nsysuse auto, clear  \n\nsave auto, replace\n\n(1978 automobile data)\nfile auto.dta saved\n\n\nsaveold permettra d’ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec save il ne sera plus possible d’ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l’encodage Utf8 avec la version 14).\n saveold \"path/nom_base.dta\", [replace] [version(#)] // # = numéro de la version de Stata: \nRemarque:\n\nEcrire l’extension .dta n’est pas obligatoire\nLes doubles quotes ne sont obligatoires que s’il y a un espace dans le chemin d’accès et/ou dans le nom de la base\n\nuse \"ma base\", clear \nuse ma_base,   clear"
  },
  {
    "objectID": "formation/chapitre4.html#autres-formats",
    "href": "formation/chapitre4.html#autres-formats",
    "title": "Affectation du répertoire de travail",
    "section": "1.3 Autres formats",
    "text": "1.3 Autres formats"
  },
  {
    "objectID": "formation/chapitre4.html#importationexportation",
    "href": "formation/chapitre4.html#importationexportation",
    "title": "Affectation du répertoire de travail",
    "section": "1.4 Importation/Exportation",
    "text": "1.4 Importation/Exportation\nExcel et fichiers textes (.txt, .csv)\n\n\nLe plus simple est passer par le menu: files + [Import ou Export] qui dispose d’une fenêtre de prévisualisation.\n\nPour excel les commandes sont import excel et export excel\nPour des fichiers textes type csv (R), les commandes sont import delimited et export delimited\n\n\n**Exemples\n* exportation csv\nexport delimited using \"D:\\D\\stata_temp\\export_csv.csv\", replace\n\n* exportation xls\nexport excel using \"D:\\D\\stata_temp\\export_excel.xls\", firstrow(variables) replace\n\n* importation cxv\nimport delimited \"D:\\D\\stata_temp\\export_csv.csv\",  clear\n\n\n* importation xls\nimport excel \"D:\\D\\stata_temp\\export_excel.xls\", sheet(\"Sheet1\") firstrow clear\nSAS\n\n\nDepuis la version 16 de Stata il est possible d’importer directement des formats sas7bdat. Pas d’exportation possible.\nPour les versions antérieure, la solution installée via sasxport n’est pas satisfaisante. Il est alors conseillé d’utiliser le package externe savasas\n\nSas =&gt; Stata [importation]: commande usesas\n\nStata =&gt; Sas [exportation] : commande savasas\nSi le chemin d’accès à l’exécutable de SAS Windows n’est pas reconnu, il faut récupérer et éditer le fichier sasexe.do (à partir de la ligne 169), dont l’accès est donné dans le fichier d’aide.\n\nPour l’exportation, on peut générer un catalogue de format,en dur, avec l’option format.\n\n\nSPSS\n\n\nDepuis la dernière version de Stata (16), il est possible d’importer directement des bases de ce format.\nPas de possibilité d’exportation directe."
  },
  {
    "objectID": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "href": "formation/chapitre4.html#création-dune-base-de-donnée-ajout-dobservations",
    "title": "Affectation du répertoire de travail",
    "section": "1.5 Création d’une base de donnée, ajout d’observations",
    "text": "1.5 Création d’une base de donnée, ajout d’observations\nOn peut créer une base de donnée, “vide”, avec la commande set obs nbre_observations\nclear \nset obs 100\nA une base existante, on peut ajouter des observations (en valeurs manquante) avec la commande insobs nbre_observation. Par défaut ces observations s’ajouteront après la dernière ligne (option before/after(position) pour renseigner la position de la première observation ajoutée.\ninsobs 10  // ajout de 10 observations à la base"
  },
  {
    "objectID": "formation/chapitre4.html#commande-describe",
    "href": "formation/chapitre4.html#commande-describe",
    "title": "Affectation du répertoire de travail",
    "section": "2.1 Commande describe",
    "text": "2.1 Commande describe\nPermet, sous forme de tableau, d’avoir des renseignement sur une base de donnée: taille en mémoire, nombre d’observations, descriptif des variables (nom, format, labels). La commande est régulièrement tronquée jusqu’à des\nBase courante (ouverte)\nSyntaxe:\ndescribe [varlist , short]\n\nsysuse auto.dta, clear\n\ndes \n\n(1978 automobile data)\n\nContains data from C:\\Program Files\\Stata18/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2022 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nBase stockée (non ouverte)\nOn peut également décrire le contenu d’une base en format .dta en mémoire et non ouverte avec l’argument using \"path/nombase\"\n\ndescribe using  \"https://www.stata-press.com/data/r17/census2.dta\"\n\n\nContains data                                 1980 Census data by state\n Observations:            50                  2 Dec 2020 09:21\n    Variables:            15                  \n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nstate           str13   %-13s                 State\nstate2          str2    %-2s                  Two-letter state abbreviation\nregion          byte    %-8.0g     cenreg     Census region\npop             long    %12.0gc               Population\npoplt5          long    %12.0gc               Pop, &lt; 5 year\npop5_17         long    %12.0gc               Pop, 5 to 17 years\npop18p          long    %12.0gc               Pop, 18 and older\npop65p          long    %12.0gc               Pop, 65 and older\npopurban        long    %12.0gc               Urban population\nmedage          float   %9.2f                 Median age\ndeath           long    %12.0gc               Number of deaths\nmarriage        long    %12.0gc               Number of marriages\ndivorce         long    %12.0gc               Number of divorces\ndrate           int     %9.0g                 Deathrate\nage             byte    %9.0g                 Age\n-------------------------------------------------------------------------------\nSorted by:"
  },
  {
    "objectID": "formation/chapitre4.html#autres-commandes",
    "href": "formation/chapitre4.html#autres-commandes",
    "title": "Affectation du répertoire de travail",
    "section": "2.2 Autres commandes",
    "text": "2.2 Autres commandes\n\nAffichage de la base dans l’output\n\nCommande list\nSyntaxe:\n list [varlist] [expression]\n\nlist price mpg turn foreign in 1/10\n\n\n     +--------------------------------+\n     |  price   mpg   turn    foreign |\n     |--------------------------------|\n  1. |  4,099    22     40   Domestic |\n  2. |  4,749    17     40   Domestic |\n  3. |  3,799    22     35   Domestic |\n  4. |  4,816    20     40   Domestic |\n  5. |  7,827    15     43   Domestic |\n     |--------------------------------|\n  6. |  5,788    18     43   Domestic |\n  7. |  4,453    26     34   Domestic |\n  8. |  5,189    20     42   Domestic |\n  9. | 10,372    16     43   Domestic |\n 10. |  4,082    19     42   Domestic |\n     +--------------------------------+\n\n\nSauf exceptions, comme la petite base d’exemple utilisée ici, penser à bien filtrer les informations souhaitées en termes de variables et d’observations.\n\nInformation sur les labels affectés aux variables\n\nCommande labelbook et label list\nlabelbook: affiche les informations sur les labels affectés aux modalités des variables.\nlabelbook [nom_label]\n\nlabelbook origin\n\n\n-------------------------------------------------------------------------------\nValue label origin \n-------------------------------------------------------------------------------\n\n      Values                                    Labels\n       Range:  [0,1]                     String length:  [7,8]\n           N:  2                 Unique at full length:  yes\n        Gaps:  no                  Unique at length 12:  yes\n  Missing .*:  0                           Null string:  no\n                               Leading/trailing blanks:  no\n                                    Numeric -&gt; numeric:  no\n  Definition\n           0   Domestic\n           1   Foreign\n\n   Variables:  foreign\n\n\n\nlabel list [nom_label] donne seulement l’affectation des labels aux valeurs.\n\nlabel list origin\n\norigin:\n           0 Domestic\n           1 Foreign"
  },
  {
    "objectID": "formation/chapitre4.html#tri-dune-base",
    "href": "formation/chapitre4.html#tri-dune-base",
    "title": "Affectation du répertoire de travail",
    "section": "3.1 Tri d’une base",
    "text": "3.1 Tri d’une base\nCommande sort\nsort varlist\n\nLa commande sort n’effectue que des tris croissants. Pour faire un tri décroissant, on peut utiliser la commande gsort. Tris croissants et décroissant peuvent se succéder dans une logique de cluster.\n\nsort varlist =&gt; tri croissant\ngsort + var1 =&gt; croissant var1\ngsort - var1 =&gt; décroissant var1\ngsort + var1 - var2 =&gt; croissant var1 et décroissant var2 dans chaque strate de var1\n\nLe tri d’une peut/doit être réalisé lorsqu’on veut répéter une instruction avec le préfixe bysort: bysort varlist: instruction. Il est imposé lorsqu’on souhaite apparier des bases [voir chapitre 6]\n\n\n* tri croissant sur la variable price\nsort price\n\n* tri décroissant sur la variable prix pour chaque niveau de la variable foreign\ngsort + foreign - price"
  },
  {
    "objectID": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "href": "formation/chapitre4.html#repérage-et-suppression-des-doublons",
    "title": "Affectation du répertoire de travail",
    "section": "3.2 Repérage et suppression des doublons",
    "text": "3.2 Repérage et suppression des doublons\nRepérage et suppression des doublons\nCommande duplicates list/tag/drop [varlist]\nPermet de lister, repérer (avec gen(varname) ) ou supprimer des observations répliquées. Si la liste de variables n’est pas renseignée, elles toutes sont utilisées.\nSyntaxe:\nduplicates list [varlist]\n\nduplicates tag [varlist], gen(var)\n\nduplicates drop [varlist]"
  },
  {
    "objectID": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "href": "formation/chapitre4.html#modifier-la-place-des-variables-dans-la-base",
    "title": "Affectation du répertoire de travail",
    "section": "3.3 Modifier la place des variables dans la base",
    "text": "3.3 Modifier la place des variables dans la base\nCommande order\nSyntaxe:\norder varlist, [first/last] [after/before(varname)]\n\norder foreign, first\norder rep78, after(foreign)\n\ndes\n\n\nContains data from C:\\Program Files\\Stata18/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2022 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nforeign         byte    %8.0g      origin     Car origin\nrep78           int     %8.0g                 Repair record 1978\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\n-------------------------------------------------------------------------------\nSorted by: foreign\n\n\nCette opération est particulièrement pour organiser sa base de données après la création de nouvelles variables."
  },
  {
    "objectID": "formation/chapitre4.html#variables-quantitatives",
    "href": "formation/chapitre4.html#variables-quantitatives",
    "title": "Affectation du répertoire de travail",
    "section": "4.1 Variables quantitatives",
    "text": "4.1 Variables quantitatives\n\n4.1.1 Tableaux d’indicateurs\n\n\n\n\n\n\nNote\n\n\n\nLes commandes qui sont rapidement décrites afficheront des indicateurs communs, typiquement la moyenne. Elles se distinguent par la forme de leur output facilitant plus ou moins les comparaisons, les possibilités offertes en termes de pondération, et sur la récupération des résultats (macro).\n\n\nCommande summarize\nComme son l’indique, la commande summarize, avec l’option detail (d) donne un résumé complet de la distribution d’une variable quantitative: moyenne, variance, quantiles, symétrie, applatissement ..nom l’indique l.)\nSyntaxe:\nsummarize varlist [, detail]\nSi on indique pas le nom d’au moins une variable, toutes les variables de la base seront sélectionnées.\nLa commande peut-être tronquée jusqu’à sum [Warning: il existe également une fonction sum pour générer des cumuls lors d’une création de variable - voir chapitre 5].\n\nsum price\n\nsum \n\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n       price |         74    6165.257    2949.496       3291      15906\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n     foreign |         74    .2972973    .4601885          0          1\n       rep78 |         69    3.405797    .9899323          1          5\n        make |          0\n       price |         74    6165.257    2949.496       3291      15906\n         mpg |         74     21.2973    5.785503         12         41\n-------------+---------------------------------------------------------\n    headroom |         74    2.993243    .8459948        1.5          5\n       trunk |         74    13.75676    4.277404          5         23\n      weight |         74    3019.459    777.1936       1760       4840\n      length |         74    187.9324    22.26634        142        233\n        turn |         74    39.64865    4.399354         31         51\n-------------+---------------------------------------------------------\ndisplacement |         74    197.2973    91.83722         79        425\n  gear_ratio |         74    3.014865    .4562871       2.19       3.89\n\n\n\nsum price length, d\n\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3748           3299\n10%         3895           3667       Obs                  74\n25%         4195           3748       Sum of wgt.          74\n\n50%       5006.5                      Mean           6165.257\n                        Largest       Std. dev.      2949.496\n75%         6342          13466\n90%        11385          13594       Variance        8699526\n95%        13466          14500       Skewness       1.653434\n99%        15906          15906       Kurtosis       4.819188\n\n                        Length (in.)\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%          142            142\n 5%          154            147\n10%          157            149       Obs                  74\n25%          170            154       Sum of wgt.          74\n\n50%        192.5                      Mean           187.9324\n                        Largest       Std. dev.      22.26634\n75%          204            221\n90%          218            222       Variance       495.7899\n95%          221            230       Skewness      -.0409746\n99%          233            233       Kurtosis        2.04156\n\n\n\nbysort foreign: sum price, d\n\n\n-------------------------------------------------------------------------------\n-&gt; foreign = Domestic\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3291           3291\n 5%         3667           3299\n10%         3955           3667       Obs                  52\n25%         4184           3799       Sum of wgt.          52\n\n50%       4782.5                      Mean           6072.423\n                        Largest       Std. dev.      3097.104\n75%         6234          13466\n90%        11385          13594       Variance        9592055\n95%        13594          14500       Skewness       1.777939\n99%        15906          15906       Kurtosis       5.090316\n\n-------------------------------------------------------------------------------\n-&gt; foreign = Foreign\n\n                            Price\n-------------------------------------------------------------\n      Percentiles      Smallest\n 1%         3748           3748\n 5%         3798           3798\n10%         3895           3895       Obs                  22\n25%         4499           3995       Sum of wgt.          22\n\n50%         5759                      Mean           6384.682\n                        Largest       Std. dev.      2621.915\n75%         7140           9690\n90%         9735           9735       Variance        6874439\n95%        11995          11995       Skewness       1.215236\n99%        12990          12990       Kurtosis       3.555178\n\n\n\n\nAvantage: récupération des résultats sous forme de macro rapide.\nInconvénients: pas de sélection des indicateurs avec l’option detail, output pas adapté aux comparaisons.\n\nExtrait de l’aide summarize (help summarize)\n    summarize stores the following in r():\n\n    Scalars   \n      r(N)           number of observations\n      r(mean)        mean\n      r(skewness)    skewness (detail only)\n      r(min)         minimum\n      r(max)         maximum\n      r(sum_w)       sum of the weights\n      r(p1)          1st percentile (detail only)\n      r(p5)          5th percentile (detail only)\n      r(p10)         10th percentile (detail only)\n      r(p25)         25th percentile (detail only)\n      r(p50)         50th percentile (detail only)\n      r(p75)         75th percentile (detail only)\n      r(p90)         90th percentile (detail only)\n      r(p95)         95th percentile (detail only)\n      r(p99)         99th percentile (detail only)\n      r(Var)         variance\n      r(kurtosis)    kurtosis (detail only)\n      r(sum)         sum of variable\n      r(sd)          standard deviation\nInformations enregistrées pour la variable price\n\nqui sum price, d\n\nreturn list\n\n\nscalars:\n                  r(N) =  74\n              r(sum_w) =  74\n               r(mean) =  6165.256756756757\n                r(Var) =  8699525.97426879\n                 r(sd) =  2949.495884768919\n           r(skewness) =  1.653433511704859\n           r(kurtosis) =  4.819187528464004\n                r(sum) =  456229\n                r(min) =  3291\n                r(max) =  15906\n                 r(p1) =  3291\n                 r(p5) =  3748\n                r(p10) =  3895\n                r(p25) =  4195\n                r(p50) =  5006.5\n                r(p75) =  6342\n                r(p90) =  11385\n                r(p95) =  13466\n                r(p99) =  15906\n\n\nmean\nN’affiche que la moyenne et ses statistiques associées. L’option over permet de comparer les valeurs moyennes des modalités d’une variable catégorielle (over(varname)) ou un croisement des modalités de plusieurs variables (over(varlist))\n\nmean price  \nmean price, over(foreign)\nmean price, over(foreign rep78)\n\n\nMean estimation                             Number of obs = 74\n\n--------------------------------------------------------------\n             |       Mean   Std. err.     [95% conf. interval]\n-------------+------------------------------------------------\n       price |   6165.257    342.872      5481.914    6848.600\n--------------------------------------------------------------\n\nMean estimation                                Number of obs = 74\n\n-----------------------------------------------------------------\n                |       Mean   Std. err.     [95% conf. interval]\n----------------+------------------------------------------------\nc.price@foreign |\n      Domestic  |   6072.423    429.491      5216.449    6928.398\n       Foreign  |   6384.682    558.994      5270.608    7498.756\n-----------------------------------------------------------------\n\nMean estimation                                      Number of obs = 69\n\n-----------------------------------------------------------------------\n                      |       Mean   Std. err.     [95% conf. interval]\n----------------------+------------------------------------------------\nc.price@foreign#rep78 |\n          Domestic#1  |   4564.500    369.500      3827.174    5301.826\n          Domestic#2  |   5967.625   1265.494      3442.372    8492.878\n          Domestic#3  |   6607.074    704.611      5201.044    8013.104\n          Domestic#4  |   5881.556    530.673      4822.614    6940.497\n          Domestic#5  |   4204.500    220.500      3764.499    4644.501\n           Foreign#1  |      0.000  (no observations)\n           Foreign#2  |      0.000  (no observations)\n           Foreign#3  |   4828.667    742.249      3347.532    6309.801\n           Foreign#4  |   6261.444    632.031      5000.247    7522.642\n           Foreign#5  |   6292.667    921.876      4453.091    8132.242\n-----------------------------------------------------------------------\n\n\n\nAvantage: output synthétique si la moyenne de plusieurs groupes comparées\nInconvénients: récupération des résultats via une matrice (on oublie)\n\ntabstat\nPermet de sélectionner les indicateurs avec l’option stat() (par défaut la moyenne). L’option by() permet de comparer le ou les indicateurs pour chaque niveau d’une variable catégorielle. Dans ce cas tabstat affiche également les résultats sur l’ensemble des observations (sinon ajouter l’option nototal).\n\ntabstat price  \ntabstat price mpg, by(foreign)\n\n\n    Variable |      Mean\n-------------+----------\n       price |  6165.257\n------------------------\n\nSummary statistics: Mean\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n Foreign |  6384.682  24.77273\n---------+--------------------\n   Total |  6165.257   21.2973\n------------------------------\n\n\nExtrait de l’aide tabstat (help tabstat)\n\n        mean            mean\n        count           count of nonmissing observations\n        n               same as count\n        sum             sum\n        max             maximum\n        min             minimum\n        range           range = max - min\n        sd              standard deviation\n        variance        variance\n        cv              coefficient of variation (sd/mean)\n        semean          standard error of mean (sd/sqrt(n))\n        skewness        skewness\n        kurtosis        kurtosis\n        p1              1st percentile\n        p5              5th percentile\n        p10             10th percentile\n        p25             25th percentile\n        median          median (same as p50)\n        p50             50th percentile (same as median)\n        p75             75th percentile\n        p90             90th percentile\n        p95             95th percentile\n        p99             99th percentile\n        iqr             interquartile range = p75 - p25\n        q               equivalent to specifying p25 p50 p75\nSi on souhaite ajouter la médiane\n\ntabstat price mpg, by(foreign) stat(mean median)\n\n\nSummary statistics: Mean, p50\nGroup variable: foreign (Car origin)\n\n foreign |     price       mpg\n---------+--------------------\nDomestic |  6072.423  19.82692\n         |    4782.5        19\n---------+--------------------\n Foreign |  6384.682  24.77273\n         |      5759      24.5\n---------+--------------------\n   Total |  6165.257   21.2973\n         |    5006.5        20\n------------------------------\n\n\n\n\n4.1.2 Graphiques\n[MAJ EN COURS: bcp de nouveautés]\nJuste une rapide présentation de quelques visualisations permettant d’explorer des distributions.\nUne seule distribution: graph box/hbox , histogram, violinplot (externe)\nPlusieurs distributions: violinplot (externe) Deux distribution croisée: hexplot (externe), gjoint (externe)\nBoxplot\ngraph hbox mpg, \ngraph hbox mpg, over(foreign)   \n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\nHistogramme\nhistogram mpg, percent \nhistogram mpg, percent by(foreign)\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison\n\n\n\n\n\nDans le langage de Stata, ce type de graphique est appelé oneway.\nL’altération de son aspect avec les options n’est pas très flexible, surtout au niveau des couleurs.\nPour les histogrammes, il y a une version twoway qui permet d’empilé plusieurs histogrammes dans un même graphique, mais généralement la visualisation n’est pas optimale. Préférer en ce cas là une approche par les densités (voir violinplot - comparaison III).\nConseil de sémiologie graphique: garder l’axe quantitatif/continu sur les abcisses .\n\nViolinplot (Ben Jann)\nToujours beaucoup d’options dans les commandes de magik B.Jann. Se reporter à son tutoriel sur github pour l’installation (nécessite l’installation de dépendances) Lien\nviolinplot mpg, fill\n\nviolinplot mpg, nobox over(foreign) left overlay nomedian  dscale(.) \n\nviolinplot mpg, fill over(foreign)\n\nviolinplot mpg, fill split(foreign) horizontal\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nComparaison I\n\n\n\n\n\n\n\nComparaison II\n\n\n\n\n\nComparaison III\n\n\n\n\nDeux variables quantitatives\n\nUne nuage de point pêche rapidement lorsque le nombre d’observations augmente, par exemple audelà de 200.\nSolutions:\n\nCourbes de niveaux\nHeatplot/hexplot: l’idée est de visualiser un histogramme “vu du dessuss”, la hauteurs des barres étant données par un différentiel de couleur issues d’une palette séquentielle (du clair au foncé par exemple).\n\n\nssc install heatplot, replace  \n\nIl peut-être intéressant d’ajouté les distributions marginales des deux variables. J’ai programmé une petite commande (encore en version très alpha): gjoint. Tout le mérite revient à B.Jann pour la commande hexplot (j’ai juste combiné hexplot avec des histogrammes).\n\nnet install gjoint, from(\"https://raw.githubusercontent.com/mthevenin/stata_graphiques/master/ressources/gjoint/\") replace\nhexplot price mpg, colors(flare)\ngjoint price mpg, palette(flare)\n\n\n\n\n\nhexplot\n\n\n\n\n\nhexplot"
  },
  {
    "objectID": "formation/chapitre4.html#variables-catégorielles",
    "href": "formation/chapitre4.html#variables-catégorielles",
    "title": "Affectation du répertoire de travail",
    "section": "4.2 Variables catégorielles",
    "text": "4.2 Variables catégorielles\nLa principale commande est tabulate (tab). On peut l’utiliser avec des variables de type string.\nSyntaxe (tableau croisé):\ntab var1 var2 [, mis nofreq row col sort ......]\n\nPar défaut, l’ordre d’affichage suis la valeur de la modalité si la variable est de type numérique et l’ordre alphabétique pour une variable de type caractère. On peut utiliser l’option sort pour afficher par ordre croissant des effectifs observés [ou utiliser la commande externe tabsort qui offre plus de possibilités]\nAutres commandes (externe): fre [B.Jann], tabm [NJ.Cox], tabsort [NJ.Cox]\n\nssc install fre\nssc install tabsort\nssc install tabm\n\ntab rep78, mis\ntab rep78, mis sort \ntab rep78 foreign, nolab mis\n\nfre rep78 \n\ntabsort rep78\n\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          1 |          2        2.70        2.70\n          2 |          8       10.81       13.51\n          3 |         30       40.54       54.05\n          4 |         18       24.32       78.38\n          5 |         11       14.86       93.24\n          . |          5        6.76      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          3 |         30       40.54       40.54\n          4 |         18       24.32       64.86\n          5 |         11       14.86       79.73\n          2 |          8       10.81       90.54\n          . |          5        6.76       97.30\n          1 |          2        2.70      100.00\n------------+-----------------------------------\n      Total |         74      100.00\n\n    Repair |\n    record |      Car origin\n      1978 |         0          1 |     Total\n-----------+----------------------+----------\n         1 |         2          0 |         2 \n         2 |         8          0 |         8 \n         3 |        27          3 |        30 \n         4 |         9          9 |        18 \n         5 |         2          9 |        11 \n         . |         4          1 |         5 \n-----------+----------------------+----------\n     Total |        52         22 |        74 \n\nrep78 -- Repair record 1978\n-----------------------------------------------------------\n              |      Freq.    Percent      Valid       Cum.\n--------------+--------------------------------------------\nValid   1     |          2       2.70       2.90       2.90\n        2     |          8      10.81      11.59      14.49\n        3     |         30      40.54      43.48      57.97\n        4     |         18      24.32      26.09      84.06\n        5     |         11      14.86      15.94     100.00\n        Total |         69      93.24     100.00           \nMissing .     |          5       6.76                      \nTotal         |         74     100.00                      \n-----------------------------------------------------------\n\n     Repair |\nrecord 1978 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n          3 |         30       43.48       43.48\n          4 |         18       26.09       69.57\n          5 |         11       15.94       85.51\n          2 |          8       11.59       97.10\n          1 |          2        2.90      100.00\n------------+-----------------------------------\n      Total |         69      100.00\n\n\nGraphiques\nNiveau graphique, les possibilités restent toujours assez limitées pour les variables discrètes (et on abandonne l’idée des horribles camemberts).\nOn privilégiera ici la commande de NJ.Cox, catplot\nssc install catplot\n\ncatplot rep78, percent \ncatplot rep78, percent over(foreign)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSans comparaison\n\n\n\n\n\nAvec comparaison"
  },
  {
    "objectID": "formation/chapitre4.html#stata-18",
    "href": "formation/chapitre4.html#stata-18",
    "title": "Affectation du répertoire de travail",
    "section": "5.1 Stata 18",
    "text": "5.1 Stata 18\nAvec la nouvelle version, il est possible de supprimer plusieurs frames avec frame drop. Toujours à l’exception de celle qui est active.\n:::\nframe reset\nOn peut supprimer toutes les frames, dont celle chargée dans l’interface avec frame reset. Dans ce cas il n’y a plus de base chargée dans la session.\n\nframe reset\nsysuse auto, clear\nframe rename default auto\n\n(1978 automobile data)\n\n\n\nframe reset \n\ndes\n\n\nContains data\n Observations:             0                  \n    Variables:             0                  \nSorted by:"
  }
]