[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Cette formation n’intéressera vraisemblablement pas les utilisatrices et utilisateurs aguerri.e.s à Stata…. quoique, on trouve toujours des années plus tard des nouvelles commandes qui facilitent vraiment les choses, par exemple sur la rapide reprise du chapitre 5, la commande sencode (s pour super). Mais également une introduction aux frames, qui revisitent les appariements de bases, et permettent de travailler sur plusieurs bases en parallèle.\nLes chapitres sont téléchargeables en format docx.\nMaj de la formation de 2018:\n\n28/07/22 : Les variables. Chapitre 5 [todo: un topo sur les formats date]\n07/10/22 : Introduction. Chapitre 1\n07/10/22 : L’environnement. Chapitre 2\n22/02/23 : Le langage Stata. Chapitre 3\n22/02/23 : Les bases de données. Chapitre 4 [introduction aux frame introduites avec la v16]\n\nProgrammes des chapitres:\n\nChapitre3\nChapitre4\nChapitre5\n\n\n\n\nSupport réalisé avec Posit-Rstudio - Quarto.\nVersion Stata: 17-SE"
  },
  {
    "objectID": "formation/chapitre6.html#large-à-long",
    "href": "formation/chapitre6.html#large-à-long",
    "title": "Fusion",
    "section": "1.1 large à long",
    "text": "1.1 large à long"
  },
  {
    "objectID": "formation/chapitre6.html#long-à-large",
    "href": "formation/chapitre6.html#long-à-large",
    "title": "Fusion",
    "section": "1.2 long à large",
    "text": "1.2 long à large"
  },
  {
    "objectID": "profile/profile1.html",
    "href": "profile/profile1.html",
    "title": "Principe",
    "section": "",
    "text": "Un fichier profile.do est un programme qui s’éxécute à l’ouverture d’une session Stata. Ce programme comporte uniquement des éléments de configuration, par exemples:\n\nCréation d’un log de session automatique. J’y tiens, un problème n’arrive pas toujours qu’aux autre.\nAffectation d’un répertoire temporaire autre que celui par défaut\nModification de la localisation du répertoire ado plus (il est conseillé mettre sur le lecteur D à l’Ined ou tout autre lecteur que le C:)\nToutes les commandes de paramétrisation préfixées par set: contrôle du défilement de l’output, affichage du nombre de décimales dans les tableaux de régression etc…\nParamètres des graphiques: thèmes, police d’affichage… Je conseille d’utiliser à minima grstyle de Ben Jann.\n\nToutes les commandes sont donc insérées dans un seule programme, il est possible de les activer, de les désactiver ou de les modifier très facilement selon l’usage du moment.\n\n\n1 Création et modification d’un fichier profile.do\nLe fichier profile.do doit être impérativement enregistré dans le répertoire user:\n\n\nWindows: \"C:/Users/nom_user/\"\nLinux (serveur Margaux): \"home/Users/nom_user/\"\n\n\nUne fois le programme enregistré, son effet n’est pris en compte que pour les sessions ouvertes ultérieurement et non sur celles en cours. Le programme est chargé uniquement à l’ouverture d’une session, un message apparait dans l’output:\n\n\n\n\n\nPour faciliter l’ouverture et l’enregistrement du fichier sous windows sans avoir à se promener dans l’explorateur de fichiers, on peut enregistrer la localisation du répertoire user avec une macro de type global, ici appelée user, et l’ouvrir rapidement avec l’invite de commande windows sous Stata (! ou shell).\nAffectation du répertoire user dans une macro:\n\nglobal user \"C:/Users/nom_user/\"\n\nOuverture du fichier profile.do avec l’invite de commande:\n\n! $user/profile.do\n\n\n\n2 Exemples\nLes quelques exemples de configurations qui suivent sont forcément orientés vers mon propre usage.\n\nadoplusRépertoire temporaireLog automatiqueCommandes de type setGraphiquesPython\n\n\nChangement de la localisation du répertoire où sont enregistrées les commandes externes. Il est préférable de les localiser dans un lecteur autre que le lecteur C:\n\nsysdir set PLUS \"D:/D/ado/plus\"\nsysdir set PERSONAL \"D:/D/ado/personal\"\n\n\n\nOn peut créer un répertoire qui fera office de répertoire d’enregistrement par défaut des fichiers, et affecter les opérations d’ouvertures et de sauvegardes dans ce répertoire.\n\n* Après création du répertoire stata_temp\ncd \"D:\\D\\stata_temp\\\"\n\nC’est très optionnel: on peut demander à Stata d’afficher à l’ouverture le contenu de ce répertoire\n\nnoisily display as txt    \"------------------------------------\"\nnoisily display as result \"  Contenu du repertoire stata_temp  \"\nnoisily display as txt    \"------------------------------------\"\nnoisily dir \"D:/D/stata_temp/\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSi on change dans un programme le répertoire d’affectation par défaut avec cd, ce répertoire stata_temp ne sera plus reconnu comme répertoire par défaut.\nPour palier ce problème on peut affecter une macro à la localisation de ce répertoire.\n\nglobal tmp \"D:/D/stata_temp/\"\n\n\ncd \"path/mon_projet\"  \n\nuse base, clear\nkeep if x==1\nsave $tmp/base_x1, replace\n\nCette solution comporte néanmoins des limites lorsque le programme est utilisé par plusieurs personnes.\n\n\nLa plus utile de toutes les configurations décrites ici.\nAu préalable, je conseille de créer un répertoire d’enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de stat_temp appelé tout simplement log.\n\ncapture log close statalog\nlocal cdt = \"`c(current_date)'\"\nlocal cdt: subinstr local cdt \" \" \"-\", all\nlocal cti = \"`c(current_time)'\"\nlocal cti: subinstr local cti \":\" \".\", all\nlocal statalogname \"statalog_`cdt'_`cti'.log\"\n\nlog using \"$user/stata_temp/log/`statalogname'\" , text name(statalog)\n\nPour le chemin d’accès, j’utilise le répertoire user enregistré sous forme d’une macro (voir plus haut).\nDans ce répertoire sont enregistrés tous les log de session depuis le 1er février 2022.\n\n\n\n\n\n\n\n\n\nIl n’est pas nécessaire d’ajouter l’option permanently comme le fichier profile est chargé à chaque ouverture de session.\nEnsemble des commandes préfixées par set: help set\n\n\nExemple 1: nombre de décimales reportées dans l’output d’une régression avec set cformats (coef, se et bornes ci), set sformats (statistique du test) et set pformats (p-value).\nSi on souhaite fixer le nombre de décimale pour l’ensemble des statistiques à 2\n\nset cformats %9.2f   // max longueur =9\nset sformats %9.2f   // max longueur =8\nset pformats %9.2f   // max longueur =5\n\nExemple 2: déblocage du défilement de l’output\n\nset more off\n\n\n\nDe nouveau avec une commande de type set on peut dans son fichier profile.do changer le thème par défaut avec set scheme nom_scheme.\nJ’ai maintenant pour (bonne) habitude d’utiliser grstyle de Ben Jann (présentation dans la formation dédiée aux graphiques: https://mthevenin.github.io/stata_graphiques/formation32.html#grstyle-de-b.jann).\nSelon l’humeur du moment, on peut générer un thème graphique visuellement bien plus qualitatif que les thèmes usines de Stata, avec seulement quelques arguments.\n\ngrstyle init\ngrstyle set imesh\ngrstyle set legend 11, nobox\ngrstyle set color tableau\n\nPenser à installer les packafes grstyle** et colorpalette avant.\n\n\nEmpêcher le bug graphique qui fait planter Stata avec Anaconda/miniconda\nL’utilisation de conda - Anaconda ou miniconda - n’est pas recommandé pour exécuter du code python dans un programme Stata. Pour preuve, sans les quelques lignes de codes qui suiven, l’exécution d’un graphique utilisant matplotlib risque de faire crasher la session Stata. C’est très désagréable. Plutôt que d’insérer ce code dans le programme, il est préférable de le mettre une bonne fois pour toute dans le profile.do si python est utilisé via conda. Mieux vaut vérifier la localisation exacte du répertoire plugins, je ne sais pas si le chemin qui suit vaut pour toutes les installation de miniconda/anaconda.\n\npython:\nimport os\nos.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\nend\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nLa section qui suit met a disposition mon fichier profile.do. Tout est mis en ligne de commentaire, il suffit de retirer la balise * et de modifier les chemins si nécessaire."
  },
  {
    "objectID": "profile/profile2.html",
    "href": "profile/profile2.html",
    "title": "Exemple profile.do",
    "section": "",
    "text": "**************************\n* profile.do Ined        *\n* M.Thevenin Ined-SMS    *\n**************************\n\n/* \n- Copier le programme ou une partie selon les besoins danx un .do\n- Désactiver les zônes de commentaire *\n- Enregistrer le fichier profile.do dans le répertoire unser\n- Seulement ici les paramètres que j'utilise. On peut, bien évidemment, en ajouter d'autres\n*/  \n  \n*****************************\n* ado + et personal dans D: *\n***************************** \n\n/* modifier les chemin si nécessaire */  \n  \n* sysdir set PLUS \"D:/D/ado/plus\"\n* sysdir set PERSONAL \"D:/D/ado/personal\"\n\n****************\n** STATA_TEMP **\n****************\n\n/* Créer un répertoire, pas forcément du même nom que celui ci et modifier les chemin */  \n  \n* cd \"D:\\D\\stata_temp\\\"\n\n*************************************************\n* affichage du contenu du repertoire stata_temp *\n*************************************************\n\n* noisily display as txt    \"------------------------------------\"\n* noisily display as result \"  Contenu du repertoire stata_temp  \"\n* noisily display as txt    \"------------------------------------\"\n* noisily dir \"D:/D/stata_temp/\"\n\n\n**************************************************\n* chargement du répertoire  $tmp dans stata_temp *\n**************************************************\n\n/* attention si plusieurs utilisateurs d'un même programme, le chemin de $tmp risque de ne pas être reconnu */\n\n* global tmp \"D:/D/stata_temp/\"\n\n\n\n\n******************************************\n* Creation automatique d'un fichier .log *\n******************************************\n\n/* changer le chemin à l'avant dernière ligne: log using.... */\n\n* capture log close statalog\n* local cdt = \"`c(current_date)'\"\n* local cdt: subinstr local cdt \" \" \"-\", all\n* local cti = \"`c(current_time)'\"\n* local cti: subinstr local cti \":\" \".\", all\n* local statalogname \"statalog_`cdt'_`cti'.log\"\n\n* noisily display \"Nom du log: `statalogname'\"\n*  log using \"D:/D/stata_temp/log/`statalogname'\" , text name(statalog)\n*  noisily display \"\"\n\n\n*****************\n* R source path *\n*****************\n\n* global Rterm_path `\"C:\\Program Files\\R\\R-4.1.2\\bin\\R.exe\"'\n\n* global Rterm_options `\"--slave --vanilla --args  \"`tf1'\" \"`tf2'\" \"'\n\n\n***************************************************\n* supprimer le blocage du défilement  de l'output *\n***************************************************\n\n* set more off\n\n*******************************\n* output regression           *\n*******************************\n\n/* nombre de decimales =3 */\n\n* set cformat %9.3f\n\n/* garder baselevel*/\n\n*set showbaselevels on\n\n*******************************\n*      graphique              *\n*******************************\n\n/* Installer au préalab grstyle et colorpalette */\n\n* grstyle init\n* grstyle set imesh\n* grstyle set legend 11, nobox\n* grstyle set color tableau\n\n\n*******************************\n*      python                 *\n*******************************\n\n/* chargement de l'exécutable */\n\n* capture  set python_exec  \"C:/Users/thevenin_m/AppData/Local/Programs/Python/Python310/python.exe\"\n\n\n****** plugin miniconda\n* python:\n* import os\n* os.environ['QT_QPA_PLATFORM_PLUGIN_PATH']=\"C:\\\\Users\\\\thevenin_m\\\\Miniconda3\\\\Library\\\\plugins\\\\plugins\"\n* end"
  },
  {
    "objectID": "formation/chapitre6.html",
    "href": "formation/chapitre6.html",
    "title": "Opérations sur les bases",
    "section": "",
    "text": "Deux types de fusions:\n\nLa fusion verticale non controlée - empilement - (append)\nla fusion horizontale contrôlée - appariement - (merge).\n\n\n\n\n\nConsiste simplement à ajouter des observations entre plusieurs bases, avec ou non un même jeu de variables.\n\n\n\n\n\n\nOn va généré les deux bases de données avec la commande input (non traité dans cette formation: help input)\n\nclear \ninput str6 id v1 v2\n  \"A\" 8 2 \n  \"B\" 1 2 \n  \"C\" 2 4\nend\n\nlist\n\nsave base1, replace\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\n\nclear \ninput str20 id v1 v2 v3\n  \"D\" 2 5 10\n  \"E\" 12 1 8 \nend\nlist\n\nsave base2, replace\n\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  D    2    5   10 |\n  2. |  E   12    1    8 |\n     +-------------------+\nfile base2.dta saved\n\n\nLa syntaxe de la commande append consiste à ajouter une ou plusieurs bases à la base active avec l’argument using.\n\nappend using base1\nsort id\nlist\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  A    8    2    . |\n  2. |  B    1    2    . |\n  3. |  C    2    4    . |\n  4. |  D    2    5   10 |\n  5. |  E   12    1    8 |\n     +-------------------+\n\n\nOn peut sélectionner les variables de la base qui sera empilée à la base active avec l’option keep.\nDans l’exemple, si la base active est base1, on peut ne pas vouloir ajouter la variable v3 seulement renseignée pour les observations de base2.\n\nuse base1, clear\nappend using base2, keep(id v1 v2)\nlist \n\n(variable id was str6, now str20 to accommodate using data's values)\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n  4. |  D    2    5 |\n  5. |  E   12    1 |\n     +--------------+\n\n\nSi les informations précédentes étaient ventilées dans trois bases, une par variable v, et avec le même niveau d’observation (A,B,C,D,E dans les 3 bases), l’utilisation de append conduirait à une structure empilée non souhaitable avec une réplication des id.\nPour obtenir base finale proprement appariée, il convient de faire une fusion horizontale contrôlée par une une clé d’identification.\n\n\n\n\nFusion contrôlée par une clé d’appariement (variable(s))\nUn merge peut réaliser un empilement (append), mais pas l’inverse.\nLa commande usine est merge. Pour contrôler des niveaux d’identification différents on peut y ajouter 1:1, 1:m, m:1 ou m:m (le dernier prefixe estrarement ou jamais utiliser)\nDepuis Stata 16 on peut réaliser des merge en transformant les bases en frame. Cette solution est très adapté aux appariements de données individuelles avec des données contextuelles. Cette solution sera traitée plus bas.\n\n\n\n\n\n\n\nImportant\n\n\n\nStata demande que les bases soient soit triées (sort) sur la clé d’appariement en amont de l’opération. Sinon un message d’erreur sera renvoyé.\n\n\n\nLa base active (ouverte) est appelée base master\nLa base qui sera appariée à la base ouverte est appelée base using 1\n\nSyntaxe minimale:\nmerge [1:1] [1:m] [m:1] id_var using noms_bases\nPartons des informations suivantes: - Base1 comprend la variable d’identification id (observations A,B,C) et de deux variables numériques v1 et v3 - Base2 comprend la même variable d’identification id (observations B,C,D) et de la variable numérique v3\n Le niveau d’identification est identique dans les deux bases. Il s’agit donc d’un merge 1:1 [one to one]\nOn va de nouveau générer les bases avec input.\n\nclear \ninput str1 id v1 v2 \n\"A\" 8 2 \n\"B\" 1 2\n\"C\" 2 4 \nend\nlist\n\nsort id\nsave base1, replace\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\nRappel: bien faire le sort sur la base using\n\nclear\ninput str1 id v3 \n\"B\" 10 \n\"C\" 8\n\"D\" 10 \nend\nlist \nsave base2, replace \n\n\n\n     +---------+\n     | id   v3 |\n     |---------|\n  1. |  B   10 |\n  2. |  C    8 |\n  3. |  D   10 |\n     +---------+\nfile base2.dta saved\n\n\nPour l’appariement, de nouveau faire le tri\n\nsort id\n\nmerge 1:1 id using base1\n\n\n    Result                      Number of obs\n    -----------------------------------------\n    Not matched                             2\n        from master                         1  (_merge==1)\n        from using                          1  (_merge==2)\n\n    Matched                                 2  (_merge==3)\n    -----------------------------------------\n\n\n\nL’output affiche le résultat de l’appariement à l’aide d’un tableau.\nUne variable, _merge, est générée. Elle permettra de filtrer si nécessaire les observations selon le résultat de l’aapriement. Contrairement à d’autres application, cette opération n’est pas effectuée en amont avec des fonctions où des options spécifiques. Par exemple avec R: left_join, right_join, inner_join. _merge = 1 : observations qui se trouvent seulement dans la base active (master) _merge = 2 : observations qui se trouvent seulement dans la base using (appariée) _merge = 3 : observations communes aux bases master et using.\nLes variables de la base master/active sont positionnées en tête.\n\n\nsort id\nlist\n\n\n     +-------------------------------------+\n     | id   v3   v1   v2            _merge |\n     |-------------------------------------|\n  1. |  A    .    8    2    Using only (2) |\n  2. |  B   10    1    2       Matched (3) |\n  3. |  C    8    2    4       Matched (3) |\n  4. |  D   10    .    .   Master only (1) |\n     +-------------------------------------+\n\n\nSi on souhaite conserver que les observations communes aux deux bases (_merge=3):\n\nkeep if _merge==3\nlist\n\n(2 observations deleted)\n\n     +---------------------------------+\n     | id   v3   v1   v2        _merge |\n     |---------------------------------|\n  1. |  B   10    1    2   Matched (3) |\n  2. |  C    8    2    4   Matched (3) |\n     +---------------------------------+"
  },
  {
    "objectID": "formation/chapitre6.html#append",
    "href": "formation/chapitre6.html#append",
    "title": "Opérations sur les bases",
    "section": "",
    "text": "Consiste simplement à ajouter des observations entre plusieurs bases, avec ou non un même jeu de variables.\n\n\n\n\n\n\nOn va généré les deux bases de données avec la commande input (non traité dans cette formation: help input)\n\nclear \ninput str6 id v1 v2\n  \"A\" 8 2 \n  \"B\" 1 2 \n  \"C\" 2 4\nend\n\nlist\n\nsave base1, replace\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\n\nclear \ninput str20 id v1 v2 v3\n  \"D\" 2 5 10\n  \"E\" 12 1 8 \nend\nlist\n\nsave base2, replace\n\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  D    2    5   10 |\n  2. |  E   12    1    8 |\n     +-------------------+\nfile base2.dta saved\n\n\nLa syntaxe de la commande append consiste à ajouter une ou plusieurs bases à la base active avec l’argument using.\n\nappend using base1\nsort id\nlist\n\n\n     +-------------------+\n     | id   v1   v2   v3 |\n     |-------------------|\n  1. |  A    8    2    . |\n  2. |  B    1    2    . |\n  3. |  C    2    4    . |\n  4. |  D    2    5   10 |\n  5. |  E   12    1    8 |\n     +-------------------+\n\n\nOn peut sélectionner les variables de la base qui sera empilée à la base active avec l’option keep.\nDans l’exemple, si la base active est base1, on peut ne pas vouloir ajouter la variable v3 seulement renseignée pour les observations de base2.\n\nuse base1, clear\nappend using base2, keep(id v1 v2)\nlist \n\n(variable id was str6, now str20 to accommodate using data's values)\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n  4. |  D    2    5 |\n  5. |  E   12    1 |\n     +--------------+\n\n\nSi les informations précédentes étaient ventilées dans trois bases, une par variable v, et avec le même niveau d’observation (A,B,C,D,E dans les 3 bases), l’utilisation de append conduirait à une structure empilée non souhaitable avec une réplication des id.\nPour obtenir base finale proprement appariée, il convient de faire une fusion horizontale contrôlée par une une clé d’identification."
  },
  {
    "objectID": "formation/chapitre6.html#merge",
    "href": "formation/chapitre6.html#merge",
    "title": "Opérations sur les bases",
    "section": "",
    "text": "Fusion contrôlée par une clé d’appariement (variable(s))\nUn merge peut réaliser un empilement (append), mais pas l’inverse.\nLa commande usine est merge. Pour contrôler des niveaux d’identification différents on peut y ajouter 1:1, 1:m, m:1 ou m:m (le dernier prefixe estrarement ou jamais utiliser)\nDepuis Stata 16 on peut réaliser des merge en transformant les bases en frame. Cette solution est très adapté aux appariements de données individuelles avec des données contextuelles. Cette solution sera traitée plus bas.\n\n\n\n\n\n\n\nImportant\n\n\n\nStata demande que les bases soient soit triées (sort) sur la clé d’appariement en amont de l’opération. Sinon un message d’erreur sera renvoyé.\n\n\n\nLa base active (ouverte) est appelée base master\nLa base qui sera appariée à la base ouverte est appelée base using 1\n\nSyntaxe minimale:\nmerge [1:1] [1:m] [m:1] id_var using noms_bases\nPartons des informations suivantes: - Base1 comprend la variable d’identification id (observations A,B,C) et de deux variables numériques v1 et v3 - Base2 comprend la même variable d’identification id (observations B,C,D) et de la variable numérique v3\n Le niveau d’identification est identique dans les deux bases. Il s’agit donc d’un merge 1:1 [one to one]\nOn va de nouveau générer les bases avec input.\n\nclear \ninput str1 id v1 v2 \n\"A\" 8 2 \n\"B\" 1 2\n\"C\" 2 4 \nend\nlist\n\nsort id\nsave base1, replace\n\n\n\n     +--------------+\n     | id   v1   v2 |\n     |--------------|\n  1. |  A    8    2 |\n  2. |  B    1    2 |\n  3. |  C    2    4 |\n     +--------------+\nfile base1.dta saved\n\n\nRappel: bien faire le sort sur la base using\n\nclear\ninput str1 id v3 \n\"B\" 10 \n\"C\" 8\n\"D\" 10 \nend\nlist \nsave base2, replace \n\n\n\n     +---------+\n     | id   v3 |\n     |---------|\n  1. |  B   10 |\n  2. |  C    8 |\n  3. |  D   10 |\n     +---------+\nfile base2.dta saved\n\n\nPour l’appariement, de nouveau faire le tri\n\nsort id\n\nmerge 1:1 id using base1\n\n\n    Result                      Number of obs\n    -----------------------------------------\n    Not matched                             2\n        from master                         1  (_merge==1)\n        from using                          1  (_merge==2)\n\n    Matched                                 2  (_merge==3)\n    -----------------------------------------\n\n\n\nL’output affiche le résultat de l’appariement à l’aide d’un tableau.\nUne variable, _merge, est générée. Elle permettra de filtrer si nécessaire les observations selon le résultat de l’aapriement. Contrairement à d’autres application, cette opération n’est pas effectuée en amont avec des fonctions où des options spécifiques. Par exemple avec R: left_join, right_join, inner_join. _merge = 1 : observations qui se trouvent seulement dans la base active (master) _merge = 2 : observations qui se trouvent seulement dans la base using (appariée) _merge = 3 : observations communes aux bases master et using.\nLes variables de la base master/active sont positionnées en tête.\n\n\nsort id\nlist\n\n\n     +-------------------------------------+\n     | id   v3   v1   v2            _merge |\n     |-------------------------------------|\n  1. |  A    .    8    2    Using only (2) |\n  2. |  B   10    1    2       Matched (3) |\n  3. |  C    8    2    4       Matched (3) |\n  4. |  D   10    .    .   Master only (1) |\n     +-------------------------------------+\n\n\nSi on souhaite conserver que les observations communes aux deux bases (_merge=3):\n\nkeep if _merge==3\nlist\n\n(2 observations deleted)\n\n     +---------------------------------+\n     | id   v3   v1   v2        _merge |\n     |---------------------------------|\n  1. |  B   10    1    2   Matched (3) |\n  2. |  C    8    2    4   Matched (3) |\n     +---------------------------------+"
  },
  {
    "objectID": "formation/chapitre6.html#avec-des-frames",
    "href": "formation/chapitre6.html#avec-des-frames",
    "title": "Fusion",
    "section": "0.3 Avec des frames",
    "text": "0.3 Avec des frames"
  },
  {
    "objectID": "formation/chapitre6.html#footnotes",
    "href": "formation/chapitre6.html#footnotes",
    "title": "Opérations sur les bases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCela peut être plusieurs bases.↩︎"
  },
  {
    "objectID": "formation/chapitre6.html#appariement-avec-ftools",
    "href": "formation/chapitre6.html#appariement-avec-ftools",
    "title": "Fusion",
    "section": "0.3 Appariement avec ftools",
    "text": "0.3 Appariement avec ftools"
  },
  {
    "objectID": "formation/chapitre6.html#appariement-avec-des-frames",
    "href": "formation/chapitre6.html#appariement-avec-des-frames",
    "title": "Fusion",
    "section": "0.4 Appariement avec des frames",
    "text": "0.4 Appariement avec des frames"
  },
  {
    "objectID": "formation/chapitre6.html#transposition-avec-gtools",
    "href": "formation/chapitre6.html#transposition-avec-gtools",
    "title": "Fusion",
    "section": "1.3 Transposition avec gtools",
    "text": "1.3 Transposition avec gtools"
  },
  {
    "objectID": "formation/chapitre0.html",
    "href": "formation/chapitre0.html",
    "title": "Présentation",
    "section": "",
    "text": "N’intéressera sûrement pas les utilisatrices et utilisateurs aguerri.e.s à Stata…. quoique, on trouve toujours des années plus tard des nouvelles commandes qui facilitent vraiment les choses, par exemple sur la rapide reprise du chapitre 5, la commande sencode (s pour super). Mais également une introduction aux frames, qui revisitent les appariements de bases de manière bien plus flexible.\nLes chapitres sont téléchargeables en format docx.\nMaj dela formation:\n\n28/07/22 : Les variables. Chapitre 5 [todo: un topo sur les formats date]\n07/10/22 : Introduction. Chapitre 1\n07/10/22 : L’environnement. Chapitre 2\n22/02/23 : Le langage Stata. Chapitre 3\n22/02/23 : Les bases de données. Chapitre 4 [introduction aux frame introduites avec la v16]\n\nProgrammes des chapitres:\n\nChapitre3\nChapitre4\nChapitre5"
  }
]