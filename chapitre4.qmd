---
jupyter: nbstata
---

# **Les bases de données**

[**Programme du chapitre**](https://mthevenin.github.io/stata_programmation/programme4.do)

*Commandes et expressions introduites*


| SECTION                                       | COMMANDES ET EXPRESSIONS                                                                                       |
|-----------------------------------------------|----------------------------------------------------------------------------------------------------------------|
| **Affectation d'un répertoire de travail**    | `cd`                                                                                                           |
| **Ouverture et sauvegarde d'une base**        | `use` `webuse [set]` `sysuse` `save` `saveold` `import` `export` **`usesas`** **`savasas`** `set obs` `insobs` |
| **Décrire le contenu d'une base**             | `describe` `list` `codebook` `labelbook` `label list`                                                          |
| **Tri, doublon, position des variables**      | `sort` `gsort` `duplicates` `order`                                                                            |
| **Decription statistique des variables**      | `summarize` `mean` `tabstat`  **`violinplot`** **`heatplot`** **`gjoint`**  `tabulate` **`fre`** **`tabm`** **`catplot`** |   
|  **Introductions aux frames**                 | `frame dir` `frame list` `frame create` `frame rename` `frame copy` `frame change` `frame drop` `frame reset`  | 



 * **En gras, commandes externes**
 * *En italique, commandes associées à un chapitre ultérieur*


## **Affectation du répertoire de travail**

La commande ```cd``` (Current Directory), permet d'indiquer le chemin d'accès du répertoire où se trouve la base à ouvrir ou à  enregistrer.   Si aucun chemin d'accès n'est spécifié, Stata ira chercher la base dans le répertoire par défaut (normalement C: ou D:).

**Syntaxe**: 

```markdown
cd "path"
```

**Remarque**  
Avec cette commande, un seul repertoire de travail est actif. On peut élargir les possibilités en affectant des répertoires avec des macros variables locales ou globales

## **Ouverture et sauvegarde d'une base**

### Ouverture

**Commande** ```use```  


Syntaxe sans chargement d'un répertoire:

```markdown
use "path/nom_base.dta" [,clear]
```
 
L'option ```clear``` permet d'effacer une base en cours d'utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser ```clear``` comme instruction avant d'ouvrir une base. on ne supprime pas la base du répertoire (commande ```erase```), elle est juste écrasée dans la session.  

Syntaxe avec affectation d'un répertoire: 

```markdown
cd "path"
use "nom_base.dta", clear 
```

ou

```markdown
cd "path"
clear
use "nom_base.dta" 
```

Remarque: pour les bases d'exemples préinstallées,  on utilise la commande ```sysuse```. Dans les fichiers d'aide, des exemples font également appels a des bases localisées sur des serveurs qui s'ouvrent avec la commande ```webuse```.  


```markdown
sysuse auto, clear
```

:::  callout-note


**Ouverture d'une base stockée sur un git [github, gitlab ...]**

Dans un premier temps, comme pour `cd` il faut charger le répertoire où se trouve localisé la base, avec la commande **`webuse set`**. Par exemple sur mon dépôt git, une base d'exemple (*logement.dta*) pour une commande se trouve à cette adresse: <https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint>  

Pour charger ce répertoire à distance: 

```markdown
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"
```

On remarque que le chemin n'est pas identique au simple lien (spécificité des dépôt de type git).  

Il suffit ensuite de charger la base avec `webuse`

```markdown
webuse logement.dta, clear
```

On revient au dépôt officiel de stata avec `webuse set`

En résumé avec un seul bloc d'instructions:  


```{stata}
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"

webuse "logement.dta", clear

webuse set
```

:::


### Sauvegarde

**Commandes** ```save``` ou ```saveold```  

```markdown
save "path/nom_base.dta" [, replace]     
```

L'option `replace` permet d'écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l'utiliser dès la première sauvegarde (un message d'avertissement s'affiche).  

```{stata}
sysuse auto, clear  

save auto, replace
```


```saveold``` permettra d'ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec `save` il ne sera plus possible d'ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l'encodage Utf8 avec la version 14).


```markdown
 saveold "path/nom_base.dta", [replace] [version(#)] // # = numéro de la version de Stata: 
```
 
Remarque: 

* Ecrire l'extension .dta n'est pas obligatoire
* Les doubles quotes ne sont obligatoires que s'il y a un espace dans le chemin d'accès et/ou dans le nom de la base 

```markdown
use "ma base", clear 
use ma_base,   clear
```

### Autres formats

#### Importation/Exportation

**Excel et fichiers textes (.txt, .csv)**    
<br>

* Le plus simple est passer par le menu: files + [*Import* ou *Export*] qui dispose d'une fenêtre de prévisualisation.
  * Pour excel les commandes sont `import excel` et `export excel`
  * Pour des fichiers textes type csv (R), les commandes sont `import delimited` et `export delimited`

**Exemples

```markdown
* exportation csv
export delimited using "D:\D\stata_temp\export_csv.csv", replace

* exportation xls
export excel using "D:\D\stata_temp\export_excel.xls", firstrow(variables) replace

* importation cxv
import delimited "D:\D\stata_temp\export_csv.csv",  clear


* importation xls
import excel "D:\D\stata_temp\export_excel.xls", sheet("Sheet1") firstrow clear

```


**SAS**    

* Depuis la version 16 de Stata il est possible d'importer directement des formats `sas7bdat`. Pas d'exportation possible.
* Pour les versions antérieure, la solution installée via *sasxport* n'est pas satisfaisante. Il est alors conseillé  d'utiliser le package externe  `savasas`
  * Sas   => Stata [importation]: commande `usesas`  
  * Stata => Sas [exportation]  : commande `savasas`
  * Si le chemin d'accès à l'exécutable de SAS Windows n'est pas reconnu, il faut récupérer et éditer le fichier sasexe.do (à partir de la ligne 169), dont l'accès est donné dans le fichier d'aide.  
  * Pour l'exportation, on peut générer un catalogue de format,en dur, avec l'option `format`.  


**SPSS**  

* Depuis la dernière version de Stata (16), il est possible d'importer directement des bases de ce format.
* Pas de possibilité d'exportation directe.


::: callout-info

## Création d'une base de donnée, ajout d'observations

On peut créer une base de donnée, "vide", avec la commande **`set obs n_obs`**

```markdown
clear 
set obs 100
```

A une base existante, on peut ajouter des observations (en valeurs manquante) avec la commande `insobs nbre_observation`. Par défaut ces observations s'ajouteront après la dernière ligne (option `before/after(position)` pour renseigner la position de la première observation ajoutée.  

```markdown
insobs 10  // ajout de 10 observations à la base
```
:::




# **Décrire le contenu d'une base**

### Commande `describe`

Permet, sous forme de tableau, d'avoir des renseignement sur une base de donnée: taille en mémoire, nombre d'observations, descriptif des variables (nom, format, labels). La commande est régulièrement tronquée jusqu'à `des` 

**Base courante (ouverte)** 

**Syntaxe**: 

```markdown
describe [varlist , short]
```


```{stata}
sysuse auto.dta, clear

des 
```

**Base stockée (non ouverte)**  

On peut également décrire le contenu d'une base en format .dta en mémoire et non ouverte avec l'argument `using "path/nombase"`

```{stata}
describe using  "https://www.stata-press.com/data/r17/census2.dta"
```


### Autres commandes

* **Affichage de la base dans l'output**

Commande `list`  

**Syntaxe**: 

```markdown
 list [varlist] [expression]
```

```{stata}
list price mpg turn foreign in 1/10
```

Sauf exceptions, comme la petite base d'exemple utilisée ici, penser à bien filtrer les informations souhaitées en termes de variables et d'observations.


* **Information sur les labels affectés aux variables**

Commande `labelbook` et `label list`   

`labelbook`: affiche les informations sur les labels affectés aux modalités des variables. 

```markdown
labelbook [nom_label]
```

```{stata}
labelbook origin
```

`label list [nom_label]` donne seulement l'affectation des labels aux valeurs.

```{stata}
label list origin
```


## **Tri, doublon, position des variables**

### Tri d'une base

Commande `sort`   
  
```markdown
sort varlist
```  

* La commande `sort` n'effectue que des tris croissants.  Pour faire un tri décroissant, on peut utiliser la commande    `gsort`. Tris croissants et décroissant peuvent se succéder dans une logique de cluster.
  * `sort varlist`  => tri croissant 
  * `gsort + var1` => croissant   *var1*
  * `gsort - var1` => décroissant *var1*
  * `gsort + var1 - var2` => croissant *var1* et décroissant *var2* dans chaque strate de *var1*
  
* Le tri d'une peut/doit  être réalisé lorsqu'on veut répéter une instruction avec le préfixe ```bysort```: ```bysort varlist: instruction```.  Il est  imposé lorsqu'on souhaite apparier des bases [voir chapitre 6]

```markdown

* tri croissant sur la variable price
sort price

* tri décroissant sur la variable prix pour chaque niveau de la variable foreign
gsort + foreign - price  

```

### Repérage et suppression des doublons

**Repérage et suppression des doublons**  

Commande `duplicates list/tag/drop [varlist]  `  

Permet de lister, repérer (avec `gen(varname)` ) ou supprimer des observations répliquées. Si la liste de variables n'est pas renseignée, elles toutes sont utilisées. 


**Syntaxe**: 

```markdown
duplicates list [varlist]

duplicates tag [varlist], gen(var)

duplicates drop [varlist]
```


### Modifier la place des variables dans la base

Commande `order`

**Syntaxe**: 

```markdown
order varlist, [first/last] [after/before(varname)]
```

```{stata}  
order foreign, first
order rep78, after(foreign)

des
```

Cette opération est particulièrement pour organiser sa base de données après la création de nouvelles variables.

## **Description statistique des variables**

Dans les menus de l'interface principale: **Statistics** => **Summaries, tables & tests**

### Variables quantitatives

#### Tableaux d'indicateurs

::: callout-note
Les commandes qui sont rapidement décrites afficheront des indicateurs communs, typiquement la moyenne. Elles se distinguent par la forme de leur output facilitant plus ou moins les comparaisons, les possibilités offertes en termes de pondération, et sur la récupération des résultats (macro).
:::


**Commande `summarize`** 

Comme son l'indique, la commande `summarize`, avec l'option  `detail` (`d`) donne un résumé complet de la distribution d'une variable quantitative:  moyenne, variance, quantiles, symétrie, applatissement ..nom l'indique l.)

**Syntaxe**: 

```markdown
summarize varlist [, detail]
```

Si on indique pas le nom d'au moins une variable, toutes les variables de la base seront sélectionnées.

La commande peut-être tronquée jusqu'à `sum` [**Warning**: il existe également une fonction `sum` pour générer des cumuls lors d'une création de variable  - voir chapitre 5].  

```{stata}
sum price

sum 
```

```{stata}
sum price length, d
```

```{stata}
bysort foreign: sum price, d
```    

* ***Avantage***: récupération des résultats sous forme de macro rapide.
* ***Inconvénients***: pas de sélection des indicateurs avec l'option `detail`, output pas adapté aux comparaisons.

**Extrait de l'aide summarize (`help summarize`**)

```markdown
    summarize stores the following in r():

    Scalars   
      r(N)           number of observations
      r(mean)        mean
      r(skewness)    skewness (detail only)
      r(min)         minimum
      r(max)         maximum
      r(sum_w)       sum of the weights
      r(p1)          1st percentile (detail only)
      r(p5)          5th percentile (detail only)
      r(p10)         10th percentile (detail only)
      r(p25)         25th percentile (detail only)
      r(p50)         50th percentile (detail only)
      r(p75)         75th percentile (detail only)
      r(p90)         90th percentile (detail only)
      r(p95)         95th percentile (detail only)
      r(p99)         99th percentile (detail only)
      r(Var)         variance
      r(kurtosis)    kurtosis (detail only)
      r(sum)         sum of variable
      r(sd)          standard deviation

```
Informations enregistrées pour la variable *price*

```{stata}
qui sum price, d

return list

```

**`mean`**  

N'affiche que la moyenne et ses statistiques associées. L'option `over` permet de comparer les valeurs moyennes des modalités d'une variable catégorielle (`over(varname)`) ou un croisement des modalités de plusieurs variables (`over(varlist)`)  

```{stata}
mean price  
mean price, over(foreign)
```

* **Avantage**: output synthétique si la moyenne de plusieurs groupes comparées
* **Inconvénients**: récupération des résultats via une matrice (on oublie)


**`tabstat`**

Permet de sélectionner les indicateurs avec l'option `stat()` (par défaut la moyenne). L'option `by()` permet de comparer le ou les indicateurs pour chaque niveau d'une variable catégorielle. Dans ce cas `tabstat` affiche également les résultats sur l'ensemble des observations (sinon ajouter l'option `nototal`).

```{stata}
tabstat price  
tabstat price, by(foreign)
```


**Extrait de l'aide tabstat (`help tabstat`**)

```markdown

        mean            mean
        count           count of nonmissing observations
        n               same as count
        sum             sum
        max             maximum
        min             minimum
        range           range = max - min
        sd              standard deviation
        variance        variance
        cv              coefficient of variation (sd/mean)
        semean          standard error of mean (sd/sqrt(n))
        skewness        skewness
        kurtosis        kurtosis
        p1              1st percentile
        p5              5th percentile
        p10             10th percentile
        p25             25th percentile
        median          median (same as p50)
        p50             50th percentile (same as median)
        p75             75th percentile
        p90             90th percentile
        p95             95th percentile
        p99             99th percentile
        iqr             interquartile range = p75 - p25
        q               equivalent to specifying p25 p50 p75

```


Si on souhaite ajouter la médiane

```{stata}
tabstat mpg, by(foreign) stat(mean median)
```


#### Graphiques  

**[MAJ EN COURS: bcp de nouveautés]**


Juste une rapide présentation de quelques visualisations permettant d'explorer des distributions.


Une seule distribution:   **graph box/hbox** , **histogram**, **`violinplot`** (externe)  
Plusieurs distributions: **`violinplot`** (externe)
Deux distribution croisée: **`hexplot`** (externe), **`gjoint`** (externe) 


**Boxplot**  

```markdown
graph hbox mpg, 
graph hbox mpg, over(foreign)   
```
    
::: {layout-ncol=2}
![Sans comparaison](img4/g1.png)

![Avec comparaison](img4/g2.png)
:::


**Histogramme**

```markdown
histogram mpg, percent 
histogram mpg, percent by(foreign)
```

::: {layout-ncol=2}
![Sans comparaison](img4/g3.png)

![Avec comparaison](img4/g4.png)

:::

* Dans le langage de Stata, ce type de graphique est appelé *oneway*.
* L'altération de son aspect avec les options n'est pas très flexible, surtout au niveau des couleurs.
* Pour les histogrammes, il y a une version *twoway* qui permet d'empilé plusieurs histogrammes dans un même graphique, mais généralement la visualisation n'est pas optimale. Préférer en ce cas là une approche par les **densités** (voir `violinplot` - comparaison III).
* Conseil de sémiologie graphique: garder l'axe quantitatif/continu sur les abcisses .



**Violinplot (Ben Jann)**

Toujours beaucoup d'options dans les commandes de *magik* B.Jann. Se reporter à son tutoriel sur github pour l'installation (nécessite l'installation de dépendances) [Lien](https://github.com/benjann/violinplot/)  


```markdown
violinplot mpg, fill

violinplot mpg, nobox over(foreign) left overlay nomedian  dscale(.) 

violinplot mpg, fill over(foreign)

violinplot mpg, fill split(foreign) horizontal

```

::: {layout-ncol=2}

![Sans comparaison](img4/g5.png)

![Comparaison I](img4/g7.png)

![Comparaison II ](img4/g6.png)

![Comparaison III ](img4/g8.png)

:::

**Deux variables quantitatives**

* Une nuage de point pêche rapidement lorsque le nombre d'observations augmente, par exemple audelà de 200. 
* Solutions: 
  - Courbes de niveaux
  - `Heatplot`/`hexplot`: l'idée est de visualiser un histogramme "vu du dessuss", la hauteurs des barres étant données par un différentiel de couleur issues d'une palette séquentielle (du clair au foncé par exemple). 
  

```markdown
ssc install heatplot, replace  
```

* Il peut-être intéressant d'ajouté les distributions marginales des deux variables. J'ai programmé une petite commande (encore en version très alpha): **`gjoint`**. Tout le mérite revient à B.Jann pour la commande `hexplot` (j'ai juste combiné `hexplot` avec des histogrammes).

```markdown
net install gjoint, from("https://raw.githubusercontent.com/mthevenin/stata_graphiques/master/ressources/gjoint/") replace
```

```markdown
hexplot price mpg, colors(flare)
gjoint price mpg, palette(flare)
```

::: {layout-ncol=2}

![hexplot](img4/g9.png)

![hexplot](img4/g10.png)

:::

### Variables catégorielles

La principale commande est `tabulate` (`tab`). On peut l'utiliser avec des variables de type string.

**Syntaxe (tableau croisé)**: 

```markdown
tab var1 var2 [, mis nofreq row col sort ......]
```

* Par défaut, l'ordre d'affichage suis la valeur de la modalité si la variable est de type numérique et l'ordre alphabétique pour une variable de type caractère. On peut utiliser l'option `sort` pour afficher par ordre croissant des effectifs observés  [ou utiliser la commande externe **`tabsort`** qui offre plus de possibilités]

* Autres commandes (externe): **`fre`** [B.Jann], **`tabm`** [NJ.Cox], **`tabsort`** [NJ.Cox]

```markdown
ssc install fre
ssc install tabsort
ssc install tabm
```


```{stata}
tab rep78, mis
tab rep78, mis sort 
tab rep78 foreign, nolab mis

fre rep78 

tabsort rep78
```


**Graphiques**

Niveau graphique, les possibilités restent toujours assez limitées pour les variables discrètes (et on abandonne l'idée des horribles camemberts).


On privilégiera ici la commande de NJ.Cox, **`catplot`** 

```markdown
ssc install catplot
```

```{stata}
catplot rep78, percent 
catplot rep78, percent over(foreign)
```



::: {layout-ncol=2}

![Sans comparaison](img4/g11.png)

![Avec comparaison](img4/g12.png)

:::


## **Introduction aux frames**

* Depuis la version 16 (2019)
* Les frames permettent de travailler en parallèle sur plusieurs bases, sans switcher avec des opérations successives d'enregistrement/ouverture (`save`/`use`).
   * Sur l'interface principale, le contenu d'une frame (base de données) est affiché de manière traditionnelle. On peut faire des opérations sur les autres frames déclarées simultanément. 
   * La première base ouverte lors de l'ouverture d'une session est déclarée comme frame par défaut.
* Les frames peuvent être liées entre elles avec une clé d'identification commune. 
  * Importations partielles de variables ou d'observations d'une frame à l'autre.
  * Permet de générer une variable dans une frame en utilisant des variables d'une ou plusieurs autres frames. Il n'est donc pas nécessaire d'apparier les bases entre elles en amont.


On ne verra ici que quelques manipulations de bases, la liaison de frames sera traitée dans le chapitre 6.


**`frame dir`** ou **`frame mist`**

```{stata}
frame dir
frame list
```


```{stata}
sysuse auto, clear
frame dir
```

**`frame rename`**

On renomme une frame avec `ancien nom` `nouveau nom`

```{stata}
frame reset   // voir plus loin - commande ici seulement nécessaire pour compatibilité avec Quarto
sysuse auto, clear
frame rename default auto

frame dir
```


::: callout-note

Autre façon de procéder (et surement meilleure):  

```markdown
frame create auto
frame auto: sysuse auto, clear
```
:::


**`frame nom_frame:`** ou **`frame nom_frame {}`**

* On peut exécuter une commande en la préfixant par **`frame nom_frame:`**
* Pour une série de commandes, il suffit d'enchasser cette série dans des crochets

```{stata}
frame auto: mean price
```


```{stata}
frame auto {
mean mpg
table rep78 foreign  
}
```


**`frame copy`**

Permet de copier à l'idendique une frame **`frame copy nom_frame nouveau_nom`**.  

Dans l'exemple qui suit on va une frame à partir de la base auto, frame *prix*, en conservant avec seulement les variables *foreign* et *price*. 


```{stata}
frame copy auto prix

frame dir
```

Comme indiqué précédemment, on est pas obligé de charger une base déclarée en frame pour effectuer des opérations dessus. On peut donc conserver les deux seules variables *foreign* et *price* tout en gardant la base *auto* chargée. 

```{stata}
frame prix: keep foreign price
frame dir
```

La frame *prix* ne comporte donc plus que deux variables.   

On va supprimer la variable *make* de la base/frame *auto*  

```{stata}
drop make
```


**`frame change`**  

Permet de switcher d'une frame à une autre. Ici ce sont les informations de la frame *prix* qui seront chargée dans l'interface de Stata

```{stata}
frame change prix 

mean price, over(foreign)
```

Du côté de la frame *auto*, base chargée initialement, on note que la suppression de la  variable *make* a bien été enregistrée malgré le change de frame.

```{stata}
frame auto: des
```

**`frame drop`** et **`frame reset`** 

Permettent de supprimer une ou la totalité des frames

**`frame drop nom_frame`**, permet de supprimer une frame, à l'exception de celle chargée dans l'interface.   

```{stata}
frame change auto

frame drop prix

frame dir

```

On a chargé dans l'interface la frame *auto*, puis on a supprimé la frame prix. **Par contre il n'est pas possible de supprimer la frame active dans l'interface**. 

::: callout-note

### Stata 18 

Avec la nouvelle version, il est possible de supprimer plusieurs frames avec `frame drop`, mais toujours à l'exception de celle qui est active.

:::

**`frame reset`**

On peut supprimer toutes les frames, dont celle chargée dans l'interface avec **`frame reset`**. Dans ce cas il n'y a plus de base chargée dans la session.

```{stata}
frame reset
sysuse auto, clear
frame rename default auto
```

```{stata}
frame reset 

des
```





