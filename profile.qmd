---
title: "Principe"
---

```{r, include=FALSE}
options(Encoding="UTF-8")
```

<br>

<div class="alert alert-info">
* Un fichier **profile.do** est un programme qui s'éxécute à l'ouverture d'une session Stata. Ce programme comprendra des éléments de configuration de la session, par exemples: 
  * Affectation d'un répertoire temporaire autre que celui par défaut
  * Modification de la localisation du répertoire *ado plus* (mieux vaut le mettre sur le lecteur D à l'Ined)
  * Tous les commandes de paramétrisation qui commence par **`set`**: contrôle du défilement de l'output, affichage du nombre de décimales dans les tableaux de régression
  * Création d'un log de session automatique. J'y tiens, un problème n'arrive pas toujours qu'aux autres
  * paramètre des graphiques: thèmes, police d'affichage...
* Tous les commandes sont donc insérées dans un seule programme, il est possible de les activées, de les désactivées ou de les modifiées très facilement .
</div>



# Création et modification d'un fichier profile.do 

####  {.bs-callout .bs-callout-gray}
* ffff
* fffff



Le fichier `profile.do` doit être impérativement enregistré dans le répertoire **user**: 

> * Windows: `"C:/Users/nom_user/"`
> * Linux (serveur Margaux): `"home/Users/thevenin_m/"`

Une fois le programme enregistré, son effet n'est pris en compte que pour les sessions qui seront ouvertes ultérieurement et non pour celles en cours. Le programme est chargé uniquement à l'ouverture d'une session, un message apparait dans l'output: 

![](img1/g1.png){width=70%}

Pour facilité l'ouverture et l'enregistrement du fichier sous windows sans avoir à se promener dans l'explorateur de fichier, on peut enregistrer la localisation du répertoire user une fois pour toute dans une macro de type `global`, ici appelé *user*, et l'ouvrir rapidement avec l'invite de commande windows sous Stata (`!` ou `shell`)

Affectation du répertoire user dans une macro:
```{r eval=FALSE}
global user "C:/Users/thevenin_m/"
```

Ouverture du fichier profile.do avec l'invite de commande: 
```{r eval=FALSE}
! $user/profile.do
```


# Exemples {.tabset .tabset-pills}

Les paramètres qui suivent sont forcément plutôt orientés vers mon propre usage. 

## adoplus

```{r eval=FALSE}
sysdir set PLUS "D:/D/ado/plus"
sysdir set PERSONAL "D:/D/ado/personal"
```


## Répertoire temporaire

Warning: multi utilisation d'un programme

```{r eval=FALSE}
cd "D:\D\stata_temp\"
```



```{r eval=FALSE}
noisily display as txt    "------------------------------------"
noisily display as result "  Contenu du repertoire stata_temp  "
noisily display as txt    "------------------------------------"
noisily dir "D:/D/stata_temp/"
```


Warning pour ce qui suit: multi utilisateurs d'un programme

```{r eval=FALSE}
global tmp "D:/D/stata_temp/"
```


## Log automatique

La plus utile de toutes les configurations décrites ici.  
Au préalable, je conseille de créer un répertoire d'enregistrement pour ces fichiers logs. Je les enregistre dans un sous répertoire de *stat_temp* appelé tout simplement **log**.   

[image]  

```{r eval=FALSE}
capture log close statalog
local cdt = "`c(current_date)'"
local cdt: subinstr local cdt " " "-", all
local cti = "`c(current_time)'"
local cti: subinstr local cti ":" ".", all
local statalogname "statalog_`cdt'_`cti'.log"

log using "$user/log/`statalogname'" , text name(statalog)
```



## Commandes de type **set**

Remarque: les commandes dédiées à Python  

> * Il n'est pas nécessaire d'ajouter l'option `permanently` comme le fichier profile est chargé à chaque ouverture de session. 
> * Ensemble des commandes de type `set`: **`help set`**

**Exemple**: nombre de décimales reportées dans l'output d'une régression avec **`set cformats`** (coef, se et bornes ci), **`set sformats`** (statistique du test) et **`set pformats`** (p-value) .  

Si on souhaite fixer le nombre de décimale pour l'ensemble des statistiques à 2

```{r eval=FALSE}
set cformats %9.2f   // max longueur =9
set sformats %9.2f   // max longueur =8
set pformats %9.2f   // max longueur =5
```



## Graphiques






