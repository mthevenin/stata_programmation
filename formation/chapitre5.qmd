---
title: "Les variables"
format: 
  html: default
  docx:
    toc: true
    number-sections: true
filters:
   - lightbox
lightbox: auto
---

```{r, include=FALSE}
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path=list(stata=stataexe))
```

[**Programme du chapitre**](https://mthevenin.github.io/stata_programmation/formation/programme5.do)

*Commandes et expressions introduites*

SECTION                    | COMMANDES
-------------              | -------------
**Types-formats**          | `recast` - `format` - `tostring` - `destring` - `decode` - `encode` - **`sencode`**
**Création variable**      | `generate` - `replace` - `egen` [+ exemples de fonctions associées)
**Variables de comptage**  | `_n` et `_N`
**Sélection et recodage**  | `inlist` - `inrange` - `recode`
**labels**                 | `label variable` - `label define` - `label value` - `label list` - `label drop` - **`xaxis`**

 * **En gras, commandes externes**

Pour accéder aux infomations sur les variables d'une base:  

* Utiliser le  **variables manager** ou la fenêtre d'information **variables properties** si elle est ancrée à l'interface. Ces deux outils permettent de faire des modifications et de récupérer la ligne de commande dans la fenêtre *command*. Le verrou de la fenêtre **variables properties** doit-être retiré .
* Utiliser la commande `describe` [`des`] ou la commande `ds` pour un usage plus avancé (sélection de variables selon leur type par exemple).   


***Variables manager***   
![](img5/g1.PNG){width=50%}
<br>

***Fenêtre properties à droite de l'interface principale (mode dévérouillé)***   
![](img5/g2.PNG){width=50%}

**Commande describe**

```{stata, ,  class.output="result", collectcode=TRUE }
sysuse auto, clear

describe
```


# **Types et format**

## Types

Stata gère tous les  types de variables:  numérique, caractère, date. Un type de variable est un type de stockage.

* Types numériques: *float*, *long*, *double*, *int* et *byte*.
* Types caractère: *str#* et *strL* (très grandes chaînes de caractères). # est la longueur de la chaîne de caractère, elle ne peut pas excéder 2046 pour le type *str*.

Plus d'informations: `help data types`


Modification du type de variable

* Optimisation du poids en mémoire avec `compress`
* Commande **`recast`**  

***Optimisation du poids de la base***


```{stata,  class.output="result"}
compress 
```


***Passage de la variable make en str3***  

En réduisant le type, on va tronquer les chaînes de caractères qui ne garderont que les 3 premières lettres, à manupiler avec prudence donc. Pour cette opération, Stata impose une confirmation avec l'option `force`.

***Variable d'origine***

```{stata,  class.output="result"}
des make 
list make in 1/10
```


***Modification du type***

```{stata,  class.output="result"}
recast str3 make, force
des make
list make in 1/10
```


##  Format

Il s'agit du format d'affichage des valeurs des variables. Ils peuvent être modifiés sans que le type soit changé (décimales, alignement....).    


Variables numérique:  
- format *g*: *général* (définition un peu obsure pour moi)
- format *f*: *fixe*
- plusieurs format d'affichage pour les variables de type dates: *%td* (date avec jour-mois-année), *%tm* (mois), *%tq* (trimestre), *%tw* (semaine). Les dates et leur manipulation sont un domaines très riche, et feront l'objet d'une courte présentation en fin de chapite.

On peut changer le format d'affichage avec la commande **`format`**. Si le format est de type général (g), il est préférable de passer à un format de type fixe (f) On peut un même format à une liste de variables.  



```{stata filename="Syntaxe", eval=F,  class.output="result"}
format %format varlist
```


**Exemple: changement du nombre de décimales** 

Dans la base *auto*, la variable *gear_ratio* est de format fixe à 2 décimales (%6.2f). Pour supprimer, à l'affichage, les deux décimales:
afficher les valeurs sans décimales.  



```{stata,  class.output="result"}
list gear_ratio in 1/10
```


```{stata,  class.output="result"}
format %6.0f gear_ratio
list gear_ratio in 1/10
```


**Exemple: aligner le nombre décimal reporté avec `summarize` sur le format de la variable**

Avec l'option `format` appliquée à la commande `summarize` on peut automatiquement réduire le nombre de décimales reportées dans l'output 


```{stata,  class.output="result"}
sum gear_ratio
sum gear_ratio, d
```

Avec l'option **`format`**

```{stata,  class.output="result"}
sum gear_ratio, format
sum gear_ratio, d format
```


## Modification du type

Il est possible de basculer d'un type caractère à un type numérique et inversement

**De numérique à caractère**   

<br>
Si la variable numérique n'a pas de label affecté sur les modalités, ou qu'on ne veut pas conserver l'information données par les labels, on peut utiliser la commande `tostring`. On peut créer une nouvelle variable avec l'option `gen()` ou remplacer la variable numérique d'origine avec l'option `replace`.  Une des deux options doit être nécessairement renseignée. 


```{stata filename="Syntaxe", eval=F,  class.output="result"} 
  tostring [varlist], gen(nom_varlist)
  tostring [varlist], replace
```


Exemple avec la variable *foreign* qui prend les valeur 0 et 1 avec les labels "domestic" (0) et "foreign" (1)


```{stata,  class.output="result"}
tostring foreign, gen(foreign_str)
des foreign foreign_str

tab foreign foreign_str
```



Si la variable numérique a des labels affectés aux modalités modalités et qu'on souhaite conserver cet information, on utilise la commande **``decode``** 

```{stata filename="Syntaxe", eval=F,  class.output="result"} 
  decode variable, gen(nom_var)
```


Exemple avec la variable *foreign*  

```{stata,  class.output="result"} 
decode foreign, gen(foreign_str)

des foreign foreign_str

tab foreign_str
  
```


**De caractère à numérique**    

Si la variable caractère est a une forme numerique (une suite de nombre comme des années, des âges...), on utilise la commande ```destring```. Lorsqu'il y a des des valeurs manquantes à la variable, on doit uiliser l'option `force`.



```{stata filename="Stata", eval=F,  class.output="result"} 
 destring [varlist] , gen(nom_varlist) 
 destring [varlist] , replace [force]
```


Exemple avec la variable *rep78* qui est transformé dans un premier temps en variables caractère avec `tostring` puis de nouveau transformé en format numérique avec `destring`


```{stata,  class.output="result"} 
tostring rep78, replace
des rep78

destring rep78, replace
des rep78
```


Si la variable caractère n'est pas de forme numérique et que l'on souhaite récupérer les labels sur les modalités, on peut utiliser la commande **`encode`** ou la commande externe **`sencode`** (`net install st0043_2, force`). La seconde permet de remplacer directement la variable d'origine, option particulièrement pratique.. Egalement, cette commande permet plus de souplesse sur le codage de la variable (`help sencode` pour plus de détail).  

Avec `encode` ou `sencode` sans l'option `gsort`, le numéro de la modalité suivra l’ordre alphabétique des chaînes de caractère de la variable: si la variable caractère à pour valeur ("Homme", "Femme"), "femme" sera automatiquement codée 1 et "homme" 2.



```{stata filename="Syntaxe", eval=F,  class.output="result"} 
encode variable, gen(nom_variable)
```


```{stata filename="Syntaxe", eval=F,  class.output="result"} 
```{} 
sencode variable, gen(nom_variable) replace gsort()
```

Exemple avec la variable *foreign_str* (variable caractère créée précédemment à partir de la variable foreign)


```{stata,  class.output="result"}
encode foreign_str, gen(foreign2)

tab foreign2
tab foreign2, nolab
```

    
::: callout-warning
## Type de variable pour les modèles  
Les variables de type caractères ne sont pas acceptées, Stata renvoie alors un message d'erreur avec **no observation**. Si c'est le cas, les commandes `destring` et `encode` vont s'avérer particulièrement utiles. 
:::



# **Création d'une variable**  

## generate - replace

La création d'une nouvelle variable se fait avec la commande ```generate``` généralement tronquée jusqu'à ```gen```.


```{stata filename="Syntaxe", eval=F,  class.output="result"} 
gen nom_variable=valeur/fonction [expression: if in inlist inrange...]
```

Pour remplacer la valeur d'une valeur variable existante on utilise la commande ```replace```. Le nom n'est malheureusement pas tronquable.  


```{stata filename="Syntaxe", eval=F,  class.output="result"} 
replace nom_variable=valeur/fonction [expression: if in inlist inrange...]
```


* On peut utiliser le préfixe ```bysort```
* Pour utiliser une fonction mathématique (log, exp, .)  => `help math_functions`
* Pour afficher la liste complète des fonctions (variables caractères, statistiques, pseudo nombre aléatoire, dates.): `help function`  

**Rappel**: attention  entre l'opérateur d'affectation (`=`) et l'expression conditionnelle (`==`).   

<br>

**Création d'une indicatrice (0,1)**    
<br>
On peut rapidement générer des indicatrices (0,1) à partir d'une expression conditionnelle:

```{stata filename="Syntaxe", eval=F,  class.output="result"} 
gen x= expression_conditionnelle
```


Exemple avec la variable *rep78*. On génère la variable *rep2* qui prend la valeur 1 si *rep78*>3, 0 sinon. Comme il y a des valeurs manquantes dans la variable d'origine, on corrige l'information pour l'indicatrice dont les valeurs manquantes ont été automatiquement affectées à la valeur 0.


```{stata,  class.output="result"} 
gen rep2 = rep78>3
replace rep2 = . if rep78==.
tab rep78 rep2
```


<br>
Remarque: Avec la commande `tabulate` on peut créer une série d'indicatrices à partir d'une variable catégorielle avec l'option `gen(nom_variable)`


```{stata filename="Syntaxe", eval=F,  class.output="result"} 
tab x, gen(nom_variable)
```


Exemple avec la variable *foreign*. Avec `tabulate` on va générer deux indicatrices: *origine1* si *foreign*=0, et *origine2* si *foreign*=1. Un label à la variable est automatiquement créé indiquant la valeur de la variable d'origine. 


```{stata,  class.output="result"} 
tab foreign, gen(origine)

des origine1 origine2

tab origine1 foreign
tab origine2 foreign
```


## egen  

**`egen`**: extented generate  
**`egenmore`**: package programmé par NJ.Cox qui ajoute des fonctions associée à `egen` [`ssc install egenmore`]

Réservé à l'utilisation de fonctions. Pour obtenir la liste `help egen`.   
<br>



***Exemple***: on va créer dans un premier la variable *mprice* qui reporte pour chaque observation la moyenne de la variable *price*. Dans un second temps, on va créer la variable *mprice_or*, mais avec le prix moyen des voitures selon leur origine (*foreign*). La fonction utilisée est la fonction **`mean()`**.  


```{stata,  class.output="result"} 
egen mprice = mean(price)

list  make price mprice in 1/10
```


```{stata,  class.output="result"} 
bysort foreign: egen mprice_or = mean(price)

list  make price mprice in 1/5
list  make price mprice in 66/70
```


::: callout-warning
## Les fonctions `sum()` et `total()`**

Sans aucune explication, la fonction `sum()` qui permet d'obtenir une somme incrémentale n'est pas associée à `egen` mais à `generate`. En revanche la fonction `total()` est associée à `egen`. Il faut le retenir.

**Exemple**: on veut créer un identifiant numérique (variable *id*) pour chaque voiture (dans la base on a une seule voiture par nom de voiture).


```{stata,  class.output="result"}
gen x = 1 
gen id = sum(x)

list id make in 1/5
list id make in 66/70
```


Si on veut reporter le nombre total d'observations dans la base (variable *N*), avec la fonction `total`:

```{stata,  class.output="result"}
egen N = total(x)

list id N make in 1/5
list id N make in 66/70
```

:::

On va le voir, ces deux variables qui ont été générées peuvent l'être directement  avec les *variables internes dites de comptage*. 


::: {.callout-tip icon="false"}
## Package gegen (M.Caceres)

- Pour les volumétries dépassant le million d'observation il est fortement conseillé d'utilisée les commandes associées au package de *Mauricio Caceres*, ici la commande **`gege,`**.
- <https://gtools.readthedocs.io/en/latest/>
- <https://mthevenin.github.io/stata_programmation/speedup/gtools.html>
:::

 
# **Les variables internes de comptage**

Très utile avec des données longitudinales, de durées ou toute base avec des données avec cluster. 
<br>

Deux variables de comptage: ```_n``` et ```_N```    
<br>

* **`_n`** : renvoie le rang de l'observation  
* **`_N`**:  renvoie le  nombre total d'observations  

**Application**: On veut créer un identifiant sur l'ensemble des observations de la base auto.


```{stata, class.output="result"} 
gen id = _n
list make foreign id in 1/10
```



**lead & lag**  

Par défaut, pour toutes les instructions le rang sélectionné est celui de la ligne de l'observation  x=x[_n]  

* Lag(-1):  Sélection du rang inférieur d'une variable x: **$x=x[_n-1]$**.  Remarque: la première observation est une valeur manquante.
* lead(+1): Sélection du rang supérieur d'une variable x: **$x=x[_n-1]$**.  Remarque: la dernière observation est une valeur manquante.


```{stata,  class.output="result"} 
gen lag_make  = make[_n-1]
gen lead_make = make[_n+1]

list make lag_make lead_make in 1/10
```
 
 
# **Sélection de plusieurs modalités, recodage**

**inlist**    
Pour sélectionner plusieurs modalités d'une variable dans une expression conditionnelle ```inlist(variable, valeur1, valeur2,..)```.  
Utile si la variable n'est pas de type ordinale.  
Exemple: ```gen Y=1 if inlist(X,1,3,6,10)```  
L'expression est hélas toujours limitée à 10 valeurs pour les variables caractères.  
<br>

**inrange**  
Pour sélectionner un intervalle dans une expression ```inrange(variable, valeur1,valeur2)``` avec $valeur1<valeur2$.  
Exemple:  ```gen Y= inrange(X,5,10)``` pour obtenir $Y=1$ si $50\leq x\leq 10$ 0 sinon.  
<br>
**recode**   
Permet de changer les valeurs d'une variable numérique: 

`recode variable (anciennes_valeurs=nouvelle_valeur) (ancienne_valeurs=nouvelles_valeur).....```  

<br>
**Application**: recoder la variable foreign 0=>1 et 1=>2.  


# **Les labels**  

La création et la modification peut se faire directement via  la boite de dialogue du **variable manager**.  

<br>
**Label des variables**    


```{stata filename="Syntaxe", eval=F,  class.output="result"}
label nom_variable "label" 
```

On peut modifier/écraser un label existant

Exemple
```{stata,  class.output="result"}  
des foreign
label variable foreign "Origine de la voiture"
des foreign
```

**Label sur les modalités des variables**  
<br>
Deux étapes: la création des label et leurs affectation à une ou plusieurs variables. 
<br>
**Création du label**: **`label define`**    

```{stata filename="Syntaxe", eval=F,  class.output="result"}
label define nom_label val1 "label1" val2 "label2"... [,modify]
```    

Exemple variable binaire (0,1) labélisée "No-Yes" avec comme nom de label NY : `label define NY 0 "non" 1 "oui"`    

S'il y a beaucoup de modalités à labelliser, on peut affecter ligne par ligne un label par modalité et utiliser 
l'option ```modify```   

```{stata filename="Syntaxe", eval=F,  class.output="result"}
label define nom_label 1 "nom1", modify
label define nom_label 2 "nom2", modify
label define nom_label 3 "nom3", modify
label define nom_label 4 "nom2", modify
```

**Affectation du label**: **`label value`**    


```{stata filename="Syntaxe", eval=F,  class.output="result"}
label value nom_variable nom_label
```

***Exercice***: créer une variable indicatrice qui regroupe de la varble rep78: 0 si rep78<4 et 1 si rep78>3. Affecter un label à la variable (au choix) et des labels aux modalités (au choix).    

```{stata,  class.output="result"}
#| code-fold: true
#| code-summary: "Show the code"

gen rep78b = rep78<4
replace rep78b=. if rep78==.

label define rep78b 0 "1-3 réparations" 1 "Plus de 3 réparations", modify
label value rep78b rep78b
des rep78b
tab rep78 rep78b
```



**Fichiers de labels et multilangue**  

**label save**  
On peut générer un fichier (.do) donnant le programme qui génère les labels (existants) d'une base:  commande ```label save``` (par le menu: data => data utilities => label utilities => save labels as do file).    
<br>
**multilangue**  
Pour des enquêtes internationales, on peut de créer des labels en plusieurs langues switcher d'une langue à l'autre (exemple MAFE l'Ined).
La commande doit être installée, elle est externe à Stata (`ssc install mlanguage` - auteur  *Jeroen Weesie*).    


::: callout_note
## TODO
Faire un rapide topo sur les variables de type dates

:::

