---
title: "Le langage Stata"
---

```{r, echo=FALSE, , message=FALSE}
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path=list(stata=stataexe))
```


# **La syntaxe générique**

**Remarque sur les crochets**  


::: callout-note

## [...] dans les commandes et les fichiers d'aide 
A ma connaissance, à l'exception des pondérations il n'y a pas d'utilisation de crochets dans la syntaxe des commandes usines. Dans les fichiers d'aide et pour cette formation, ils indiquent les expressions optionnelles d'une ligne d'instruction.

:::

Forme concise de la syntaxe STATA pour une instruction portant sur des variables:

```{stata, eval=F}
nom_command varlist [, options ]
```

***Exemple*** : **`tabulate var1 var2, nofreq row`**  

Ce qui ce traduit par: produire un tableau croisé entre  *var1* (en ligne) et la *var2* (en colonne) en affichant la répartition en % de  *var2* pour chaque valeur de *var1* et pour l'ensemble des donnnées renseignées .

```{stata, echo=F, collectcode=T}
sysuse auto
```

```{stata, class.output="result"}
tabulate rep78 foreign, nofreq row
```

* Forme générique de la syntaxe STATA

```{stata, eval=F}
[prefix:] command varlist [ [type_weight=var] if/in, options]
```

Expression conditionnelle (sélection): `if` (sélection de valeurs) ou `in` (sélection d'observations)  

Exemple : **`bysort var2: summarize var1 if var4!=1, detail`**  
Ce qui ce traduit par: pour chaque valeur de *var2*, des statistiques descriptives détaillées pour la variable *var1* si la valeur de *var3* est différente de 1. 

```{stata, class.output="result"}
bysort foreign: summarize price if rep78!=1, detail
```


Si la commande implique une base de données, le nom de la base est généralement précédée de **`using``** (sauf pour les instructions officielle d'ouverture/sauvegarde d'une base):  
```{stata, eval=F}
command using nom_base [,options]
```


# **Autres langages pris en charge** 

*interne*  

* Langage matriciel (MATA)
* Editeur de texte (SMCL) pour rédiger les aides ou paramétrer la forme des outputs (c'est une une horreur)
* Création de boites de dialogue (proche du Java)
* La programmation de commande dispose d'un certain nombre d'éléments de langage dédié. Pour une réutilisation ultérieure automatisée, le programme est enregistré dans un fichier *.ado*  

*Externe*  

* Via une commande externe (`rsource`), on peut exécuté du R. R doit ête bien évidemment installé.


```{stata, echo=F, collectcode=T}
run "D:\D\ado\plus\r\rsource.ado"
```

```{stata, class.output="result"}
rsource, terminator(END_OF_R) 
1+1
END_OF_R
```


* Depuis la version 16 on peut programmer intéractivement en Python avec Stata. Cette intégration permet à Python de reconnaitre les macros stata dans son code...c'est très utile. Python doit néanmoins être installé manuellement.


*Vérification de l'installation*
```{stata, class.output="result"}
python query
```

*Utilisation de python*
```{stata, class.output="result"}
python: 

a = 4
b = 2
a*b
 
end
```

* Depuis la version 17 de Stata, on peut également programmer intéractivement en *Java*... mais là je n'y connais absolument rien.

* Intégration de l'édition en  *markdown* pour produire des rapports en html ou pdf. Egalement possibilité de générer des documents word ou excel avec des commandes dédiées. L'intégration de *latex* est également possible via une commande externe. Toutes ces possibilité me semble néanmoins nettement en deçà de ce qui est réalisable avec **RStudio** en particulier avec le nouvel outil `Quarto` associé à `Statamarkdown`... utilisés pour faire ce support.


# **Les opérateurs**

 
| **Opérateurs**                                     |  
|----------------------------------------------------|
|  **`&`** **Et**                                    |
|  **`|`** [Alt+Gr6]   **Ou**                        |
|**Opérateurs d'affectation**                        |   
| **`=`**            | **prend la valeur**           |   
| **Opérateurs pour expressions conditionnelles**    |  
| **`==`**  | **Egal à**                             |  
| **`!=`**  | **Ne pas être égal à**                 |  
| **`>`**   | **Strictement supérieur à**            |  
| **`>=`**  | **Supérieur ou égal à**                | 
| **`<`**   | **Strictement inférieur à**            |
| **`<=`**  | **Inférieur ou égal à**                |
| **Opérateurs arithmétique**                        |
| `+` , `-` ,  `/` , ^  (puissance)                  |
|**Opérateur chaîne de caractères**                  | 
| `+`       |  concaténation [1]                     |


[1] *`+`*  concatène des variables caractères qui n'ont pas de valeur manquante. Sinon utiliser  **`concat`** associée à la commande **`egen`** (voir chapitre sur la création de variables).  

# Les valeurs manquantes  


::: callout-important
## Statut des valeurs manquantes (très important)**

Elles prennent la plus grande valeur possible, aucune valeur de la base de données d'une variable ne peut-être plus élevée.     Ceci doit être pris en compte dans les expressions conditionnelles impliquant par exemple des regroupement  de variables ordinales ou quantitatives:   
Si une variable numérique $x$ a des valeurs manquantes, la condition `if X>valeur` conservera ces informations manquantes.  
:::

Si $X=(1, 2, 3, 4, 5, 6, .)$:  

* `...if x>4` conserve $x=(5,6,.)$    
* `...if x>4 & x<.$` ou `...if x>4 & x!=.` conserve seulement $x=(5,6)$  

**Les valeurs manquantes utilisateurs**  
On peut rendre la valeur manquante informative en lui ajoutant une lettre:  **.a** , **.b**, **.c**  etc....  
Exemple: *.a* = Ne sait pas, *.b*=Refus , *.c*=Pas de réponse.


# **Casse et troncature**

## **Sensibilité à la casse** 
Comme R ou Python, Stata est intégralement  sensible à la casse pour les instructions, seulement en minuscules. Par exemple  `TABULATE X` renverra un message d'erreur.  


## **Troncature des instructions et des options**

Dans le fichier d'aire d'une commande usine ou externe, le niveau de troncature est indiqué par un soulignement dans l'instruction: par exemple **`tabulate`** est souligné au niveau de  **ta** : **tabulate** = **tabulat** = **tabula** = **tabul** = **tabu** = **tab** = **ta**. On utilise généralement ```tabulate``` ou ```tab```.  


A manier avec une certaine précaution car le programme peut devenir rapidement incompréhensible, surtout s'il est partagé entre personnes dont la pratique diffère à ce niveau:  

```{stata, eval=FALSE}
tabulate var1 var2, nofreq row miss  

* est équivalent à: 

ta var1 var2, nof r m
```


# **`quietly` et `display`**   


On peut rendre le résultat d'une commande invisible dans la fenêtre output avec `quietly` (`qui`).    

```{stata, class.output="result"}
sysuse auto.dta
    tab rep78
qui tab rep78
```

Remarque: ne fonctionne pas avec les graphiques où l'on doit utiliser l'option `nodraw`

**display (di)**     

Ce n'est pas une commande à  proprement parler, mais l'instruction ```display``` (```di```) permet d'afficher dans l'output, entres autres, des opérations arithmétiques (c'est donc une calculatrice. 

```{stata, class.output="result"}
di exp(1)/(1+exp(1))
di "SALUT!!!!"
```

Elle est également utilisé pour vérifier le contenu d'une macro variable, de préférence lorsque cette macro implique des valeurs.  


# Sélection de variables


On peut sélectionner un ensemble de variables qui ont une racine commune, par exemple **c**,  en écrivant : `*c*`.   
Exemple:        
television, telephone, table ont comme racine **t**. Pour supprimer ces variables, on peut exécuter `drop t*` au lieu de `drop television telephone table`.  
Si on souhaite supprimer *television* et *telephone* seulement :  `drop tele*`.    

Si on  veut sélectionner des variables occurencées ou dans comme la base *auto*  les 5 variables qui se suivent [headroom, trunk, weight, length, turn]:  `keep headroom-turn` . Pour des variables occurencées de x1 à x5: `keep x1-x5`.    


# **Macros et répétition**

## **Introduction au macros**

Juste une introduction...Vu la simplicité du langage Stata, il est conseiller de se mettre rapidement à la manipulation des expressions dites `macro`.  

* Une macro, dans sa version la plus simple, est une expression qui est utilisée une ou plusieurs fois dans un programme. Elle sont de type temporaire (`local`) ou enregistré en dur (`global`). 
* Les commandes, en particulier sur les opérations statistiques, enregistre un certains nombre d'objet de type macro qui peuvent être utilisés ultérieurement. On peut récupérer leur liste à la fin du fichier d'aide, et les visualiser les valeurs enregistrées après avoir exécuté une commande avec `return list`, `ereturn list`...    
* Un autre type d'objet, appelé **`scalar`** ressemble à une macro mais n'en est pas. Il s'agit de pseudo variables. Ils ne seront pas traités.
* Le contenu d'une macro peut être affiché avec `display` ou `macro list` (`mac list`)
  - privilégier `display` pour afficher le contenu d'une macro de type valeur
  - privilégier `mac list` pour afficher le contenu d'une macro de type chaîne de caractère lorsque des doubles quotes (") doivent rester apparentes. La gestion des " dans les macros peut s'avérer particulièrement retord.


**Macro temporaire**  

L'instruction `local` permet de définir des macros variables temporaire (disparaissent après l'exécution du programme):  
```{stata, eval=F}
local nom_macro expression
``` 

Le nom de la macro dans l'expression sera indiquée dans la suite du programme par ```nom_macro'`` 

```{stata, class.output="result"}
local a 2

di 5^(`a')
``` 


```{stata, class.output="result"}
local var price mpg
sum `var'
```


On en voit tout de suite l'utilité: si je veux changer la liste de variables pour les instructions `sum` (troncature de `summarize`) et pour `regress`, je le fais une fois (dans la définition de la macro) au lieu de deux.  


Avec Stata peut définir également des macros dites *global* qui  sont sauvegardées et s'appliqueront à tous les programmes (on peut les supprimer). Leur utilisation est moins courante: `global nom_macro expression`, le nom de la macro dans l'expression s'écrira `$nom_macro`.   

```{stata, class.output="result",  collectcode=T}
sysuse auto.dta

global x mpg weight length turn

sum $x
reg price $x
macro drop x
```


La liste des macro enregistrée est donnée par l'instruction: `macro dir`


## **Objets sauvegardés à l'exécution d'une commande**

- Ces objets de type macro ne sont conservés en mémoire qu'entre 2 commandes exécutés
- On peut donc les manipuler qu'à ce moment là, en particulier les enregistrer sous forme de macro standard pour les utiliser ultérieurement. 


```{stata, class.output="result", , collectcode=T}
qui sum price

return list

local mprice = r(mean)


```


## **Répétition avec des boucles**


* **`forvalues**: valeurs occurencées, compteur  

`for num 1/n: commande` est de plus en plus abandonnée (aide Stata supprimée). On lui préfère maintenant l'instruction ```forvalues```  pour effectuer des boucles sur des occurences numériques.    

Si l'on souhaite par exemple changer le nom des variables x1 à x9 en var1, var2,...., var9: 
```{stata, eval=FALSE}
forvalues i=1/9 {
  
rename x`i' var`i' 
  
}
```

* **`foreach`**: termes d'une expression enregistrée sous la forme d'une macro

Par l'exemple, et juste une petite introduction. On veut faire une régression linéaire entre la variable *price* et la variable *foreign* en ajoutant une seule autre variable dans cette liste: *mpg*, *headroom*, *trunk*.  


Au lieu d'exécuter:
```{stata, eval=F}
regress price foreign mpg      
regress price foreign headroom 
regress price foreign trunk    
```

On génère une macro variable temporaire qui liste ces 3 variables , et on exécute une boucle avec l'instruction `foreach`.  

```{stata, class.output="result"}

local var mpg weight length turn headroom trunk

foreach x of local var {

regress price foreign `x', noheader
}
```


....et on peut aller plus loin... Juste pour information, avec une technique de macro empilée, on ajoute les les variables une à une au modèle.  

```{stata, class.output="result"}
local j mpg weight length turn headroom trunk

foreach j2 of local j {
local x `x' `j2'
  
di  "covariables introduites = `x'"  // pour afficher ce qui est lu dans la macro
  
regress price `x' , noheader
}
  
```


