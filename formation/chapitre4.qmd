---
title: "Les bases de données"
---

```{r, echo=FALSE, , message=FALSE}
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path=list(stata=stataexe))
```



# **Affectation du répertoire de travail**

La commande ```cd``` (Current Directory), permet d'indiquer le chemin d'accès du répertoire où se trouve la base à ouvrir ou à  enregistrer.   Si aucun chemin d'accès n'est spécifié, Stata ira chercher la base dans le répertoire par défaut (normalement C: ou D:).

Syntaxe
```{r filename="Syntaxe", eval=F}
cd "path"
```

**Remarque**  
Avec cette commande, un seul repertoire de travail est actif. On peut élargir les possibilités en affectant des répertoires avec des macros variables locales ou globales

# Ouverture d'une base

**Commande** ```use```  
<br>
Sans chargement d'un répertoire
```{r filename="Syntaxe", eval=F}
use "path/nom_base.dta" [,clear]
```
 
L'option ```clear``` permet d'effacer une base en cours d'utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser ```clear``` comme instruction avant d'ouvrir une base. on ne supprime pas la base du répertoire (commande ```erase```), elle est juste écrasée dans la session.  

Syntaxe avec affectation d'un répertoire: 
```{r filename="Syntaxe", eval=F}
cd "path"
use "nom_base.dta", clear 
```

ou

```{r filename="Syntaxe", eval=F}
cd "path"
clear
use "nom_base.dta" 
```

Remarque: pour les bases d'exemples préinstallées,  on utilise la commande ```sysuse```. Dans les fichiers d'aide, des exemples font également appels a des bases localisées sur des serveurs qui s'ouvrent avec la commande ```webuse```.  

```{r filename="Syntaxe", eval=F}
sysuse auto, clear
```

:::  callout-note

## **Ouverture d'une base stockée sur un git [github, gitlab ...]**

Dans un premier temps, comme pour `cd` il faut charger le répertoire où se trouve localisé la base, avec la commande **`webuse set`**. Par exemple sur mon dépôt git, une base d'exemple (*logement.dta*) pour une commande se trouve à cette adresse: <https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint>  

Pour charger ce répertoire à distance: 

```{r, eval=F}
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"
```

On remarque que le chemin n'est pas identique au simple lien (spécificité des dépôt de type git).  

Il suffit ensuite de charger la base avec `webuse`

```{r, eval=F}
webuse logement.dta, clear

des
```

On revient au dépôt officiel de stata avec `webuse set`


En résumé avec un seul bloc d'instructions:  

```{stata, class.output="result"}
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"

webuse "logement.dta", clear

webuse set
```

:::


# **Sauvegarde d'une base** 

**Commandes** ```save``` ou ```saveold```  


```{stata filename="Syntaxe", eval=F}
save "path/nom_base.dta" [, replace]     
```

L'option `replace` permet d'écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l'utiliser dès la première sauvegarde (un message d'avertissement s'affiche).  

```saveold``` permettra d'ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec `save` il ne sera plus possible d'ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l'encodage Utf8 avec la version 14).


```{stata filename="Syntaxe", eval=F}
 saveold "path/nom_base.dta", [replace] [version(#)] // # = numéro de la version de Stata: 
```
 
Remarques: 

* Ecrire l'extension .dta n'est pas obligatoire
* Les doubles quotes ne sont obligatoires que s'il y a un espace dans le chemin d'accès et/ou dans le nom de la base 


```{stata filename="Syntaxe", eval=F}
use "ma base", clear 
save ma_base, clear 
```


# **Décrire le contenu d'une base**

Commande ```describe```


```{stata filename="Syntaxe", eval=F}
describe [varlist , short]
```

- La commande est régulièrement tronquée  jusqu'à ```des```

Exemple 

```{stata, class.output="result", collectcode=T}
sysuse auto.dta, clear

des

```


# Affichage de la base dans l'output


Commande ```list```  


```{stata filename="Syntaxe", eval=F}
 list [varlist] [expression]
```


```{stata, class.output="result"}
list price mpg turn foreign in 1/10
```



# **Autres commandes**

**labelbook et label list**  

Commande ```labelbook```: affiche les informations sur les labels affectés aux modalités des variables. Peu utilisé.

 
```{stata filename="Syntaxe", eval=F}
labelbook [nom_label]
```

```{stata, class.output="result"}
labelbook origin
```


On peut également utiliser la commande ```label list [nom_label]``` si on connait le nom du label. Le nom du label peut-être récupéré dans describe ou dans le fenêtre properties (voir plus loin également dans le variable manager)

```{stata, class.output="result"}
label list origin
```


# **Description statistique des variables**

Dans les menus de l'interface principale: **Statistics** => **Summaries, tables & tests**

## **Variables continues**

**Commande `summarize`** 

Avec l'option `detail` (`d`) on obtient la moyenne, la variance, les quantiles, la symétrie...). La commande peut-être tronquée jusqu'à `sum`.     

**Warning**: il existe également une fonction `sum` pour générer des cumuls lors d'une création de variable [voir chapitre 5].  

```{stata filename="Syntaxe", eval=F}
summarize varlist [, detail]
```

A voir également:  les commandes `mean` ou `tabstat`. Mais également la commande `table` permet de calculer des quantités de type moyenne, médiane, variance.... pour les différentes valeurs d'une variable catégorielle, et qui intègre des éléments pour exporter les résultats dans plusieurs format (je ne suis pas très à jour sur ce point).


```{stata, class.output="result"}
sum price length, d
```


```{stata, class.output="result"}
bysort foreign: sum price, d
```    


**Pour aller plus loin (voir introduction aux macro dans le chapitre précédent**   

En bas de l'aide d'une commande, **stored result** indique les informations enregistrées temporairement.  
Pour la commande `summarize`:  

```{}

*Extrait de l'aide de summarize

* help summarize

    summarize stores the following in r():

    Scalars   
      r(N)           number of observations
      r(mean)        mean
      r(skewness)    skewness (detail only)
      r(min)         minimum
      r(max)         maximum
      r(sum_w)       sum of the weights
      r(p1)          1st percentile (detail only)
      r(p5)          5th percentile (detail only)
      r(p10)         10th percentile (detail only)
      r(p25)         25th percentile (detail only)
      r(p50)         50th percentile (detail only)
      r(p75)         75th percentile (detail only)
      r(p90)         90th percentile (detail only)
      r(p95)         95th percentile (detail only)
      r(p99)         99th percentile (detail only)
      r(Var)         variance
      r(kurtosis)    kurtosis (detail only)
      r(sum)         sum of variable
      r(sd)          standard deviation

```

On peut afficher ces informations avec la commande `return list` (`ereturn list` pour les estimations de modèles)

```{stata, class.output="result"}
qui sum price, d
return list
```

Si l'on souhaite afficher seulement les valeurs de la médiane pour plusieurs variables de la base:

```{stata, class.output="result"}

local var  price mpg rep78 headroom trunk

foreach x of local var {
qui sum `x', d
di as text "La valeur  médiane de la variable `x' est:" as result `r(p50)'
}

```

* Ici **`r(p50)`** joue le rôle d'une macro,
* Ces informations peuvent être utilisées pour générer une variable

**Graphiques**  

Commandes **boxplot** et **histogram**  

Par les menus: **Graphics** => **Distributional graphs**

Syntaxe
```{}
* Boxplot
graph box varlist [, over(var)...]
* Histogramme
histogram varname [, by(var)...]
```
    
```{}  
histogram length, by(foreign)
graph box length, over(foreign)    
```    

![](img4/g1.png)


Les graphiques de type *violin* qui réunie les informations issues des boxplots et histogrammes ne sont pas implémentés dans Stata (possible via Python à partir de la v16 de Stata).

Bien évidemment, d'autres types de graphiques sont possibles, en particulier via des commandes externes. Pour analyses des distributions de deux variables continues, on se reportera par exemple à la commande `heatplot` de **Ben Jann**.  

Exemples
![](img4/g2.png)


## Variables catégorielles

La principale commande est `tabulate` (`tab`)  

Syntaxe (tableau croisé)
```{}
tab var1 var2 [, mis nofreq row col chi2 ......]
```


```{}
tab rep78 foreign, mis

    Repair |
    Record |    Origine voiture
      1978 |  Domestic    Foreign |     Total
-----------+----------------------+----------
         1 |         2          0 |         2 
         2 |         8          0 |         8 
         3 |        27          3 |        30 
         4 |         9          9 |        18 
         5 |         2          9 |        11 
         . |         4          1 |         5 
-----------+----------------------+----------
     Total |        52         22 |        74 

tab rep78 foreign,  nofreq col

    Repair |
    Record |    Origine voiture
      1978 |  Domestic    Foreign |     Total
-----------+----------------------+----------
         1 |      4.17       0.00 |      2.90 
         2 |     16.67       0.00 |     11.59 
         3 |     56.25      14.29 |     43.48 
         4 |     18.75      42.86 |     26.09 
         5 |      4.17      42.86 |     15.94 
-----------+----------------------+----------
     Total |    100.00     100.00 |    100.00 

```

* On peut également utiliser la commande `table` pour afficher des effectifs croisés
* La commande externe `tab3way` permet d'afficher des tables pour 3 variables catégorielles
* Une option interessante est `nolabel`. Si une variable catégorielle a des labels sur les modalités, le tableau ne les affiche pas


```{}
tab rep78 foreign,  nofreq col nolab

    Repair |
    Record |    Origine voiture
      1978 |         0          1 |     Total
-----------+----------------------+----------
         1 |      4.17       0.00 |      2.90 
         2 |     16.67       0.00 |     11.59 
         3 |     56.25      14.29 |     43.48 
         4 |     18.75      42.86 |     26.09 
         5 |      4.17      42.86 |     15.94 
-----------+----------------------+----------
     Total |    100.00     100.00 |    100.00 

```

**Graphiques**

On privilégiera des commandes externes, en particulier celles de **NJ.Cox** `catplot` et `spineplot` 

```{}
ssc install catplot 

* tableau: tab rep78 foreign,  nofreq col
catplot rep78, by(foreign) percent(foreign)
* tableau: tab rep78 foreign,  nofreq row
catplot rep78, by(foreign) percent(foreign)
spineplot foreign rep78
```

![](img4/g3.png)


```{}
ssc install spineplot
spineplot foreign rep78
```


![](img4/g4.png)


# La boîte à outils

## Tri d'une base

Commande `sort`   
<br>

```{}
sort varlist
```  

* La commande ```sort``` n'effectue que des tris croissants.  Pour faire un tri décroissant, on peut utiliser la commande externe  ```gsort```
* Le tri d'une peut (voire doit)  être effectué lorsqu'on veut répéter une instruction avec le préfixe ```bysort```: ```bysort varlist: instruction```.  Il est également obligatoire lorsqu'on veut apparié des bases

## Repérage et suppression des doublons

**Repérage des doublons**  

Commande `duplicates tag`  
<br>
Syntaxe
```{}
duplicates tag [varlist], gen(var)
```
Si varlist n'est pas renseigné, l'analyse des réplications se fait sur toutes les variables de la base. La variable créée (```gen(var)```) compte le nombre de doublons.

Commande `duplicates drop`

Syntaxe
```{}
duplicates drop [varlist]
```

## Modifier la place des variables dans la base

Commande `order`


```{}
order varlist, [first/last] [after/before(varname)]
```

Exemple
```{}  
order foreign, first
order price, last
order foreign, after(rep78)
```


## Importation/Exportation

**Excel et fichiers textes (.txt, .csv)**    
<br>

* Le plus simple est passer parle menu: fichiers => **Import** ou **Export**
* Pour excel les commandes sont ```import excel``` et ```export excel```
* Pour des fichiers textes type csv (R), les commandes sont ```import delimited``` et ```export delimited```

**SAS**    
<br>

* Depuis la dernière version de Stata (16), il est possible d'importer directement des formats `sas7bdat`. Pas d'exportation possible.
* Pour les versions antérieure, la solution install?e via sasxport n'est pas terrible, la solution est d'utiliser le package externe  `savasas`
  * Sas   => Stata (importation): commande `usesas`  
  * Stata => Sas (exportation)  : commande `savasas`
  * Il faut diter un .do file dont le lien est donn? dans l'aide si le bon chemin d'accès à SAS Windows n'est pas spécifié . Demander à MT si problème.  Avec ```savasas```, on peut créer un catalogue de format (en dur) avec l'option format.  
  * A l'Ined, si on ne dispose de Stata et Sas sur son poste, la solution Linux fonctionne sur le serveur Margaux.


**SPSS**  
<br>

* Depuis la dernière version de Stata (16), il est possible d'importer directement des bases en format *spss*
* Pas de possibilité d'exportation

