---
title: "Les bases de données"
---

```{r, echo=FALSE, , message=FALSE}
library(Statamarkdown)
stataexe <- "C:/Program Files/Stata17/StataSE-64.exe"
knitr::opts_chunk$set(engine.path=list(stata=stataexe))
```



# **Affectation du répertoire de travail**

La commande ```cd``` (Current Directory), permet d'indiquer le chemin d'accès du répertoire où se trouve la base à ouvrir ou à  enregistrer.   Si aucun chemin d'accès n'est spécifié, Stata ira chercher la base dans le répertoire par défaut (normalement C: ou D:).

Syntaxe
```{r filename="Syntaxe", eval=F}
cd "path"
```

**Remarque**  
Avec cette commande, un seul repertoire de travail est actif. On peut élargir les possibilités en affectant des répertoires avec des macros variables locales ou globales

# **Ouverture et sauvegarde d'une base**

## Ouverture

**Commande** ```use```  
<br>
Sans chargement d'un répertoire
```{r filename="Syntaxe", eval=F}
use "path/nom_base.dta" [,clear]
```
 
L'option ```clear``` permet d'effacer une base en cours d'utilisation. Il est conseillé de mettre cette option systématiquement. On peut également utiliser ```clear``` comme instruction avant d'ouvrir une base. on ne supprime pas la base du répertoire (commande ```erase```), elle est juste écrasée dans la session.  

Syntaxe avec affectation d'un répertoire: 
```{r filename="Syntaxe", eval=F}
cd "path"
use "nom_base.dta", clear 
```

ou

```{r filename="Syntaxe", eval=F}
cd "path"
clear
use "nom_base.dta" 
```

Remarque: pour les bases d'exemples préinstallées,  on utilise la commande ```sysuse```. Dans les fichiers d'aide, des exemples font également appels a des bases localisées sur des serveurs qui s'ouvrent avec la commande ```webuse```.  

```{r filename="Syntaxe", eval=F}
sysuse auto, clear
```

:::  callout-note


**Ouverture d'une base stockée sur un git [github, gitlab ...]**

Dans un premier temps, comme pour `cd` il faut charger le répertoire où se trouve localisé la base, avec la commande **`webuse set`**. Par exemple sur mon dépôt git, une base d'exemple (*logement.dta*) pour une commande se trouve à cette adresse: <https://github.com/mthevenin/stata_graphiques/tree/main/programmation/gjoint>  

Pour charger ce répertoire à distance: 

```{r, eval=F}
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"
```

On remarque que le chemin n'est pas identique au simple lien (spécificité des dépôt de type git).  

Il suffit ensuite de charger la base avec `webuse`

```{r, eval=F}
webuse logement.dta, clear

des
```

On revient au dépôt officiel de stata avec `webuse set`


En résumé avec un seul bloc d'instructions:  

```{stata, class.output="result"}
webuse set  "https://raw.githubusercontent.com//mthevenin/stata_graphiques/master/ressources/gjoint"

webuse "logement.dta", clear

webuse set
```

:::


## Sauvegarde

**Commandes** ```save``` ou ```saveold```  

```{stata filename="Syntaxe", eval=F}
save "path/nom_base.dta" [, replace]     
```

L'option `replace` permet d'écraser une version antérieure de la base. Obligatoire à partir de la 2ème sauvegarde, mais on peut l'utiliser dès la première sauvegarde (un message d'avertissement s'affiche).  

```saveold``` permettra d'ouvrir une bases avec une version ancienne de Stata non compatibles avec la version courante. Cela commence à devenir moins critique, mais avec `save` il ne sera plus possible d'ouvrir une base avec une version inférieure à la 13 ou inférieur à la 13 (passage à l'encodage Utf8 avec la version 14).


```{stata filename="Syntaxe", eval=F}
 saveold "path/nom_base.dta", [replace] [version(#)] // # = numéro de la version de Stata: 
```
 
Remarques: 

* Ecrire l'extension .dta n'est pas obligatoire
* Les doubles quotes ne sont obligatoires que s'il y a un espace dans le chemin d'accès et/ou dans le nom de la base 

```{stata filename="Syntaxe", eval=F}
use "ma base", clear 
save ma_base, clear 
```

## Autres formats

## Importation/Exportation

**Excel et fichiers textes (.txt, .csv)**    
<br>

* Le plus simple est passer par le menu: files + [*Import* ou *Export*] qui dispose d'une fenêtre de prévisualisation.
  * Pour excel les commandes sont `import excel` et `export excel`
  * Pour des fichiers textes type csv (R), les commandes sont `import delimited` et `export delimited`

**SAS**    
<br>

* Depuis la version 16 de Stata il est possible d'importer directement des formats `sas7bdat`. Pas d'exportation possible.
* Pour les versions antérieure, la solution installée via *sasxport* n'est pas satisfaisante. Il est alors conseillé  d'utiliser le package externe  `savasas`
  * Sas   => Stata [importation]: commande `usesas`  
  * Stata => Sas [exportation]  : commande `savasas`
  * Si le chemin d'accès à l'exécutable de SAS Windows n'est pas reconnu, il faut récupérer et éditer le fichier sasexe.do (à partir de la ligne 169), dont l'accès est donné dans le fichier d'aide.  
  * Pour l'exportation, on peut générer un catalogue de format,en dur, avec l'option `format`.  


**SPSS**  
<br>

* Depuis la dernière version de Stata (16), il est possible d'importer directement des bases de ce format.
* Pas de possibilité d'exportation directe.


# **Décrire le contenu d'une base**

Commande ```describe```


```{stata filename="Syntaxe", eval=F}
describe [varlist , short]
```

- La commande est régulièrement tronquée jusqu'à `des`

Exemple 

```{stata, class.output="result", collectcode=T}
sysuse auto.dta, clear

des

```


# **Autres commandes**

## Affichage de la base dans l'output

Commande ```list```  


```{stata filename="Syntaxe", eval=F}
 list [varlist] [expression]
```


```{stata, class.output="result"}
list price mpg turn foreign in 1/10
```


## labelbook et label list   

Commande `labelbook`: affiche les informations sur les labels affectés aux modalités des variables. Peu utilisé.

 
```{stata filename="Syntaxe", eval=F}
labelbook [nom_label]
```

```{stata, class.output="result"}
labelbook origin
```


On peut également utiliser la commande `label list [nom_label]` si on connait le nom du label. Le nom du label peut-être récupéré dans describe ou dans le fenêtre properties (voir plus loin également dans le variable manager)

```{stata, class.output="result"}
label list origin
```


# **Description statistique des variables**


Dans les menus de l'interface principale: **Statistics** => **Summaries, tables & tests**

## Variables quantitatives

::: callout-note
Les commandes qui sont rapidement décrites vont affichés des indicateurs communs, typiquement une moyenne, mais vont se distinguées par la forme de l'output, les possibilités dans l'introduction de pondérations, et sur la réutilisation des résultats sous forme de macro.
:::

### Tableaux d'indicateurs

**Commande `summarize`** 

Comme son nom l'indique la commande `summarize`, avec l'option  `detail` (`d`) donne un résumé complet de la distribution d'une variable quantitative:  moyenne, variance, quantiles, symétrie, applatissement ...)

```{stata filename="Syntaxe", eval=F}
summarize varlist [, detail]
```

Si on indique pas le nom d'au moins une variable, toutes les variables de la base seront sélectionnées.

La commande peut-être tronquée jusqu'à `sum` [**Warning**: il existe également une fonction `sum` pour générer des cumuls lors d'une création de variable  - voir chapitre 5].  

```{stata, class.output="result"}
sum price

sum 
```

```{stata, class.output="result"}
sum price length, d
```

```{stata, class.output="result"}
bysort foreign: sum price, d
```    

* ***Avantage***: récupération des résultats sous forme de macro rapide.
* ***Inconvénients***: pas de sélection des indicateurs avec l'option `detail`, output pas adapté aux comparaisons.

```{stata filename="return list: macros associées aux indicateurs", class.output="result", eval=F }

*Extrait de l'aide de summarize

/* help summarize

    summarize stores the following in r():

    Scalars   
      r(N)           number of observations
      r(mean)        mean
      r(skewness)    skewness (detail only)
      r(min)         minimum
      r(max)         maximum
      r(sum_w)       sum of the weights
      r(p1)          1st percentile (detail only)
      r(p5)          5th percentile (detail only)
      r(p10)         10th percentile (detail only)
      r(p25)         25th percentile (detail only)
      r(p50)         50th percentile (detail only)
      r(p75)         75th percentile (detail only)
      r(p90)         90th percentile (detail only)
      r(p95)         95th percentile (detail only)
      r(p99)         99th percentile (detail only)
      r(Var)         variance
      r(kurtosis)    kurtosis (detail only)
      r(sum)         sum of variable
      r(sd)          standard deviation
*/
```

```{stata, class.output="result"}
qui sum price, d

return list

```


**`mean`**  

Comme son nom l'indique, n'affiche que la moyenne et ses statistiques associées. L'option `over` permet des comparaison la valeur moyenne d'un groupe ou un croisement de groupes 

```{stata, class.output="result"}
mean price  
mean price, over(foreign)
mean price, over(foreign rep78)
```

* **Avantage**: output synthétique si la moyenne de plusieurs groupes comparées
* **Inconvénients**: récupération des résultats via une matrice (on oublie)


**`tabstat`**

Permet de sélectionner les indicateurs avec l'option `stat()` (par défaut la moyenne). L'option `by()` permet de comparer le ou les indicateurs pour chaque niveau d'une variable catégorielle. Dans ce cas `tabstat` affiche également les résultats sur l'ensemble des observations (sinon ajouter l'option `nototal`).

```{stata, class.output="result"}
tabstat price  
tabstat price mpg, by(foreign)
```

```{stata filename="liste des indicateurs", class.output="result", eval=F }

*Extrait de l'aide de summarize

/* help tabstat

        mean            mean
        count           count of nonmissing observations
        n               same as count
        sum             sum
        max             maximum
        min             minimum
        range           range = max - min
        sd              standard deviation
        variance        variance
        cv              coefficient of variation (sd/mean)
        semean          standard error of mean (sd/sqrt(n))
        skewness        skewness
        kurtosis        kurtosis
        p1              1st percentile
        p5              5th percentile
        p10             10th percentile
        p25             25th percentile
        median          median (same as p50)
        p50             50th percentile (same as median)
        p75             75th percentile
        p90             90th percentile
        p95             95th percentile
        p99             99th percentile
        iqr             interquartile range = p75 - p25
        q               equivalent to specifying p25 p50 p75
*/
```


Si on veut ajouter la médiane

```{stata, class.output="result"}
tabstat price mpg, by(foreign) stat(mean median)
```


### Graphiques  



Commandes **boxplot** et **histogram**  

Par les menus: **Graphics** => **Distributional graphs**

Syntaxe
```{}
* Boxplot
graph box varlist [, over(var)...]
* Histogramme
histogram varname [, by(var)...]
```
    
```{}  
histogram length, by(foreign)
graph box length, over(foreign)    
```    

![](img4/g1.png)


Les graphiques de type *violin* qui réunie les informations issues des boxplots et histogrammes ne sont pas implémentés dans Stata (possible via Python à partir de la v16 de Stata).

Bien évidemment, d'autres types de graphiques sont possibles, en particulier via des commandes externes. Pour analyses des distributions de deux variables continues, on se reportera par exemple à la commande `heatplot` de **Ben Jann**.  

Exemples
![](img4/g2.png)


## Variables catégorielles

La principale commande est `tabulate` (`tab`)  

Syntaxe (tableau croisé)
```{}
tab var1 var2 [, mis nofreq row col chi2 ......]
```


```{}
tab rep78 foreign, mis

    Repair |
    Record |    Origine voiture
      1978 |  Domestic    Foreign |     Total
-----------+----------------------+----------
         1 |         2          0 |         2 
         2 |         8          0 |         8 
         3 |        27          3 |        30 
         4 |         9          9 |        18 
         5 |         2          9 |        11 
         . |         4          1 |         5 
-----------+----------------------+----------
     Total |        52         22 |        74 

tab rep78 foreign,  nofreq col

    Repair |
    Record |    Origine voiture
      1978 |  Domestic    Foreign |     Total
-----------+----------------------+----------
         1 |      4.17       0.00 |      2.90 
         2 |     16.67       0.00 |     11.59 
         3 |     56.25      14.29 |     43.48 
         4 |     18.75      42.86 |     26.09 
         5 |      4.17      42.86 |     15.94 
-----------+----------------------+----------
     Total |    100.00     100.00 |    100.00 

```

* On peut également utiliser la commande `table` pour afficher des effectifs croisés.
* La commande externe `tab3way` permet d'afficher des tables pour 3 variables catégorielles.
* Une option intéressante est `nolabel`. Si les modalités ont des libellés, le tableau ne les affiche pas (utile pour du recodage - voir chapitre suivant).


```{}
tab rep78 foreign,  nofreq col nolab

    Repair |
    Record |    Origine voiture
      1978 |         0          1 |     Total
-----------+----------------------+----------
         1 |      4.17       0.00 |      2.90 
         2 |     16.67       0.00 |     11.59 
         3 |     56.25      14.29 |     43.48 
         4 |     18.75      42.86 |     26.09 
         5 |      4.17      42.86 |     15.94 
-----------+----------------------+----------
     Total |    100.00     100.00 |    100.00 

```

**Graphiques**

On privilégiera des commandes externes, en particulier celles de **NJ.Cox** `catplot` et `spineplot` 

```{}
ssc install catplot 

* tableau: tab rep78 foreign,  nofreq col
catplot rep78, by(foreign) percent(foreign)
* tableau: tab rep78 foreign,  nofreq row
catplot rep78, by(foreign) percent(foreign)
spineplot foreign rep78
```

![](img4/g3.png)


```{}
ssc install spineplot
spineplot foreign rep78
```


![](img4/g4.png)


# **La boîte à outils**

## Tri d'une base

Commande `sort`   
<br>

```{}
sort varlist
```  

* La commande `sort` n'effectue que des tris croissants.  Pour faire un tri décroissant, on peut utiliser la commande   `gsort`
* Le tri d'une peut (voire doit)  être effectué lorsqu'on veut répéter une instruction avec le préfixe ```bysort```: ```bysort varlist: instruction```.  Il est également obligatoire lorsqu'on veut apparié des bases

## Repérage et suppression des doublons


**Repérage et suppression des doublons**  

Commande `duplicates tag`  
<br>
Syntaxe
```{}
duplicates tag [varlist], gen(var)
```
Si varlist n'est pas renseigné, l'analyse des réplications se fait sur toutes les variables de la base. La variable créée (```gen(var)```) compte le nombre de doublons.

Commande `duplicates drop`

Syntaxe
```{}
duplicates drop [varlist]
```

## Modifier la place des variables dans la base

Commande `order`


```{}
order varlist, [first/last] [after/before(varname)]
```

Exemple
```{}  
order foreign, first
order price, last
order foreign, after(rep78)
```



